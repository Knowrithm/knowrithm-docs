{
  "basePath": "/",
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "APIKeyDetailsSchema": {
      "properties": {
        "created_at": {
          "example": "2025-09-01T08:00:00.000Z",
          "format": "date-time",
          "type": "string"
        },
        "expires_at": {
          "example": "2025-12-06T00:00:00.000Z",
          "format": "date-time",
          "nullable": true,
          "type": "string"
        },
        "id": {
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid",
          "type": "string"
        },
        "key_prefix": {
          "description": "First 8 characters of API key",
          "example": "ak_AbC12",
          "type": "string"
        },
        "last_used_at": {
          "example": "2025-09-06T10:30:00.000Z",
          "format": "date-time",
          "nullable": true,
          "type": "string"
        },
        "name": {
          "example": "Production API Key",
          "type": "string"
        },
        "permissions": {
          "example": {},
          "type": "object"
        },
        "rate_limit_per_day": {
          "example": 10000,
          "type": "integer"
        },
        "rate_limit_per_hour": {
          "example": 1000,
          "type": "integer"
        },
        "scopes": {
          "example": [
            "read",
            "write"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "active",
            "inactive",
            "revoked",
            "expired"
          ],
          "example": "active",
          "type": "string"
        },
        "updated_at": {
          "example": "2025-09-06T10:30:00.000Z",
          "format": "date-time",
          "type": "string"
        },
        "usage_count": {
          "example": 1250,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "APIKeyIDPathParam": {
      "description": "API Key UUID",
      "example": "123e4567-e89b-12d3-a456-426614174000",
      "in": "path",
      "name": "api_key_id",
      "required": true,
      "schema": {
        "format": "uuid",
        "type": "string"
      }
    },
    "APIKeyPerformanceQueryParams": {
      "days": {
        "description": "Number of days to look back",
        "example": 30,
        "in": "query",
        "name": "days",
        "schema": {
          "default": 30,
          "maximum": 365,
          "minimum": 1,
          "type": "integer"
        }
      },
      "limit": {
        "description": "Maximum number of API keys to return",
        "example": 20,
        "in": "query",
        "name": "limit",
        "schema": {
          "default": 20,
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        }
      }
    },
    "APIKeyPerformanceResponseSchema": {
      "properties": {
        "data": {
          "properties": {
            "api_keys": {
              "items": {
                "properties": {
                  "api_key_id": {
                    "example": "123e4567-e89b-12d3-a456-426614174000",
                    "format": "uuid",
                    "type": "string"
                  },
                  "avg_response_time": {
                    "example": 298.4,
                    "format": "float",
                    "type": "number"
                  },
                  "created_at": {
                    "example": "2025-08-01T08:00:00.000Z",
                    "format": "date-time",
                    "type": "string"
                  },
                  "key_prefix": {
                    "example": "ak_AbC12",
                    "type": "string"
                  },
                  "last_used_at": {
                    "example": "2025-09-06T10:30:00.000Z",
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "name": {
                    "example": "Production API Key",
                    "type": "string"
                  },
                  "status": {
                    "enum": [
                      "active",
                      "inactive",
                      "revoked",
                      "expired"
                    ],
                    "example": "active",
                    "type": "string"
                  },
                  "success_rate": {
                    "example": 97.8,
                    "format": "float",
                    "type": "number"
                  },
                  "total_requests": {
                    "example": 8750,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "period_days": {
              "example": 30,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ActivityAnalyticsSchema": {
      "properties": {
        "login_timeline": {
          "items": {
            "properties": {
              "date": {
                "description": "Login date",
                "format": "date",
                "type": "string"
              },
              "unique_logins": {
                "description": "Number of unique logins",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "session_analytics": {
          "properties": {
            "average_session_duration_minutes": {
              "description": "Average session duration in minutes",
              "type": "number"
            },
            "total_sessions": {
              "description": "Total number of sessions",
              "type": "integer"
            },
            "unique_ip_addresses": {
              "description": "Number of unique IP addresses",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "AddUserRequestSchema": {
      "properties": {
        "email": {
          "description": "User's email address",
          "example": "newuser@example.com",
          "format": "email",
          "type": "string"
        },
        "first_name": {
          "description": "User's first name",
          "example": "Jane",
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "last_name": {
          "description": "User's last name",
          "example": "Smith",
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "password": {
          "description": "User password (minimum 8 characters)",
          "example": "SecurePass123!",
          "minLength": 8,
          "type": "string"
        },
        "username": {
          "description": "Unique username",
          "example": "jane_smith",
          "maxLength": 50,
          "minLength": 3,
          "type": "string"
        }
      },
      "required": [
        "email",
        "username",
        "password",
        "first_name",
        "last_name"
      ],
      "type": "object"
    },
    "AddUserResponseSchema": {
      "properties": {
        "message": {
          "description": "Success message",
          "example": "User added successfully",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserResponseSchema"
        }
      },
      "type": "object"
    },
    "Address": {
      "properties": {
        "city_id": {
          "description": "City identifier",
          "type": "integer"
        },
        "country_id": {
          "description": "Country identifier",
          "type": "integer"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Address unique identifier",
          "type": "integer"
        },
        "is_primary": {
          "default": false,
          "description": "Primary address flag",
          "type": "boolean"
        },
        "lan": {
          "description": "Longitude coordinate",
          "format": "float",
          "type": "number"
        },
        "lat": {
          "description": "Latitude coordinate",
          "format": "float",
          "type": "number"
        },
        "postal_code": {
          "description": "Postal code",
          "maxLength": 20,
          "type": "string"
        },
        "state_id": {
          "description": "State identifier",
          "type": "integer"
        },
        "street_address": {
          "description": "Street address",
          "maxLength": 255,
          "type": "string"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AddressCreateRequest": {
      "properties": {
        "city_id": {
          "description": "City identifier",
          "example": 1,
          "type": "integer"
        },
        "country_id": {
          "description": "Country identifier",
          "example": 1,
          "type": "integer"
        },
        "is_primary": {
          "default": false,
          "description": "Primary address flag",
          "example": true,
          "type": "boolean"
        },
        "lan": {
          "description": "Longitude coordinate",
          "example": -118.2437,
          "format": "float",
          "type": "number"
        },
        "lat": {
          "description": "Latitude coordinate",
          "example": 34.0522,
          "format": "float",
          "type": "number"
        },
        "postal_code": {
          "description": "Postal code",
          "example": "90210",
          "maxLength": 20,
          "type": "string"
        },
        "state_id": {
          "description": "State identifier",
          "example": 1,
          "type": "integer"
        },
        "street_address": {
          "description": "Street address",
          "example": "123 Main Street",
          "maxLength": 255,
          "type": "string"
        }
      },
      "required": [
        "street_address",
        "city_id",
        "state_id",
        "country_id"
      ],
      "type": "object"
    },
    "AddressWithRelationship": {
      "properties": {
        "city": {
          "description": "City information",
          "properties": {
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "country": {
          "description": "Country information",
          "properties": {
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Address unique identifier",
          "type": "integer"
        },
        "is_primary": {
          "description": "Primary address flag",
          "type": "boolean"
        },
        "lan": {
          "description": "Longitude coordinate",
          "format": "float",
          "type": "number"
        },
        "lat": {
          "description": "Latitude coordinate",
          "format": "float",
          "type": "number"
        },
        "postal_code": {
          "description": "Postal code",
          "maxLength": 20,
          "type": "string"
        },
        "state": {
          "description": "State information",
          "properties": {
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "street_address": {
          "description": "Street address",
          "maxLength": 255,
          "type": "string"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AdminMetricsResponseSchema": {
      "properties": {
        "generated_at": {
          "description": "Metrics generation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "metrics": {
          "additionalProperties": {
            "items": {
              "properties": {
                "labels": {
                  "description": "Metric labels",
                  "type": "object"
                },
                "timestamp": {
                  "description": "Metric timestamp",
                  "format": "date-time",
                  "type": "string"
                },
                "value": {
                  "description": "Metric value",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "description": "Metrics grouped by metric name",
          "type": "object"
        }
      },
      "type": "object"
    },
    "AdminUsersResponseSchema": {
      "properties": {
        "pagination": {
          "properties": {
            "has_next": {
              "description": "Has next page",
              "type": "boolean"
            },
            "has_prev": {
              "description": "Has previous page",
              "type": "boolean"
            },
            "page": {
              "description": "Current page number",
              "type": "integer"
            },
            "pages": {
              "description": "Total number of pages",
              "type": "integer"
            },
            "per_page": {
              "description": "Items per page",
              "type": "integer"
            },
            "total": {
              "description": "Total number of items",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "users": {
          "items": {
            "properties": {
              "created_at": {
                "description": "Account creation timestamp",
                "format": "date-time",
                "type": "string"
              },
              "email": {
                "description": "User's email address",
                "format": "email",
                "type": "string"
              },
              "email_verified": {
                "description": "Whether email is verified",
                "type": "boolean"
              },
              "first_name": {
                "description": "User's first name",
                "type": "string"
              },
              "id": {
                "description": "User's unique identifier",
                "format": "uuid",
                "type": "string"
              },
              "last_login": {
                "description": "Last login timestamp",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "last_name": {
                "description": "User's last name",
                "type": "string"
              },
              "login_attempts": {
                "description": "Number of failed login attempts",
                "type": "integer"
              },
              "role": {
                "description": "User role",
                "enum": [
                  "super_admin",
                  "admin",
                  "user"
                ],
                "type": "string"
              },
              "status": {
                "description": "User account status",
                "enum": [
                  "active",
                  "inactive",
                  "suspended",
                  "pending_verification"
                ],
                "type": "string"
              },
              "two_factor_enabled": {
                "description": "Whether 2FA is enabled",
                "type": "boolean"
              },
              "updated_at": {
                "description": "Account last update timestamp",
                "format": "date-time",
                "type": "string"
              },
              "username": {
                "description": "User's username",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Agent": {
      "properties": {
        "avatar_url": {
          "description": "Agent avatar URL",
          "format": "uri",
          "type": "string"
        },
        "average_rating": {
          "description": "Average rating",
          "maximum": 5.0,
          "minimum": 0.0,
          "type": "number"
        },
        "capabilities": {
          "description": "Agent capabilities",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "company_id": {
          "description": "Company identifier",
          "format": "uuid",
          "type": "string"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "databases": {
          "description": "Linked database connections",
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "description": {
          "description": "Agent description",
          "type": "string"
        },
        "documents": {
          "description": "Linked documents",
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "embed_code": {
          "description": "Generated widget embed code",
          "type": "string"
        },
        "id": {
          "description": "Agent unique identifier",
          "format": "uuid",
          "type": "string"
        },
        "languages": {
          "description": "Supported languages",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "last_trained": {
          "description": "Last training timestamp",
          "format": "date-time",
          "type": "string"
        },
        "llm_settings_id": {
          "description": "Linked LLM settings identifier",
          "format": "uuid",
          "nullable": true,
          "type": "string"
        },
        "max_tokens": {
          "description": "Maximum tokens",
          "minimum": 1,
          "type": "integer"
        },
        "model_name": {
          "description": "AI model name",
          "type": "string"
        },
        "name": {
          "description": "Agent name",
          "maxLength": 200,
          "type": "string"
        },
        "operating_hours": {
          "description": "Agent operating hours",
          "type": "object"
        },
        "personality_traits": {
          "description": "Agent personality configuration",
          "type": "object"
        },
        "status": {
          "description": "Agent status",
          "enum": [
            "active",
            "inactive",
            "training",
            "maintenance"
          ],
          "type": "string"
        },
        "temperature": {
          "description": "Model temperature",
          "maximum": 2.0,
          "minimum": 0.0,
          "type": "number"
        },
        "total_conversations": {
          "description": "Total conversations",
          "type": "integer"
        },
        "total_messages": {
          "description": "Total messages",
          "type": "integer"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AgentAnalyticsSchema": {
      "properties": {
        "agent_status_distribution": {
          "additionalProperties": {
            "type": "integer"
          },
          "description": "Agent status distribution",
          "type": "object"
        },
        "top_performing_agents": {
          "items": {
            "properties": {
              "average_rating": {
                "description": "Average user rating",
                "type": "number"
              },
              "name": {
                "description": "Agent name",
                "type": "string"
              },
              "status": {
                "description": "Agent status",
                "type": "string"
              },
              "total_conversations": {
                "description": "Total conversations handled",
                "type": "integer"
              },
              "total_messages": {
                "description": "Total messages processed",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AgentCreateRequest": {
      "properties": {
        "avatar_url": {
          "description": "Agent avatar URL",
          "format": "uri",
          "type": "string"
        },
        "capabilities": {
          "description": "Agent capabilities",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "company_id": {
          "description": "Target company identifier (super admin only)",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid",
          "type": "string"
        },
        "description": {
          "description": "Agent description",
          "example": "Handles customer inquiries and support requests",
          "type": "string"
        },
        "embedding_additional_params": {
          "description": "Additional embedding provider parameters",
          "type": "object"
        },
        "embedding_api_base_url": {
          "description": "Custom base URL for the embedding provider",
          "format": "uri",
          "nullable": true,
          "type": "string"
        },
        "embedding_api_key": {
          "description": "API key for the embedding provider",
          "type": "string"
        },
        "embedding_dimension": {
          "description": "Embedding vector dimension override",
          "type": "integer"
        },
        "embedding_model_id": {
          "description": "Embedding model to use (must belong to the selected provider)",
          "example": "bc03b08f-8f44-4a1e-9227-f0022f8b5d4e",
          "format": "uuid",
          "type": "string"
        },
        "embedding_provider_id": {
          "description": "Provider to use for embeddings",
          "example": "75d4ceaf-6a3c-4bd3-98f0-0bcf2bb9c2d4",
          "format": "uuid",
          "type": "string"
        },
        "languages": {
          "default": [
            "en"
          ],
          "description": "Supported languages",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "llm_additional_params": {
          "description": "Additional provider-specific parameters",
          "type": "object"
        },
        "llm_api_base_url": {
          "description": "Custom base URL for the LLM provider",
          "format": "uri",
          "nullable": true,
          "type": "string"
        },
        "llm_api_key": {
          "description": "API key for the selected LLM provider",
          "type": "string"
        },
        "llm_max_tokens": {
          "description": "Maximum tokens for the agent's responses",
          "minimum": 1,
          "type": "integer"
        },
        "llm_model_id": {
          "description": "Model to use for LLM completions (must belong to the selected provider)",
          "example": "8f3c2d09-0d0f-4fcf-83da-79d58a0d30d5",
          "format": "uuid",
          "type": "string"
        },
        "llm_provider_id": {
          "description": "Provider to use for LLM completions",
          "example": "6fa1fc5e-a7de-4c98-b203-20e063db89fe",
          "format": "uuid",
          "type": "string"
        },
        "llm_temperature": {
          "default": 0.7,
          "description": "Temperature to use for the agent's model",
          "maximum": 2.0,
          "minimum": 0.0,
          "type": "number"
        },
        "name": {
          "description": "Agent name",
          "example": "Customer Support Bot",
          "type": "string"
        },
        "operating_hours": {
          "description": "Agent operating hours",
          "type": "object"
        },
        "personality_traits": {
          "description": "Agent personality configuration",
          "type": "object"
        },
        "status": {
          "default": "active",
          "description": "Agent status",
          "enum": [
            "active",
            "inactive",
            "training",
            "maintenance"
          ],
          "type": "string"
        },
        "widget_config": {
          "description": "Widget configuration overrides",
          "type": "object"
        },
        "widget_script_url": {
          "description": "Override widget script URL",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "name",
        "llm_provider_id",
        "llm_model_id",
        "embedding_provider_id",
        "embedding_model_id"
      ],
      "type": "object"
    },
    "AgentMetricsSchema": {
      "properties": {
        "activity_trend": {
          "items": {
            "properties": {
              "conversations": {
                "description": "Number of conversations",
                "type": "integer"
              },
              "date": {
                "description": "Date",
                "format": "date",
                "type": "string"
              },
              "messages": {
                "description": "Number of messages",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "agent_info": {
          "properties": {
            "id": {
              "description": "Agent ID",
              "type": "string"
            },
            "model_name": {
              "description": "Model name used by agent",
              "type": "string"
            },
            "name": {
              "description": "Agent name",
              "type": "string"
            },
            "status": {
              "description": "Agent status",
              "type": "string"
            }
          },
          "type": "object"
        },
        "conversation_metrics": {
          "properties": {
            "active_conversations": {
              "description": "Active conversations",
              "type": "integer"
            },
            "avg_messages_per_conversation": {
              "description": "Average messages per conversation",
              "type": "number"
            },
            "total_conversations": {
              "description": "Total conversations handled",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "conversion_metrics": {
          "properties": {
            "conversion_rate_percent": {
              "description": "Conversion rate percentage",
              "type": "number"
            },
            "total_converted": {
              "description": "Total converted conversations",
              "type": "integer"
            },
            "total_lost": {
              "description": "Total lost conversations",
              "type": "integer"
            },
            "total_qualified": {
              "description": "Total qualified conversations",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "date_range": {
          "properties": {
            "end_date": {
              "description": "End date of analysis",
              "format": "date-time",
              "type": "string"
            },
            "start_date": {
              "description": "Start date of analysis",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "message_metrics": {
          "properties": {
            "assistant_messages": {
              "description": "Assistant messages sent",
              "type": "integer"
            },
            "total_messages": {
              "description": "Total messages processed",
              "type": "integer"
            },
            "user_messages": {
              "description": "User messages received",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "performance_metrics": {
          "properties": {
            "avg_response_time_seconds": {
              "description": "Average response time in seconds",
              "type": "number"
            },
            "max_response_time_seconds": {
              "description": "Maximum response time in seconds",
              "type": "number"
            },
            "min_response_time_seconds": {
              "description": "Minimum response time in seconds",
              "type": "number"
            }
          },
          "type": "object"
        },
        "quality_metrics": {
          "properties": {
            "avg_message_feedback": {
              "description": "Average message feedback score",
              "type": "number"
            },
            "avg_satisfaction_rating": {
              "description": "Average satisfaction rating",
              "type": "number"
            },
            "current_agent_rating": {
              "description": "Current agent rating",
              "type": "number"
            },
            "satisfaction_response_rate_percent": {
              "description": "Satisfaction response rate percentage",
              "type": "number"
            }
          },
          "type": "object"
        },
        "token_usage": {
          "properties": {
            "avg_tokens_per_message": {
              "description": "Average tokens per message",
              "type": "number"
            },
            "total_tokens": {
              "description": "Total tokens consumed",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "top_sources": {
          "items": {
            "properties": {
              "conversation_count": {
                "description": "Number of conversations from source",
                "type": "integer"
              },
              "source": {
                "description": "Source name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AgentPerformanceComparisonSchema": {
      "properties": {
        "agent_info": {
          "properties": {
            "id": {
              "description": "Agent ID",
              "type": "string"
            },
            "name": {
              "description": "Agent name",
              "type": "string"
            },
            "status": {
              "description": "Agent status",
              "type": "string"
            }
          },
          "type": "object"
        },
        "date_range": {
          "properties": {
            "end_date": {
              "description": "End date of analysis",
              "format": "date-time",
              "type": "string"
            },
            "start_date": {
              "description": "Start date of analysis",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "performance_comparison": {
          "properties": {
            "conversations": {
              "properties": {
                "agent_value": {
                  "description": "Agent's conversation count",
                  "type": "integer"
                },
                "company_average": {
                  "description": "Company average conversation count",
                  "type": "number"
                },
                "performance_vs_average_percent": {
                  "description": "Performance vs average percentage",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "conversions": {
              "properties": {
                "agent_value": {
                  "description": "Agent's conversion count",
                  "type": "integer"
                },
                "company_average": {
                  "description": "Company average conversion count",
                  "type": "number"
                },
                "performance_vs_average_percent": {
                  "description": "Performance vs average percentage",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "response_time": {
              "properties": {
                "agent_value": {
                  "description": "Agent's response time",
                  "type": "number"
                },
                "company_average": {
                  "description": "Company average response time",
                  "type": "number"
                },
                "performance_vs_average_percent": {
                  "description": "Performance vs average percentage",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "satisfaction_rating": {
              "properties": {
                "agent_value": {
                  "description": "Agent's satisfaction rating",
                  "type": "number"
                },
                "company_average": {
                  "description": "Company average satisfaction rating",
                  "type": "number"
                },
                "performance_vs_average_percent": {
                  "description": "Performance vs average percentage",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "total_messages": {
              "properties": {
                "agent_value": {
                  "description": "Agent's total messages",
                  "type": "integer"
                },
                "company_average": {
                  "description": "Company average total messages",
                  "type": "number"
                },
                "performance_vs_average_percent": {
                  "description": "Performance vs average percentage",
                  "type": "number"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "AgentPerformanceSchema": {
      "properties": {
        "average_rating": {
          "description": "Average user rating",
          "type": "number"
        },
        "name": {
          "description": "Agent name",
          "type": "string"
        },
        "status": {
          "description": "Agent status",
          "type": "string"
        },
        "total_conversations": {
          "description": "Total conversations handled",
          "type": "integer"
        },
        "total_messages": {
          "description": "Total messages processed",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AgentUpdateRequest": {
      "properties": {
        "avatar_url": {
          "description": "Agent avatar URL",
          "format": "uri",
          "type": "string"
        },
        "capabilities": {
          "description": "Agent capabilities",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "Agent description",
          "type": "string"
        },
        "languages": {
          "description": "Supported languages",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "llm_settings_id": {
          "description": "New LLM settings to associate with the agent",
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "description": "Agent name",
          "type": "string"
        },
        "operating_hours": {
          "description": "Agent operating hours",
          "type": "object"
        },
        "personality_traits": {
          "description": "Agent personality configuration",
          "type": "object"
        },
        "status": {
          "description": "Agent status",
          "enum": [
            "active",
            "inactive",
            "training",
            "maintenance"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "AnalyticsOverviewResponseSchema": {
      "properties": {
        "data": {
          "properties": {
            "api_keys": {
              "properties": {
                "active": {
                  "example": 12,
                  "type": "integer"
                },
                "expired": {
                  "example": 2,
                  "type": "integer"
                },
                "revoked": {
                  "example": 1,
                  "type": "integer"
                },
                "total": {
                  "example": 15,
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "period_days": {
              "example": 30,
              "type": "integer"
            },
            "usage": {
              "properties": {
                "avg_response_time_ms": {
                  "example": 245.7,
                  "format": "float",
                  "type": "number"
                },
                "success_rate": {
                  "example": 98.5,
                  "format": "float",
                  "type": "number"
                },
                "total_requests": {
                  "example": 125000,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "AnalyticsQueryParams": {
      "days": {
        "description": "Number of days to look back for analytics",
        "example": 30,
        "in": "query",
        "name": "days",
        "schema": {
          "default": 30,
          "maximum": 365,
          "minimum": 1,
          "type": "integer"
        }
      }
    },
    "AuditEventSchema": {
      "properties": {
        "category": {
          "description": "Event category",
          "type": "string"
        },
        "event_type": {
          "description": "Event type",
          "type": "string"
        },
        "risk_level": {
          "description": "Risk level",
          "enum": [
            "low",
            "medium",
            "high",
            "critical"
          ],
          "type": "string"
        },
        "timestamp": {
          "description": "Event timestamp",
          "format": "date-time",
          "type": "string"
        },
        "username": {
          "description": "Username or 'System'",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChatRequest": {
      "properties": {
        "message": {
          "description": "User message",
          "example": "Hello, I need help with my order",
          "type": "string"
        }
      },
      "required": [
        "message"
      ],
      "type": "object"
    },
    "ChatResponse": {
      "properties": {
        "conversation_id": {
          "description": "Conversation identifier",
          "example": "7b8d7e42-9ef4-4f5c-8cbd-3b9e99dd0fd5",
          "format": "uuid",
          "type": "string"
        },
        "message_id": {
          "description": "Identifier of the queued user message",
          "example": "4f9e2f07-d1f6-43a1-bad7-6d3650f58ac3",
          "format": "uuid",
          "type": "string"
        },
        "poll_url": {
          "description": "Endpoint that can be polled to retrieve the updated conversation history",
          "example": "/v1/conversation/7b8d7e42-9ef4-4f5c-8cbd-3b9e99dd0fd5/messages",
          "format": "uri",
          "type": "string"
        },
        "status": {
          "description": "Current processing state of the chat request",
          "example": "queued",
          "type": "string"
        },
        "task_id": {
          "description": "Identifier of the asynchronous task handling the AI response",
          "example": "3f4033c0-9a9e-4d48-9a61-9ebd9c18b7f9",
          "type": "string"
        }
      },
      "required": [
        "status",
        "task_id",
        "conversation_id",
        "message_id"
      ],
      "type": "object"
    },
    "City": {
      "properties": {
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "City unique identifier",
          "type": "integer"
        },
        "name": {
          "description": "City name",
          "maxLength": 100,
          "type": "string"
        },
        "postal_code_prefix": {
          "description": "Postal code prefix",
          "maxLength": 10,
          "type": "string"
        },
        "state_id": {
          "description": "State identifier",
          "type": "integer"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CityCreateRequest": {
      "properties": {
        "name": {
          "description": "City name",
          "example": "Los Angeles",
          "maxLength": 100,
          "type": "string"
        },
        "postal_code_prefix": {
          "description": "Postal code prefix",
          "example": "90",
          "maxLength": 10,
          "type": "string"
        },
        "state_id": {
          "description": "State identifier",
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "state_id"
      ],
      "type": "object"
    },
    "CityUpdateRequest": {
      "properties": {
        "name": {
          "description": "City name",
          "example": "Los Angeles",
          "maxLength": 100,
          "type": "string"
        },
        "postal_code_prefix": {
          "description": "Postal code prefix",
          "example": "90",
          "maxLength": 10,
          "type": "string"
        },
        "state_id": {
          "description": "State identifier",
          "example": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CityWithRelationship": {
      "properties": {
        "country": {
          "description": "Country information",
          "properties": {
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "City unique identifier",
          "type": "integer"
        },
        "name": {
          "description": "City name",
          "maxLength": 100,
          "type": "string"
        },
        "postal_code_prefix": {
          "description": "Postal code prefix",
          "maxLength": 10,
          "type": "string"
        },
        "state": {
          "description": "State information",
          "properties": {
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Company": {
      "properties": {
        "address": {
          "description": "Company address details",
          "type": "object"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "description": "Company email",
          "format": "email",
          "type": "string"
        },
        "id": {
          "description": "Company unique identifier",
          "format": "uuid",
          "type": "string"
        },
        "is_active": {
          "default": true,
          "description": "Company active status",
          "type": "boolean"
        },
        "is_verified": {
          "default": false,
          "description": "Company verification status",
          "type": "boolean"
        },
        "logo": {
          "description": "Company logo URL or file path",
          "type": "string"
        },
        "name": {
          "description": "Company name",
          "type": "string"
        },
        "phone": {
          "description": "Company phone number",
          "type": "string"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CompanyAnalyticsSchema": {
      "properties": {
        "company_info": {
          "properties": {
            "address": {
              "description": "Company address details",
              "type": "object"
            },
            "created_at": {
              "description": "Creation timestamp",
              "format": "date-time",
              "type": "string"
            },
            "email": {
              "description": "Company email",
              "format": "email",
              "type": "string"
            },
            "id": {
              "description": "Company unique identifier",
              "format": "uuid",
              "type": "string"
            },
            "is_active": {
              "default": true,
              "description": "Company active status",
              "type": "boolean"
            },
            "is_verified": {
              "default": false,
              "description": "Company verification status",
              "type": "boolean"
            },
            "logo": {
              "description": "Company logo URL or file path",
              "type": "string"
            },
            "name": {
              "description": "Company name",
              "type": "string"
            },
            "phone": {
              "description": "Company phone number",
              "type": "string"
            },
            "updated_at": {
              "description": "Update timestamp",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "user_growth_90days": {
          "items": {
            "properties": {
              "date": {
                "description": "Date",
                "format": "date",
                "type": "string"
              },
              "new_users": {
                "description": "Number of new users",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CompanyCreateRequest": {
      "properties": {
        "address_id": {
          "description": "Address ID",
          "type": "integer"
        },
        "email": {
          "description": "Company email",
          "example": "contact@acme.com",
          "format": "email",
          "type": "string"
        },
        "logo": {
          "description": "Logo file or URL",
          "type": "string"
        },
        "name": {
          "description": "Company name",
          "example": "Acme Corporation",
          "type": "string"
        },
        "phone": {
          "description": "Company phone number",
          "example": "+1-555-123-4567",
          "type": "string"
        }
      },
      "required": [
        "name",
        "email"
      ],
      "type": "object"
    },
    "CompanyStatistics": {
      "properties": {
        "statistics": {
          "properties": {
            "active_conversations": {
              "description": "Active conversations count",
              "type": "integer"
            },
            "conversion_rate": {
              "description": "Conversion rate percentage",
              "type": "number"
            },
            "period_days": {
              "description": "Statistics period in days",
              "type": "integer"
            },
            "qualified_leads": {
              "description": "Qualified leads count",
              "type": "integer"
            },
            "total_leads": {
              "description": "Total leads count",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "success": {
          "description": "Request success status",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CompanyUpdateRequestSchema": {
      "additionalProperties": false,
      "properties": {
        "address_id": {
          "description": "Address ID reference",
          "example": 123,
          "type": "integer"
        },
        "email": {
          "description": "Company email",
          "example": "updated@acme.com",
          "format": "email",
          "type": "string"
        },
        "logo": {
          "description": "Logo file path or URL",
          "example": "https://example.com/logo.png",
          "type": "string"
        },
        "name": {
          "description": "Company name",
          "example": "Acme Corporation Updated",
          "type": "string"
        },
        "phone": {
          "description": "Company phone number",
          "example": "+1-555-987-6543",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CompanyUpdateResponseSchema": {
      "properties": {
        "data": {
          "properties": {
            "address": {
              "description": "Company address details",
              "type": "object"
            },
            "created_at": {
              "description": "Creation timestamp",
              "format": "date-time",
              "type": "string"
            },
            "email": {
              "description": "Company email",
              "format": "email",
              "type": "string"
            },
            "id": {
              "description": "Company unique identifier",
              "format": "uuid",
              "type": "string"
            },
            "is_active": {
              "default": true,
              "description": "Company active status",
              "type": "boolean"
            },
            "is_verified": {
              "default": false,
              "description": "Company verification status",
              "type": "boolean"
            },
            "logo": {
              "description": "Company logo URL or file path",
              "type": "string"
            },
            "name": {
              "description": "Company name",
              "type": "string"
            },
            "phone": {
              "description": "Company phone number",
              "type": "string"
            },
            "updated_at": {
              "description": "Update timestamp",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "message": {
          "description": "Success message with updated fields",
          "type": "string"
        },
        "success": {
          "description": "Request success status",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ContentAnalyticsSchema": {
      "properties": {
        "data_consent_rate": {
          "description": "Data processing consent rate percentage",
          "type": "number"
        },
        "marketing_consent_rate": {
          "description": "Marketing consent rate percentage",
          "type": "number"
        },
        "total_leads": {
          "description": "Total number of leads",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Conversation": {
      "properties": {
        "agent": {
          "$ref": "#/definitions/Agent",
          "description": "Associated agent"
        },
        "archived_at": {
          "description": "Archive timestamp",
          "format": "date-time",
          "type": "string"
        },
        "context_strategy": {
          "default": "sliding_window",
          "description": "Context management strategy",
          "type": "string"
        },
        "conversion_outcome": {
          "description": "Conversion outcome",
          "type": "string"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "ended_at": {
          "description": "End timestamp",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Conversation unique identifier",
          "format": "uuid",
          "type": "string"
        },
        "last_activity": {
          "description": "Last activity timestamp",
          "format": "date-time",
          "type": "string"
        },
        "lead_satisfaction": {
          "description": "Lead satisfaction rating",
          "maximum": 5,
          "minimum": 1,
          "type": "integer"
        },
        "max_context_length": {
          "default": 4000,
          "description": "Maximum context length",
          "type": "integer"
        },
        "message_count": {
          "description": "Total message count",
          "type": "integer"
        },
        "messages": {
          "description": "Conversation messages",
          "items": {
            "properties": {
              "confidence_score": {
                "description": "AI confidence score",
                "maximum": 1.0,
                "minimum": 0.0,
                "type": "number"
              },
              "content": {
                "description": "Message content",
                "type": "string"
              },
              "content_type": {
                "default": "text",
                "description": "Content type",
                "type": "string"
              },
              "context_used": {
                "description": "Context snippets supplied to the model",
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              "created_at": {
                "description": "Creation timestamp",
                "format": "date-time",
                "type": "string"
              },
              "id": {
                "description": "Message unique identifier",
                "format": "uuid",
                "type": "string"
              },
              "metadata": {
                "additionalProperties": true,
                "description": "Additional message metadata including citation coverage",
                "properties": {
                  "all_sources": {
                    "description": "Full list of source legend entries returned for the response",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "citation_warnings": {
                    "default": [],
                    "description": "Warnings raised while validating citations (e.g., out-of-range references)",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "cited_sources": {
                    "description": "Numeric source identifiers actually referenced in the response",
                    "items": {
                      "minimum": 1,
                      "type": "integer"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "model_used": {
                "description": "AI model used",
                "type": "string"
              },
              "processing_time": {
                "description": "Processing time in seconds",
                "type": "number"
              },
              "role": {
                "description": "Message role",
                "enum": [
                  "user",
                  "assistant",
                  "system"
                ],
                "type": "string"
              },
              "sources": {
                "description": "Resolved citations enriched with document metadata",
                "items": {
                  "properties": {
                    "cited": {
                      "default": true,
                      "description": "Indicates whether the source was explicitly cited in the answer",
                      "type": "boolean"
                    },
                    "document_name": {
                      "description": "Human readable name of the cited document or dataset",
                      "type": "string"
                    },
                    "source_number": {
                      "description": "Ordinal assigned to the context source (matches [Source #] in the answer)",
                      "minimum": 1,
                      "type": "integer"
                    },
                    "url": {
                      "description": "Resolvable URL to the referenced document when available",
                      "format": "uri",
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "required": [
                    "source_number",
                    "document_name"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "tokens_used": {
                "description": "Tokens used for this message",
                "type": "integer"
              },
              "user_feedback": {
                "description": "User feedback rating",
                "maximum": 5,
                "minimum": 1,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "metadata": {
          "description": "Conversation metadata",
          "type": "object"
        },
        "status": {
          "description": "Conversation status",
          "enum": [
            "active",
            "archived",
            "deleted"
          ],
          "type": "string"
        },
        "tags": {
          "description": "Conversation tags",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "description": "Conversation title",
          "maxLength": 200,
          "type": "string"
        },
        "total_tokens": {
          "description": "Total tokens used",
          "type": "integer"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConversationAnalyticsSchema": {
      "properties": {
        "activity_timeline": {
          "items": {
            "properties": {
              "conversations": {
                "description": "Number of active conversations",
                "type": "integer"
              },
              "date": {
                "description": "Activity date",
                "format": "date",
                "type": "string"
              },
              "messages": {
                "description": "Number of messages",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "conversation_status": {
          "additionalProperties": {
            "type": "integer"
          },
          "description": "Conversation status distribution",
          "type": "object"
        },
        "lead_engagement": {
          "properties": {
            "average_satisfaction": {
              "description": "Average lead satisfaction score",
              "type": "number"
            },
            "engaged_leads": {
              "description": "Number of engaged leads",
              "type": "integer"
            },
            "total_conversions": {
              "description": "Total number of conversions",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "message_analytics": {
          "properties": {
            "average_confidence_score": {
              "description": "Average AI confidence score",
              "type": "number"
            },
            "average_processing_time": {
              "description": "Average processing time in seconds",
              "type": "number"
            },
            "average_rating": {
              "description": "Average user rating",
              "type": "number"
            },
            "average_tokens_per_message": {
              "description": "Average tokens per message",
              "type": "number"
            },
            "rated_messages": {
              "description": "Number of rated messages",
              "type": "integer"
            },
            "total_messages": {
              "description": "Total number of messages",
              "type": "integer"
            },
            "total_tokens": {
              "description": "Total tokens used",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "message_roles": {
          "additionalProperties": {
            "type": "integer"
          },
          "description": "Message role distribution",
          "type": "object"
        },
        "top_conversations": {
          "items": {
            "properties": {
              "id": {
                "description": "Conversation ID",
                "format": "uuid",
                "type": "string"
              },
              "last_activity": {
                "description": "Last activity timestamp",
                "format": "date-time",
                "type": "string"
              },
              "lead_email": {
                "description": "Lead email",
                "format": "email",
                "type": "string"
              },
              "lead_name": {
                "description": "Lead full name",
                "type": "string"
              },
              "message_count": {
                "description": "Number of messages",
                "type": "integer"
              },
              "title": {
                "description": "Conversation title",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ConversationCreateRequest": {
      "properties": {
        "agent_id": {
          "description": "Agent ID",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid",
          "type": "string"
        },
        "max_context_length": {
          "default": 4000,
          "description": "Maximum context length",
          "minimum": 1000,
          "type": "integer"
        },
        "metadata": {
          "default": {},
          "description": "Additional metadata",
          "type": "object"
        },
        "title": {
          "default": "New Conversation",
          "description": "Conversation title",
          "example": "Customer Support Chat",
          "type": "string"
        }
      },
      "required": [
        "agent_id"
      ],
      "type": "object"
    },
    "CoreMetricsSchema": {
      "properties": {
        "connection_count": {
          "description": "Total number of database connections",
          "type": "integer"
        },
        "conversation_count": {
          "description": "Total number of active conversations",
          "type": "integer"
        },
        "document_count": {
          "description": "Total number of documents",
          "type": "integer"
        },
        "lead_count": {
          "description": "Total number of leads",
          "type": "integer"
        },
        "scope": {
          "description": "Data scope",
          "enum": [
            "company",
            "personal"
          ],
          "type": "string"
        },
        "total_users": {
          "description": "Total number of users",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Country": {
      "properties": {
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Country unique identifier",
          "type": "integer"
        },
        "iso_code": {
          "description": "ISO country code",
          "maxLength": 3,
          "type": "string"
        },
        "name": {
          "description": "Country name",
          "maxLength": 100,
          "type": "string"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CountryCreateRequest": {
      "properties": {
        "iso_code": {
          "description": "ISO country code",
          "example": "USA",
          "maxLength": 3,
          "type": "string"
        },
        "name": {
          "description": "Country name",
          "example": "United States",
          "maxLength": 100,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CountryCreateResponse": {
      "properties": {
        "iso_code": {
          "description": "ISO country code",
          "example": "USA",
          "maxLength": 3,
          "type": "string"
        },
        "name": {
          "description": "Country name",
          "example": "United States",
          "maxLength": 100,
          "type": "string"
        }
      },
      "type": "object"
    },
    "CountryWithStates": {
      "properties": {
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Country unique identifier",
          "type": "integer"
        },
        "iso_code": {
          "description": "ISO country code",
          "maxLength": 3,
          "type": "string"
        },
        "name": {
          "description": "Country name",
          "maxLength": 100,
          "type": "string"
        },
        "state": {
          "description": "List of states in this country",
          "items": {
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateAPIKeyRequestSchema": {
      "properties": {
        "expires_in_days": {
          "description": "Number of days until key expires (null for no expiration)",
          "example": 90,
          "maximum": 365,
          "minimum": 1,
          "type": "integer"
        },
        "name": {
          "description": "Human-readable name for the API key",
          "example": "Production API Key",
          "maxLength": 100,
          "type": "string"
        },
        "permissions": {
          "default": {},
          "description": "Detailed permissions configuration",
          "example": {
            "can_manage_users": true,
            "can_view_analytics": true
          },
          "type": "object"
        },
        "scopes": {
          "default": [
            "read",
            "write"
          ],
          "description": "List of permitted scopes",
          "example": [
            "read",
            "write",
            "update"
          ],
          "items": {
            "enum": [
              "read",
              "write",
              "update",
              "delete",
              "admin",
              "full_access"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CreateAPIKeyResponseSchema": {
      "properties": {
        "api_key": {
          "description": "The generated API key (store securely)",
          "example": "ak_AbC123XyZ789...",
          "type": "string"
        },
        "api_secret": {
          "description": "The API secret (store securely - cannot be retrieved later)",
          "example": "as_SecretKey123...",
          "type": "string"
        },
        "details": {
          "properties": {
            "created_at": {
              "example": "2025-09-01T08:00:00.000Z",
              "format": "date-time",
              "type": "string"
            },
            "expires_at": {
              "example": "2025-12-06T00:00:00.000Z",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "id": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            },
            "key_prefix": {
              "description": "First 8 characters of API key",
              "example": "ak_AbC12",
              "type": "string"
            },
            "last_used_at": {
              "example": "2025-09-06T10:30:00.000Z",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "example": "Production API Key",
              "type": "string"
            },
            "permissions": {
              "example": {},
              "type": "object"
            },
            "rate_limit_per_day": {
              "example": 10000,
              "type": "integer"
            },
            "rate_limit_per_hour": {
              "example": 1000,
              "type": "integer"
            },
            "scopes": {
              "example": [
                "read",
                "write"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "status": {
              "enum": [
                "active",
                "inactive",
                "revoked",
                "expired"
              ],
              "example": "active",
              "type": "string"
            },
            "updated_at": {
              "example": "2025-09-06T10:30:00.000Z",
              "format": "date-time",
              "type": "string"
            },
            "usage_count": {
              "example": 1250,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "message": {
          "example": "API key created successfully. Store the secret securely - it cannot be retrieved later.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateLLMSettingsRequest": {
      "properties": {
        "agent_id": {
          "description": "Agent ID (optional, for agent-level settings)",
          "format": "uuid",
          "nullable": true,
          "type": "string"
        },
        "embedding_additional_params": {
          "type": "object"
        },
        "embedding_api_base_url": {
          "description": "Custom embedding endpoint URL",
          "format": "uri",
          "nullable": true,
          "type": "string"
        },
        "embedding_api_key": {
          "description": "API key for embeddings",
          "nullable": true,
          "type": "string"
        },
        "embedding_dimension": {
          "default": 768,
          "minimum": 1,
          "type": "integer"
        },
        "embedding_model_id": {
          "description": "Embedding model ID",
          "format": "uuid",
          "type": "string"
        },
        "embedding_provider_id": {
          "description": "Embedding provider ID",
          "format": "uuid",
          "type": "string"
        },
        "is_default": {
          "default": false,
          "type": "boolean"
        },
        "llm_additional_params": {
          "type": "object"
        },
        "llm_api_base_url": {
          "description": "Custom LLM endpoint URL",
          "format": "uri",
          "nullable": true,
          "type": "string"
        },
        "llm_api_key": {
          "description": "API key for LLM",
          "nullable": true,
          "type": "string"
        },
        "llm_max_tokens": {
          "default": 1000,
          "minimum": 1,
          "type": "integer"
        },
        "llm_model_id": {
          "description": "LLM model ID",
          "format": "uuid",
          "type": "string"
        },
        "llm_provider_id": {
          "description": "LLM provider ID",
          "format": "uuid",
          "type": "string"
        },
        "llm_temperature": {
          "default": 0.7,
          "maximum": 2.0,
          "minimum": 0.0,
          "type": "number"
        },
        "widget_config": {
          "type": "object"
        },
        "widget_script_url": {
          "format": "uri",
          "nullable": true,
          "type": "string"
        }
      },
      "required": [
        "llm_provider_id",
        "llm_model_id",
        "embedding_provider_id",
        "embedding_model_id"
      ],
      "type": "object"
    },
    "CreateModelRequest": {
      "properties": {
        "context_length": {
          "default": 0,
          "type": "integer"
        },
        "cost_per_1k_tokens_input": {
          "nullable": true,
          "type": "number"
        },
        "cost_per_1k_tokens_output": {
          "nullable": true,
          "type": "number"
        },
        "description": {
          "type": "string"
        },
        "display_name": {
          "maxLength": 300,
          "nullable": true,
          "type": "string"
        },
        "embedding_dimension": {
          "nullable": true,
          "type": "integer"
        },
        "is_recommended": {
          "default": false,
          "type": "boolean"
        },
        "max_tokens": {
          "nullable": true,
          "type": "integer"
        },
        "model_type": {
          "default": "llm",
          "enum": [
            "llm",
            "embedding"
          ],
          "type": "string"
        },
        "name": {
          "description": "Model name",
          "maxLength": 300,
          "type": "string"
        },
        "sort_order": {
          "default": 0,
          "type": "integer"
        },
        "supports_function_calling": {
          "default": false,
          "type": "boolean"
        },
        "supports_streaming": {
          "default": true,
          "type": "boolean"
        },
        "supports_vision": {
          "default": false,
          "type": "boolean"
        },
        "tags": {
          "default": [],
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CreateProviderRequest": {
      "properties": {
        "api_key_env_var": {
          "maxLength": 100,
          "nullable": true,
          "type": "string"
        },
        "default_base_url": {
          "format": "uri",
          "nullable": true,
          "type": "string"
        },
        "description": {
          "description": "Provider description",
          "type": "string"
        },
        "documentation_url": {
          "format": "uri",
          "nullable": true,
          "type": "string"
        },
        "is_featured": {
          "default": false,
          "type": "boolean"
        },
        "label": {
          "description": "Provider label (e.g., 'OpenAI')",
          "maxLength": 200,
          "type": "string"
        },
        "logo_url": {
          "format": "uri",
          "nullable": true,
          "type": "string"
        },
        "pricing_tier": {
          "default": "mid",
          "enum": [
            "free",
            "budget",
            "mid",
            "premium",
            "variable"
          ],
          "type": "string"
        },
        "provider_type": {
          "default": "llm",
          "enum": [
            "llm",
            "embedding",
            "both"
          ],
          "type": "string"
        },
        "requires_api_key": {
          "default": true,
          "type": "boolean"
        },
        "requires_base_url": {
          "default": false,
          "type": "boolean"
        },
        "sort_order": {
          "default": 0,
          "type": "integer"
        },
        "tags": {
          "default": [],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "value": {
          "description": "Provider value (e.g., 'openai')",
          "maxLength": 100,
          "type": "string"
        }
      },
      "required": [
        "value",
        "label"
      ],
      "type": "object"
    },
    "DashboardAnalyticsSchema": {
      "properties": {
        "activity_analytics": {
          "properties": {
            "login_timeline": {
              "items": {
                "properties": {
                  "date": {
                    "description": "Login date",
                    "format": "date",
                    "type": "string"
                  },
                  "unique_logins": {
                    "description": "Number of unique logins",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "session_analytics": {
              "properties": {
                "average_session_duration_minutes": {
                  "description": "Average session duration in minutes",
                  "type": "number"
                },
                "total_sessions": {
                  "description": "Total number of sessions",
                  "type": "integer"
                },
                "unique_ip_addresses": {
                  "description": "Number of unique IP addresses",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "agent_analytics": {
          "properties": {
            "agent_status_distribution": {
              "additionalProperties": {
                "type": "integer"
              },
              "description": "Agent status distribution",
              "type": "object"
            },
            "top_performing_agents": {
              "items": {
                "properties": {
                  "average_rating": {
                    "description": "Average user rating",
                    "type": "number"
                  },
                  "name": {
                    "description": "Agent name",
                    "type": "string"
                  },
                  "status": {
                    "description": "Agent status",
                    "type": "string"
                  },
                  "total_conversations": {
                    "description": "Total conversations handled",
                    "type": "integer"
                  },
                  "total_messages": {
                    "description": "Total messages processed",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "company_analytics": {
          "properties": {
            "company_info": {
              "properties": {
                "address": {
                  "description": "Company address details",
                  "type": "object"
                },
                "created_at": {
                  "description": "Creation timestamp",
                  "format": "date-time",
                  "type": "string"
                },
                "email": {
                  "description": "Company email",
                  "format": "email",
                  "type": "string"
                },
                "id": {
                  "description": "Company unique identifier",
                  "format": "uuid",
                  "type": "string"
                },
                "is_active": {
                  "default": true,
                  "description": "Company active status",
                  "type": "boolean"
                },
                "is_verified": {
                  "default": false,
                  "description": "Company verification status",
                  "type": "boolean"
                },
                "logo": {
                  "description": "Company logo URL or file path",
                  "type": "string"
                },
                "name": {
                  "description": "Company name",
                  "type": "string"
                },
                "phone": {
                  "description": "Company phone number",
                  "type": "string"
                },
                "updated_at": {
                  "description": "Update timestamp",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "user_growth_90days": {
              "items": {
                "properties": {
                  "date": {
                    "description": "Date",
                    "format": "date",
                    "type": "string"
                  },
                  "new_users": {
                    "description": "Number of new users",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "conversation_analytics": {
          "properties": {
            "activity_timeline": {
              "items": {
                "properties": {
                  "conversations": {
                    "description": "Number of active conversations",
                    "type": "integer"
                  },
                  "date": {
                    "description": "Activity date",
                    "format": "date",
                    "type": "string"
                  },
                  "messages": {
                    "description": "Number of messages",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "conversation_status": {
              "additionalProperties": {
                "type": "integer"
              },
              "description": "Conversation status distribution",
              "type": "object"
            },
            "lead_engagement": {
              "properties": {
                "average_satisfaction": {
                  "description": "Average lead satisfaction score",
                  "type": "number"
                },
                "engaged_leads": {
                  "description": "Number of engaged leads",
                  "type": "integer"
                },
                "total_conversions": {
                  "description": "Total number of conversions",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "message_analytics": {
              "properties": {
                "average_confidence_score": {
                  "description": "Average AI confidence score",
                  "type": "number"
                },
                "average_processing_time": {
                  "description": "Average processing time in seconds",
                  "type": "number"
                },
                "average_rating": {
                  "description": "Average user rating",
                  "type": "number"
                },
                "average_tokens_per_message": {
                  "description": "Average tokens per message",
                  "type": "number"
                },
                "rated_messages": {
                  "description": "Number of rated messages",
                  "type": "integer"
                },
                "total_messages": {
                  "description": "Total number of messages",
                  "type": "integer"
                },
                "total_tokens": {
                  "description": "Total tokens used",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "message_roles": {
              "additionalProperties": {
                "type": "integer"
              },
              "description": "Message role distribution",
              "type": "object"
            },
            "top_conversations": {
              "items": {
                "properties": {
                  "id": {
                    "description": "Conversation ID",
                    "format": "uuid",
                    "type": "string"
                  },
                  "last_activity": {
                    "description": "Last activity timestamp",
                    "format": "date-time",
                    "type": "string"
                  },
                  "lead_email": {
                    "description": "Lead email",
                    "format": "email",
                    "type": "string"
                  },
                  "lead_name": {
                    "description": "Lead full name",
                    "type": "string"
                  },
                  "message_count": {
                    "description": "Number of messages",
                    "type": "integer"
                  },
                  "title": {
                    "description": "Conversation title",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "core_metrics": {
          "properties": {
            "connection_count": {
              "description": "Total number of database connections",
              "type": "integer"
            },
            "conversation_count": {
              "description": "Total number of active conversations",
              "type": "integer"
            },
            "document_count": {
              "description": "Total number of documents",
              "type": "integer"
            },
            "lead_count": {
              "description": "Total number of leads",
              "type": "integer"
            },
            "scope": {
              "description": "Data scope",
              "enum": [
                "company",
                "personal"
              ],
              "type": "string"
            },
            "total_users": {
              "description": "Total number of users",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "database_analytics": {
          "properties": {
            "connection_status": {
              "properties": {
                "active": {
                  "description": "Number of active connections",
                  "type": "integer"
                },
                "inactive": {
                  "description": "Number of inactive connections",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "connection_types": {
              "additionalProperties": {
                "type": "integer"
              },
              "description": "Database connection type distribution",
              "type": "object"
            },
            "recent_tests": {
              "items": {
                "properties": {
                  "connection_name": {
                    "description": "Database connection name",
                    "type": "string"
                  },
                  "database_type": {
                    "description": "Database type",
                    "type": "string"
                  },
                  "last_tested": {
                    "description": "Last test timestamp",
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "test_result": {
                    "description": "Test result",
                    "type": "string"
                  },
                  "username": {
                    "description": "Username who performed the test",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "table_analytics": {
              "properties": {
                "total_rows": {
                  "description": "Total number of rows",
                  "type": "integer"
                },
                "total_size_bytes": {
                  "description": "Total size in bytes",
                  "type": "integer"
                },
                "total_tables": {
                  "description": "Total number of tables",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "document_analytics": {
          "properties": {
            "daily_uploads": {
              "items": {
                "properties": {
                  "count": {
                    "description": "Number of uploads",
                    "type": "integer"
                  },
                  "date": {
                    "description": "Upload date",
                    "format": "date",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "document_types": {
              "additionalProperties": {
                "type": "integer"
              },
              "description": "Document type distribution",
              "type": "object"
            },
            "processing_status": {
              "additionalProperties": {
                "type": "integer"
              },
              "description": "Document processing status distribution",
              "type": "object"
            },
            "storage_analytics": {
              "properties": {
                "average_size_mb": {
                  "description": "Average file size in MB",
                  "type": "number"
                },
                "average_words": {
                  "description": "Average words per document",
                  "type": "number"
                },
                "largest_file_mb": {
                  "description": "Largest file size in MB",
                  "type": "number"
                },
                "total_size_bytes": {
                  "description": "Total storage in bytes",
                  "type": "integer"
                },
                "total_size_mb": {
                  "description": "Total storage in MB",
                  "type": "number"
                },
                "total_words": {
                  "description": "Total word count",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "top_users_by_documents": {
              "items": {
                "properties": {
                  "document_count": {
                    "description": "Number of documents",
                    "type": "integer"
                  },
                  "full_name": {
                    "description": "Full name",
                    "type": "string"
                  },
                  "username": {
                    "description": "Username",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "generated_at": {
          "description": "Analytics generation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "lead_analytics": {
          "properties": {
            "consent_analytics": {
              "properties": {
                "data_consent_rate": {
                  "description": "Data processing consent rate percentage",
                  "type": "number"
                },
                "marketing_consent_rate": {
                  "description": "Marketing consent rate percentage",
                  "type": "number"
                },
                "total_leads": {
                  "description": "Total number of leads",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "daily_new_leads": {
              "items": {
                "properties": {
                  "count": {
                    "description": "Number of new leads",
                    "type": "integer"
                  },
                  "date": {
                    "description": "Date",
                    "format": "date",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "lead_sources": {
              "additionalProperties": {
                "type": "integer"
              },
              "description": "Lead source distribution",
              "type": "object"
            },
            "lead_status_distribution": {
              "additionalProperties": {
                "type": "integer"
              },
              "description": "Lead status distribution",
              "type": "object"
            }
          },
          "type": "object"
        },
        "performance_analytics": {
          "properties": {
            "document_processing": {
              "properties": {
                "average_processing_time_seconds": {
                  "description": "Average processing time in seconds",
                  "type": "number"
                },
                "failed_documents": {
                  "description": "Number of failed documents",
                  "type": "integer"
                },
                "success_rate": {
                  "description": "Success rate percentage",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "model_performance": {
              "items": {
                "properties": {
                  "average_confidence": {
                    "description": "Average confidence score",
                    "type": "number"
                  },
                  "average_processing_time": {
                    "description": "Average processing time",
                    "type": "number"
                  },
                  "message_count": {
                    "description": "Number of messages processed",
                    "type": "integer"
                  },
                  "model": {
                    "description": "Model name",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "security_analytics": {
          "properties": {
            "recent_audit_events": {
              "items": {
                "properties": {
                  "category": {
                    "description": "Event category",
                    "type": "string"
                  },
                  "event_type": {
                    "description": "Event type",
                    "type": "string"
                  },
                  "risk_level": {
                    "description": "Risk level",
                    "enum": [
                      "low",
                      "medium",
                      "high",
                      "critical"
                    ],
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Event timestamp",
                    "format": "date-time",
                    "type": "string"
                  },
                  "username": {
                    "description": "Username or 'System'",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "risk_distribution_7days": {
              "description": "Risk level distribution for last 7 days",
              "properties": {
                "critical": {
                  "type": "integer"
                },
                "high": {
                  "type": "integer"
                },
                "low": {
                  "type": "integer"
                },
                "medium": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "user_security_status": {
              "properties": {
                "locked_users": {
                  "description": "Number of locked users",
                  "type": "integer"
                },
                "total_users": {
                  "description": "Total number of users",
                  "type": "integer"
                },
                "two_factor_enabled": {
                  "description": "Number of users with 2FA enabled",
                  "type": "integer"
                },
                "verified_users": {
                  "description": "Number of verified users",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "system_metrics": {
          "properties": {
            "system_health": {
              "items": {
                "properties": {
                  "average_24h": {
                    "description": "24-hour average value",
                    "type": "number"
                  },
                  "max_24h": {
                    "description": "24-hour maximum value",
                    "type": "number"
                  },
                  "metric_name": {
                    "description": "Metric name",
                    "type": "string"
                  },
                  "metric_type": {
                    "description": "Metric type",
                    "type": "string"
                  },
                  "min_24h": {
                    "description": "24-hour minimum value",
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "user_context": {
          "properties": {
            "company_id": {
              "description": "Company ID",
              "format": "uuid",
              "nullable": true,
              "type": "string"
            },
            "email_verified": {
              "description": "Email verification status",
              "type": "boolean"
            },
            "is_admin": {
              "description": "Whether user has admin privileges",
              "type": "boolean"
            },
            "role": {
              "description": "User role",
              "enum": [
                "admin",
                "super_admin",
                "user"
              ],
              "type": "string"
            },
            "two_factor_enabled": {
              "description": "2FA enablement status",
              "type": "boolean"
            },
            "user_id": {
              "description": "User ID",
              "format": "uuid",
              "type": "string"
            },
            "username": {
              "description": "Username",
              "type": "string"
            }
          },
          "type": "object"
        },
        "user_management": {
          "properties": {
            "active_users_24h": {
              "description": "Active users in last 24 hours",
              "type": "integer"
            },
            "role_distribution": {
              "additionalProperties": {
                "type": "integer"
              },
              "description": "User role distribution",
              "type": "object"
            },
            "user_status_distribution": {
              "additionalProperties": {
                "type": "integer"
              },
              "description": "User status distribution",
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "DatabaseAnalyticsSchema": {
      "properties": {
        "connection_status": {
          "properties": {
            "active": {
              "description": "Number of active connections",
              "type": "integer"
            },
            "inactive": {
              "description": "Number of inactive connections",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "connection_types": {
          "additionalProperties": {
            "type": "integer"
          },
          "description": "Database connection type distribution",
          "type": "object"
        },
        "recent_tests": {
          "items": {
            "properties": {
              "connection_name": {
                "description": "Database connection name",
                "type": "string"
              },
              "database_type": {
                "description": "Database type",
                "type": "string"
              },
              "last_tested": {
                "description": "Last test timestamp",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "test_result": {
                "description": "Test result",
                "type": "string"
              },
              "username": {
                "description": "Username who performed the test",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "table_analytics": {
          "properties": {
            "total_rows": {
              "description": "Total number of rows",
              "type": "integer"
            },
            "total_size_bytes": {
              "description": "Total size in bytes",
              "type": "integer"
            },
            "total_tables": {
              "description": "Total number of tables",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "DatabaseConnection": {
      "properties": {
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "database_type": {
          "description": "Database type",
          "enum": [
            "postgresql",
            "mysql",
            "sqlite",
            "mongodb",
            "mssql",
            "cockroachdb"
          ],
          "type": "string"
        },
        "id": {
          "description": "Connection unique identifier",
          "format": "uuid",
          "type": "string"
        },
        "is_active": {
          "description": "Connection active status",
          "type": "boolean"
        },
        "last_tested": {
          "description": "Last test timestamp",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "Connection name",
          "type": "string"
        },
        "test_result": {
          "description": "Last test result message",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DatabaseConnectionCreateRequest": {
      "properties": {
        "agent_id": {
          "description": "Agent identifier the connection belongs to",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid",
          "type": "string"
        },
        "connection_params": {
          "default": {},
          "description": "Additional connection parameters",
          "type": "object"
        },
        "database_type": {
          "description": "Database type",
          "enum": [
            "postgresql",
            "mysql",
            "sqlite",
            "mongodb",
            "mssql",
            "cockroachdb"
          ],
          "example": "postgresql",
          "type": "string"
        },
        "name": {
          "description": "Connection name",
          "example": "Production DB",
          "type": "string"
        },
        "url": {
          "description": "Database connection string",
          "example": "postgresql://user:pass@localhost:5432/dbname",
          "type": "string"
        }
      },
      "required": [
        "name",
        "database_type",
        "url",
        "agent_id"
      ],
      "type": "object"
    },
    "DatabaseSearchRequestSchema": {
      "properties": {
        "connection_id": {
          "description": "Specific database connection ID (optional)",
          "format": "uuid",
          "type": "string"
        },
        "query": {
          "description": "SQL query or search term",
          "example": "SELECT * FROM customers LIMIT 10",
          "type": "string"
        }
      },
      "required": [
        "query"
      ],
      "type": "object"
    },
    "DatabaseSearchResponseSchema": {
      "properties": {
        "execution_time": {
          "description": "Query execution time in seconds",
          "type": "number"
        },
        "query": {
          "description": "Original search query",
          "type": "string"
        },
        "results": {
          "additionalProperties": {
            "oneOf": [
              {
                "description": "Query results",
                "type": "array"
              },
              {
                "properties": {
                  "error": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          },
          "description": "Search results grouped by connection name",
          "type": "object"
        }
      },
      "type": "object"
    },
    "DatabaseTable": {
      "properties": {
        "columns_info": {
          "description": "Column metadata",
          "type": "object"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Table unique identifier",
          "format": "uuid",
          "type": "string"
        },
        "last_analyzed": {
          "description": "Last analysis timestamp",
          "format": "date-time",
          "type": "string"
        },
        "row_count": {
          "description": "Estimated row count",
          "type": "integer"
        },
        "schema_name": {
          "description": "Schema name",
          "type": "string"
        },
        "table_name": {
          "description": "Table name",
          "type": "string"
        },
        "table_size": {
          "description": "Table size in bytes",
          "type": "integer"
        },
        "table_type": {
          "description": "Table type (TABLE, VIEW, etc.)",
          "type": "string"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DatabaseUpdateRequestSchema": {
      "additionalProperties": false,
      "properties": {
        "connection_params": {
          "description": "Additional connection parameters",
          "example": {
            "connect_timeout": 30,
            "sslmode": "require"
          },
          "type": "object"
        },
        "connection_string": {
          "description": "Database connection string (will be encrypted)",
          "example": "postgresql://user:password@localhost:5432/database",
          "type": "string"
        },
        "database_type": {
          "description": "Database type",
          "enum": [
            "postgresql",
            "mysql",
            "sqlite",
            "mongodb",
            "mssql",
            "cockroachdb"
          ],
          "example": "postgresql",
          "type": "string"
        },
        "is_active": {
          "description": "Connection active status",
          "example": true,
          "type": "boolean"
        },
        "max_overflow": {
          "description": "Max overflow connections",
          "example": 20,
          "minimum": 0,
          "type": "integer"
        },
        "name": {
          "description": "Connection name",
          "example": "Production Database",
          "maxLength": 100,
          "type": "string"
        },
        "pool_size": {
          "description": "Connection pool size",
          "example": 10,
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DatabaseUpdateResponseSchema": {
      "properties": {
        "data": {
          "properties": {
            "created_at": {
              "description": "Creation timestamp",
              "format": "date-time",
              "type": "string"
            },
            "database_type": {
              "description": "Database type",
              "enum": [
                "postgresql",
                "mysql",
                "sqlite",
                "mongodb",
                "mssql",
                "cockroachdb"
              ],
              "type": "string"
            },
            "id": {
              "description": "Connection unique identifier",
              "format": "uuid",
              "type": "string"
            },
            "is_active": {
              "description": "Connection active status",
              "type": "boolean"
            },
            "last_tested": {
              "description": "Last test timestamp",
              "format": "date-time",
              "type": "string"
            },
            "name": {
              "description": "Connection name",
              "type": "string"
            },
            "test_result": {
              "description": "Last test result message",
              "type": "string"
            }
          },
          "type": "object"
        },
        "message": {
          "description": "Success message with updated fields",
          "type": "string"
        },
        "success": {
          "description": "Request success status",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DetailedAPIKeyUsageResponseSchema": {
      "properties": {
        "data": {
          "properties": {
            "api_key": {
              "properties": {
                "id": {
                  "example": "123e4567-e89b-12d3-a456-426614174000",
                  "format": "uuid",
                  "type": "string"
                },
                "key_prefix": {
                  "example": "ak_AbC12",
                  "type": "string"
                },
                "name": {
                  "example": "Production API Key",
                  "type": "string"
                },
                "scopes": {
                  "example": [
                    "read",
                    "write"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "status": {
                  "enum": [
                    "active",
                    "inactive",
                    "revoked",
                    "expired"
                  ],
                  "example": "active",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "daily_breakdown": {
              "items": {
                "properties": {
                  "date": {
                    "example": "2025-09-06",
                    "format": "date",
                    "type": "string"
                  },
                  "success_rate": {
                    "example": 97.4,
                    "format": "float",
                    "type": "number"
                  },
                  "total_requests": {
                    "example": 156,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "endpoint_breakdown": {
              "items": {
                "properties": {
                  "avg_response_time": {
                    "example": 234.7,
                    "format": "float",
                    "type": "number"
                  },
                  "endpoint": {
                    "example": "GET /api/v1/users",
                    "type": "string"
                  },
                  "success_rate": {
                    "example": 98.9,
                    "format": "float",
                    "type": "number"
                  },
                  "total_requests": {
                    "example": 450,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "period_days": {
              "example": 30,
              "type": "integer"
            },
            "total_logs": {
              "example": 1000,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocPerformanceSchema": {
      "properties": {
        "average_processing_time_seconds": {
          "description": "Average processing time in seconds",
          "type": "number"
        },
        "failed_documents": {
          "description": "Number of failed documents",
          "type": "integer"
        },
        "success_rate": {
          "description": "Success rate percentage",
          "type": "number"
        }
      },
      "type": "object"
    },
    "Document": {
      "properties": {
        "chunks": {
          "description": "Document chunks",
          "items": {
            "properties": {
              "chunk_index": {
                "description": "Chunk index in document",
                "type": "integer"
              },
              "content": {
                "description": "Chunk content",
                "type": "string"
              },
              "created_at": {
                "description": "Creation timestamp",
                "format": "date-time",
                "type": "string"
              },
              "embedding_model": {
                "description": "Embedding model used",
                "type": "string"
              },
              "id": {
                "description": "Chunk unique identifier",
                "format": "uuid",
                "type": "string"
              },
              "word_count": {
                "description": "Word count in chunk",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "document_type": {
          "description": "Document type",
          "enum": [
            "pdf",
            "docx",
            "txt",
            "xml",
            "csv",
            "json",
            "xlsx",
            "html"
          ],
          "type": "string"
        },
        "file_size": {
          "description": "File size in bytes",
          "type": "integer"
        },
        "id": {
          "description": "Document unique identifier",
          "format": "uuid",
          "type": "string"
        },
        "original_filename": {
          "description": "Original filename",
          "type": "string"
        },
        "page_count": {
          "description": "Total page count",
          "type": "integer"
        },
        "processing_error": {
          "description": "Processing error message",
          "type": "string"
        },
        "status": {
          "description": "Processing status",
          "enum": [
            "pending",
            "processing",
            "processed",
            "failed"
          ],
          "type": "string"
        },
        "user": {
          "description": "User information",
          "type": "object"
        },
        "word_count": {
          "description": "Total word count",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DocumentAnalyticsSchema": {
      "properties": {
        "daily_uploads": {
          "items": {
            "properties": {
              "count": {
                "description": "Number of uploads",
                "type": "integer"
              },
              "date": {
                "description": "Upload date",
                "format": "date",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "document_types": {
          "additionalProperties": {
            "type": "integer"
          },
          "description": "Document type distribution",
          "type": "object"
        },
        "processing_status": {
          "additionalProperties": {
            "type": "integer"
          },
          "description": "Document processing status distribution",
          "type": "object"
        },
        "storage_analytics": {
          "properties": {
            "average_size_mb": {
              "description": "Average file size in MB",
              "type": "number"
            },
            "average_words": {
              "description": "Average words per document",
              "type": "number"
            },
            "largest_file_mb": {
              "description": "Largest file size in MB",
              "type": "number"
            },
            "total_size_bytes": {
              "description": "Total storage in bytes",
              "type": "integer"
            },
            "total_size_mb": {
              "description": "Total storage in MB",
              "type": "number"
            },
            "total_words": {
              "description": "Total word count",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "top_users_by_documents": {
          "items": {
            "properties": {
              "document_count": {
                "description": "Number of documents",
                "type": "integer"
              },
              "full_name": {
                "description": "Full name",
                "type": "string"
              },
              "username": {
                "description": "Username",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DocumentChunk": {
      "properties": {
        "chunk_index": {
          "description": "Chunk index in document",
          "type": "integer"
        },
        "content": {
          "description": "Chunk content",
          "type": "string"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "embedding_model": {
          "description": "Embedding model used",
          "type": "string"
        },
        "id": {
          "description": "Chunk unique identifier",
          "format": "uuid",
          "type": "string"
        },
        "word_count": {
          "description": "Word count in chunk",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DocumentSearchRequestSchema": {
      "properties": {
        "agent_id": {
          "description": "Agent id",
          "example": "48514e21-6800-420f-9ec8-17c9f7c874c7",
          "type": "string"
        },
        "limit": {
          "default": 10,
          "description": "Maximum number of results",
          "maximum": 50,
          "minimum": 1,
          "type": "integer"
        },
        "query": {
          "description": "Search query",
          "example": "customer support procedures",
          "type": "string"
        }
      },
      "required": [
        "query"
      ],
      "type": "object"
    },
    "DocumentSearchResponseSchema": {
      "properties": {
        "execution_time": {
          "description": "Query execution time in seconds",
          "type": "number"
        },
        "query": {
          "description": "Original search query",
          "type": "string"
        },
        "results": {
          "items": {
            "properties": {
              "chunk_index": {
                "description": "Chunk index in document",
                "type": "integer"
              },
              "content": {
                "description": "Chunk content",
                "type": "string"
              },
              "created_at": {
                "description": "Creation timestamp",
                "format": "date-time",
                "type": "string"
              },
              "embedding_model": {
                "description": "Embedding model used",
                "type": "string"
              },
              "id": {
                "description": "Chunk unique identifier",
                "format": "uuid",
                "type": "string"
              },
              "word_count": {
                "description": "Word count in chunk",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "total_results": {
          "description": "Total number of results",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ErrorAnalysisResponseSchema": {
      "properties": {
        "data": {
          "properties": {
            "period_days": {
              "example": 30,
              "type": "integer"
            },
            "status_code_breakdown": {
              "items": {
                "properties": {
                  "count": {
                    "example": 125,
                    "type": "integer"
                  },
                  "status_code": {
                    "example": 404,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "top_error_endpoints": {
              "items": {
                "properties": {
                  "endpoint": {
                    "example": "/api/v1/nonexistent",
                    "type": "string"
                  },
                  "error_count": {
                    "example": 87,
                    "type": "integer"
                  },
                  "method": {
                    "example": "GET",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ErrorResponseSchema": {
      "properties": {
        "error": {
          "example": "API key not found or access denied",
          "type": "string"
        },
        "success": {
          "example": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ErrorSchema": {
      "properties": {
        "code": {
          "description": "Error code",
          "example": "AUTH_001",
          "type": "string"
        },
        "details": {
          "description": "Additional error details",
          "type": "object"
        },
        "error": {
          "description": "Error message",
          "example": "An error occurred",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetUserMeResponse": {
      "description": "Fetch details of the currently authenticated user, including their access token, refresh token, and company info. Requires a valid JWT token.",
      "responses": {
        "200": {
          "description": "User details retrieved successfully",
          "schema": {
            "properties": {
              "access_token": {
                "description": "JWT access token for the user",
                "type": "string"
              },
              "company": {
                "description": "Company details",
                "properties": {
                  "address": {
                    "description": "Company address details",
                    "properties": {
                      "city": {
                        "description": "City",
                        "type": "string"
                      },
                      "country": {
                        "description": "Country",
                        "type": "string"
                      },
                      "postal_code": {
                        "description": "Postal/ZIP code",
                        "type": "string"
                      },
                      "state": {
                        "description": "State",
                        "type": "string"
                      },
                      "street": {
                        "description": "Street address",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "created_at": {
                    "description": "Timestamp of company creation",
                    "type": "string"
                  },
                  "email": {
                    "description": "Company email address",
                    "type": "string"
                  },
                  "id": {
                    "description": "Company ID",
                    "type": "string"
                  },
                  "is_active": {
                    "description": "Whether the company is active",
                    "type": "boolean"
                  },
                  "is_verified": {
                    "description": "Whether the company is verified",
                    "type": "boolean"
                  },
                  "logo": {
                    "description": "Company logo URL",
                    "type": "string"
                  },
                  "name": {
                    "description": "Company name",
                    "type": "string"
                  },
                  "phone": {
                    "description": "Company phone number",
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "Timestamp of last company update",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "refresh_token": {
                "description": "JWT refresh token for the user",
                "type": "string"
              },
              "user": {
                "description": "User details",
                "properties": {
                  "created_at": {
                    "description": "Timestamp of account creation",
                    "type": "string"
                  },
                  "email": {
                    "description": "User email address",
                    "type": "string"
                  },
                  "email_verified": {
                    "description": "Whether the user's email is verified",
                    "type": "boolean"
                  },
                  "first_name": {
                    "description": "User's first name",
                    "type": "string"
                  },
                  "id": {
                    "description": "User ID",
                    "type": "string"
                  },
                  "last_login": {
                    "description": "Timestamp of the last login",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "User's last name",
                    "type": "string"
                  },
                  "login_attempts": {
                    "description": "Number of failed login attempts",
                    "type": "integer"
                  },
                  "role": {
                    "description": "User role",
                    "type": "string"
                  },
                  "status": {
                    "description": "User status",
                    "type": "string"
                  },
                  "two_factor_enabled": {
                    "description": "Whether the user has two-factor authentication enabled",
                    "type": "boolean"
                  },
                  "updated_at": {
                    "description": "Timestamp of last account update",
                    "type": "string"
                  },
                  "username": {
                    "description": "Username of the user",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized: Invalid or missing JWT token",
          "schema": {
            "properties": {
              "error": {
                "description": "Error message",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "423": {
          "description": "Account locked",
          "schema": {
            "properties": {
              "error": {
                "description": "Account is locked message",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "500": {
          "description": "Internal Server Error",
          "schema": {
            "properties": {
              "error": {
                "description": "Error message",
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "security": [
        {
          "ApiKeyAuth": [],
          "ApiSecretAuth": []
        },
        {
          "bearerAuth": []
        }
      ],
      "summary": "Get user details",
      "tags": [
        "Authentication"
      ]
    },
    "GetUserResponseSchema": {
      "properties": {
        "data": {
          "$ref": "#/definitions/UserResponseSchema"
        },
        "message": {
          "description": "Success message",
          "example": "User retrieved successfully",
          "type": "string"
        },
        "success": {
          "description": "Operation success status",
          "example": true,
          "type": "boolean"
        },
        "timestamp": {
          "description": "Response generation timestamp",
          "example": "2024-08-01T12:30:45.000Z",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Lead": {
      "properties": {
        "company_id": {
          "description": "Company identifier",
          "format": "uuid",
          "type": "string"
        },
        "consent_data_processing": {
          "default": true,
          "description": "Data processing consent flag",
          "type": "boolean"
        },
        "consent_marketing": {
          "default": false,
          "description": "Marketing consent flag",
          "type": "boolean"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "description": "Lead email address",
          "format": "email",
          "maxLength": 255,
          "type": "string"
        },
        "first_name": {
          "description": "Lead first name",
          "maxLength": 100,
          "type": "string"
        },
        "full_name": {
          "description": "Lead full name (computed)",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "Lead unique identifier",
          "format": "uuid",
          "type": "string"
        },
        "ip_address": {
          "description": "Lead IP address for tracking",
          "maxLength": 45,
          "type": "string"
        },
        "is_active": {
          "default": true,
          "description": "Active status flag",
          "type": "boolean"
        },
        "last_activity": {
          "description": "Last activity timestamp",
          "format": "date-time",
          "type": "string"
        },
        "last_name": {
          "description": "Lead last name",
          "maxLength": 100,
          "type": "string"
        },
        "notes": {
          "description": "Additional notes about the lead",
          "type": "string"
        },
        "phone": {
          "description": "Lead phone number",
          "maxLength": 20,
          "type": "string"
        },
        "source": {
          "description": "Lead source (website, landing page, etc.)",
          "maxLength": 100,
          "type": "string"
        },
        "status": {
          "default": "new",
          "description": "Lead status",
          "enum": [
            "new",
            "contacted",
            "qualified",
            "converted",
            "lost"
          ],
          "type": "string"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        },
        "user_agent": {
          "description": "Browser user agent string",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LeadAnalyticsSchema": {
      "properties": {
        "consent_analytics": {
          "properties": {
            "data_consent_rate": {
              "description": "Data processing consent rate percentage",
              "type": "number"
            },
            "marketing_consent_rate": {
              "description": "Marketing consent rate percentage",
              "type": "number"
            },
            "total_leads": {
              "description": "Total number of leads",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "daily_new_leads": {
          "items": {
            "properties": {
              "count": {
                "description": "Number of new leads",
                "type": "integer"
              },
              "date": {
                "description": "Date",
                "format": "date",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "lead_sources": {
          "additionalProperties": {
            "type": "integer"
          },
          "description": "Lead source distribution",
          "type": "object"
        },
        "lead_status_distribution": {
          "additionalProperties": {
            "type": "integer"
          },
          "description": "Lead status distribution",
          "type": "object"
        }
      },
      "type": "object"
    },
    "LeadCompany": {
      "properties": {
        "company": {
          "properties": {
            "address": {
              "description": "Company address details",
              "type": "object"
            },
            "created_at": {
              "description": "Creation timestamp",
              "format": "date-time",
              "type": "string"
            },
            "email": {
              "description": "Company email",
              "format": "email",
              "type": "string"
            },
            "id": {
              "description": "Company unique identifier",
              "format": "uuid",
              "type": "string"
            },
            "is_active": {
              "default": true,
              "description": "Company active status",
              "type": "boolean"
            },
            "is_verified": {
              "default": false,
              "description": "Company verification status",
              "type": "boolean"
            },
            "logo": {
              "description": "Company logo URL or file path",
              "type": "string"
            },
            "name": {
              "description": "Company name",
              "type": "string"
            },
            "phone": {
              "description": "Company phone number",
              "type": "string"
            },
            "updated_at": {
              "description": "Update timestamp",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "consent_data_processing": {
          "description": "Data processing consent flag",
          "type": "boolean"
        },
        "consent_marketing": {
          "description": "Marketing consent flag",
          "type": "boolean"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "description": "Lead email address",
          "format": "email",
          "maxLength": 255,
          "type": "string"
        },
        "first_name": {
          "description": "Lead first name",
          "maxLength": 100,
          "type": "string"
        },
        "full_name": {
          "description": "Lead full name (computed)",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "Lead unique identifier",
          "format": "uuid",
          "type": "string"
        },
        "is_active": {
          "description": "Active status flag",
          "type": "boolean"
        },
        "last_activity": {
          "description": "Last activity timestamp",
          "format": "date-time",
          "type": "string"
        },
        "last_name": {
          "description": "Lead last name",
          "maxLength": 100,
          "type": "string"
        },
        "notes": {
          "description": "Additional notes about the lead",
          "type": "string"
        },
        "phone": {
          "description": "Lead phone number",
          "maxLength": 20,
          "type": "string"
        },
        "source": {
          "description": "Lead source",
          "maxLength": 100,
          "type": "string"
        },
        "status": {
          "description": "Lead status",
          "enum": [
            "new",
            "contacted",
            "qualified",
            "converted",
            "lost"
          ],
          "type": "string"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LeadCreateRequest": {
      "properties": {
        "company_id": {
          "description": "Company identifier",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid",
          "type": "string"
        },
        "consent_data_processing": {
          "default": true,
          "description": "Data processing consent flag",
          "example": true,
          "type": "boolean"
        },
        "consent_marketing": {
          "default": false,
          "description": "Marketing consent flag",
          "example": true,
          "type": "boolean"
        },
        "email": {
          "description": "Lead email address",
          "example": "jane.smith@example.com",
          "format": "email",
          "maxLength": 255,
          "type": "string"
        },
        "first_name": {
          "description": "Lead first name",
          "example": "Jane",
          "maxLength": 100,
          "type": "string"
        },
        "last_name": {
          "description": "Lead last name",
          "example": "Smith",
          "maxLength": 100,
          "type": "string"
        },
        "notes": {
          "description": "Additional notes about the lead",
          "example": "Interested in premium features",
          "type": "string"
        },
        "phone": {
          "description": "Lead phone number",
          "example": "+1234567890",
          "maxLength": 20,
          "type": "string"
        },
        "source": {
          "description": "Lead source",
          "example": "landing_page",
          "maxLength": 100,
          "type": "string"
        },
        "status": {
          "default": "new",
          "description": "Lead status",
          "enum": [
            "new",
            "contacted",
            "qualified",
            "converted",
            "lost"
          ],
          "example": "new",
          "type": "string"
        }
      },
      "required": [
        "company_id",
        "first_name",
        "last_name",
        "email"
      ],
      "type": "object"
    },
    "LeadCreateResponse": {
      "properties": {
        "lead": {
          "properties": {
            "company": {
              "properties": {
                "address": {
                  "description": "Company address details",
                  "type": "object"
                },
                "created_at": {
                  "description": "Creation timestamp",
                  "format": "date-time",
                  "type": "string"
                },
                "email": {
                  "description": "Company email",
                  "format": "email",
                  "type": "string"
                },
                "id": {
                  "description": "Company unique identifier",
                  "format": "uuid",
                  "type": "string"
                },
                "is_active": {
                  "default": true,
                  "description": "Company active status",
                  "type": "boolean"
                },
                "is_verified": {
                  "default": false,
                  "description": "Company verification status",
                  "type": "boolean"
                },
                "logo": {
                  "description": "Company logo URL or file path",
                  "type": "string"
                },
                "name": {
                  "description": "Company name",
                  "type": "string"
                },
                "phone": {
                  "description": "Company phone number",
                  "type": "string"
                },
                "updated_at": {
                  "description": "Update timestamp",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "consent_data_processing": {
              "description": "Data processing consent flag",
              "type": "boolean"
            },
            "consent_marketing": {
              "description": "Marketing consent flag",
              "type": "boolean"
            },
            "created_at": {
              "description": "Creation timestamp",
              "format": "date-time",
              "type": "string"
            },
            "email": {
              "description": "Lead email address",
              "format": "email",
              "maxLength": 255,
              "type": "string"
            },
            "first_name": {
              "description": "Lead first name",
              "maxLength": 100,
              "type": "string"
            },
            "full_name": {
              "description": "Lead full name (computed)",
              "readOnly": true,
              "type": "string"
            },
            "id": {
              "description": "Lead unique identifier",
              "format": "uuid",
              "type": "string"
            },
            "is_active": {
              "description": "Active status flag",
              "type": "boolean"
            },
            "last_activity": {
              "description": "Last activity timestamp",
              "format": "date-time",
              "type": "string"
            },
            "last_name": {
              "description": "Lead last name",
              "maxLength": 100,
              "type": "string"
            },
            "notes": {
              "description": "Additional notes about the lead",
              "type": "string"
            },
            "phone": {
              "description": "Lead phone number",
              "maxLength": 20,
              "type": "string"
            },
            "source": {
              "description": "Lead source",
              "maxLength": 100,
              "type": "string"
            },
            "status": {
              "description": "Lead status",
              "enum": [
                "new",
                "contacted",
                "qualified",
                "converted",
                "lost"
              ],
              "type": "string"
            },
            "updated_at": {
              "description": "Update timestamp",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "message": {
          "example": "Lead created successfully",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LeadDeleteResponse": {
      "properties": {
        "message": {
          "example": "Lead deleted successfully",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LeadEngagementSchema": {
      "properties": {
        "average_satisfaction": {
          "description": "Average lead satisfaction score",
          "type": "number"
        },
        "engaged_leads": {
          "description": "Number of engaged leads",
          "type": "integer"
        },
        "total_conversions": {
          "description": "Total number of conversions",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "LeadGetResponse": {
      "properties": {
        "lead": {
          "properties": {
            "company": {
              "properties": {
                "address": {
                  "description": "Company address details",
                  "type": "object"
                },
                "created_at": {
                  "description": "Creation timestamp",
                  "format": "date-time",
                  "type": "string"
                },
                "email": {
                  "description": "Company email",
                  "format": "email",
                  "type": "string"
                },
                "id": {
                  "description": "Company unique identifier",
                  "format": "uuid",
                  "type": "string"
                },
                "is_active": {
                  "default": true,
                  "description": "Company active status",
                  "type": "boolean"
                },
                "is_verified": {
                  "default": false,
                  "description": "Company verification status",
                  "type": "boolean"
                },
                "logo": {
                  "description": "Company logo URL or file path",
                  "type": "string"
                },
                "name": {
                  "description": "Company name",
                  "type": "string"
                },
                "phone": {
                  "description": "Company phone number",
                  "type": "string"
                },
                "updated_at": {
                  "description": "Update timestamp",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "consent_data_processing": {
              "description": "Data processing consent flag",
              "type": "boolean"
            },
            "consent_marketing": {
              "description": "Marketing consent flag",
              "type": "boolean"
            },
            "created_at": {
              "description": "Creation timestamp",
              "format": "date-time",
              "type": "string"
            },
            "email": {
              "description": "Lead email address",
              "format": "email",
              "maxLength": 255,
              "type": "string"
            },
            "first_name": {
              "description": "Lead first name",
              "maxLength": 100,
              "type": "string"
            },
            "full_name": {
              "description": "Lead full name (computed)",
              "readOnly": true,
              "type": "string"
            },
            "id": {
              "description": "Lead unique identifier",
              "format": "uuid",
              "type": "string"
            },
            "is_active": {
              "description": "Active status flag",
              "type": "boolean"
            },
            "last_activity": {
              "description": "Last activity timestamp",
              "format": "date-time",
              "type": "string"
            },
            "last_name": {
              "description": "Lead last name",
              "maxLength": 100,
              "type": "string"
            },
            "notes": {
              "description": "Additional notes about the lead",
              "type": "string"
            },
            "phone": {
              "description": "Lead phone number",
              "maxLength": 20,
              "type": "string"
            },
            "source": {
              "description": "Lead source",
              "maxLength": 100,
              "type": "string"
            },
            "status": {
              "description": "Lead status",
              "enum": [
                "new",
                "contacted",
                "qualified",
                "converted",
                "lost"
              ],
              "type": "string"
            },
            "updated_at": {
              "description": "Update timestamp",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LeadListResponse": {
      "properties": {
        "data": {
          "properties": {
            "leads": {
              "items": {
                "properties": {
                  "company": {
                    "properties": {
                      "address": {
                        "description": "Company address details",
                        "type": "object"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "email": {
                        "description": "Company email",
                        "format": "email",
                        "type": "string"
                      },
                      "id": {
                        "description": "Company unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "is_active": {
                        "default": true,
                        "description": "Company active status",
                        "type": "boolean"
                      },
                      "is_verified": {
                        "default": false,
                        "description": "Company verification status",
                        "type": "boolean"
                      },
                      "logo": {
                        "description": "Company logo URL or file path",
                        "type": "string"
                      },
                      "name": {
                        "description": "Company name",
                        "type": "string"
                      },
                      "phone": {
                        "description": "Company phone number",
                        "type": "string"
                      },
                      "updated_at": {
                        "description": "Update timestamp",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "consent_data_processing": {
                    "description": "Data processing consent flag",
                    "type": "boolean"
                  },
                  "consent_marketing": {
                    "description": "Marketing consent flag",
                    "type": "boolean"
                  },
                  "created_at": {
                    "description": "Creation timestamp",
                    "format": "date-time",
                    "type": "string"
                  },
                  "email": {
                    "description": "Lead email address",
                    "format": "email",
                    "maxLength": 255,
                    "type": "string"
                  },
                  "first_name": {
                    "description": "Lead first name",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "full_name": {
                    "description": "Lead full name (computed)",
                    "readOnly": true,
                    "type": "string"
                  },
                  "id": {
                    "description": "Lead unique identifier",
                    "format": "uuid",
                    "type": "string"
                  },
                  "is_active": {
                    "description": "Active status flag",
                    "type": "boolean"
                  },
                  "last_activity": {
                    "description": "Last activity timestamp",
                    "format": "date-time",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "Lead last name",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "notes": {
                    "description": "Additional notes about the lead",
                    "type": "string"
                  },
                  "phone": {
                    "description": "Lead phone number",
                    "maxLength": 20,
                    "type": "string"
                  },
                  "source": {
                    "description": "Lead source",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "status": {
                    "description": "Lead status",
                    "enum": [
                      "new",
                      "contacted",
                      "qualified",
                      "converted",
                      "lost"
                    ],
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "Update timestamp",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "pagination": {
              "properties": {
                "has_next": {
                  "example": true,
                  "type": "boolean"
                },
                "has_prev": {
                  "example": false,
                  "type": "boolean"
                },
                "page": {
                  "example": 1,
                  "type": "integer"
                },
                "pages": {
                  "example": 8,
                  "type": "integer"
                },
                "per_page": {
                  "example": 20,
                  "type": "integer"
                },
                "total": {
                  "example": 150,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LeadRegisterRequest": {
      "properties": {
        "agent_id": {
          "description": "Agent identifier",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid",
          "type": "string"
        },
        "consent_data_processing": {
          "default": true,
          "description": "Data processing consent flag",
          "example": true,
          "type": "boolean"
        },
        "consent_marketing": {
          "default": false,
          "description": "Marketing consent flag",
          "example": true,
          "type": "boolean"
        },
        "email": {
          "description": "Lead email address",
          "example": "john.doe@example.com",
          "format": "email",
          "maxLength": 255,
          "type": "string"
        },
        "first_name": {
          "description": "Lead first name",
          "example": "John",
          "maxLength": 100,
          "type": "string"
        },
        "last_name": {
          "description": "Lead last name",
          "example": "Doe",
          "maxLength": 100,
          "type": "string"
        },
        "phone": {
          "description": "Lead phone number",
          "example": "+1234567890",
          "maxLength": 20,
          "type": "string"
        },
        "source": {
          "description": "Lead source",
          "example": "website_chatbot",
          "maxLength": 100,
          "type": "string"
        }
      },
      "required": [
        "agent_id",
        "first_name",
        "last_name",
        "email"
      ],
      "type": "object"
    },
    "LeadRegisterResponse": {
      "properties": {
        "access_token": {
          "description": "JWT access token for the lead",
          "type": "string"
        },
        "lead": {
          "properties": {
            "company": {
              "properties": {
                "address": {
                  "description": "Company address details",
                  "type": "object"
                },
                "created_at": {
                  "description": "Creation timestamp",
                  "format": "date-time",
                  "type": "string"
                },
                "email": {
                  "description": "Company email",
                  "format": "email",
                  "type": "string"
                },
                "id": {
                  "description": "Company unique identifier",
                  "format": "uuid",
                  "type": "string"
                },
                "is_active": {
                  "default": true,
                  "description": "Company active status",
                  "type": "boolean"
                },
                "is_verified": {
                  "default": false,
                  "description": "Company verification status",
                  "type": "boolean"
                },
                "logo": {
                  "description": "Company logo URL or file path",
                  "type": "string"
                },
                "name": {
                  "description": "Company name",
                  "type": "string"
                },
                "phone": {
                  "description": "Company phone number",
                  "type": "string"
                },
                "updated_at": {
                  "description": "Update timestamp",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "consent_data_processing": {
              "description": "Data processing consent flag",
              "type": "boolean"
            },
            "consent_marketing": {
              "description": "Marketing consent flag",
              "type": "boolean"
            },
            "created_at": {
              "description": "Creation timestamp",
              "format": "date-time",
              "type": "string"
            },
            "email": {
              "description": "Lead email address",
              "format": "email",
              "maxLength": 255,
              "type": "string"
            },
            "first_name": {
              "description": "Lead first name",
              "maxLength": 100,
              "type": "string"
            },
            "full_name": {
              "description": "Lead full name (computed)",
              "readOnly": true,
              "type": "string"
            },
            "id": {
              "description": "Lead unique identifier",
              "format": "uuid",
              "type": "string"
            },
            "is_active": {
              "description": "Active status flag",
              "type": "boolean"
            },
            "last_activity": {
              "description": "Last activity timestamp",
              "format": "date-time",
              "type": "string"
            },
            "last_name": {
              "description": "Lead last name",
              "maxLength": 100,
              "type": "string"
            },
            "notes": {
              "description": "Additional notes about the lead",
              "type": "string"
            },
            "phone": {
              "description": "Lead phone number",
              "maxLength": 20,
              "type": "string"
            },
            "source": {
              "description": "Lead source",
              "maxLength": 100,
              "type": "string"
            },
            "status": {
              "description": "Lead status",
              "enum": [
                "new",
                "contacted",
                "qualified",
                "converted",
                "lost"
              ],
              "type": "string"
            },
            "updated_at": {
              "description": "Update timestamp",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "message": {
          "example": "Lead registered successfully",
          "type": "string"
        },
        "refresh_token": {
          "description": "JWT refresh token for the lead",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LeadUpdateRequest": {
      "properties": {
        "consent_data_processing": {
          "description": "Data processing consent flag",
          "example": true,
          "type": "boolean"
        },
        "consent_marketing": {
          "description": "Marketing consent flag",
          "example": false,
          "type": "boolean"
        },
        "email": {
          "description": "Lead email address",
          "example": "john.doe@example.com",
          "format": "email",
          "maxLength": 255,
          "type": "string"
        },
        "first_name": {
          "description": "Lead first name",
          "example": "John",
          "maxLength": 100,
          "type": "string"
        },
        "last_name": {
          "description": "Lead last name",
          "example": "Doe",
          "maxLength": 100,
          "type": "string"
        },
        "notes": {
          "description": "Additional notes about the lead",
          "example": "Follow up scheduled for next week",
          "type": "string"
        },
        "phone": {
          "description": "Lead phone number",
          "example": "+1234567890",
          "maxLength": 20,
          "type": "string"
        },
        "source": {
          "description": "Lead source",
          "example": "referral",
          "maxLength": 100,
          "type": "string"
        },
        "status": {
          "description": "Lead status",
          "enum": [
            "new",
            "contacted",
            "qualified",
            "converted",
            "lost"
          ],
          "example": "contacted",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LeadUpdateResponse": {
      "properties": {
        "lead": {
          "properties": {
            "company": {
              "properties": {
                "address": {
                  "description": "Company address details",
                  "type": "object"
                },
                "created_at": {
                  "description": "Creation timestamp",
                  "format": "date-time",
                  "type": "string"
                },
                "email": {
                  "description": "Company email",
                  "format": "email",
                  "type": "string"
                },
                "id": {
                  "description": "Company unique identifier",
                  "format": "uuid",
                  "type": "string"
                },
                "is_active": {
                  "default": true,
                  "description": "Company active status",
                  "type": "boolean"
                },
                "is_verified": {
                  "default": false,
                  "description": "Company verification status",
                  "type": "boolean"
                },
                "logo": {
                  "description": "Company logo URL or file path",
                  "type": "string"
                },
                "name": {
                  "description": "Company name",
                  "type": "string"
                },
                "phone": {
                  "description": "Company phone number",
                  "type": "string"
                },
                "updated_at": {
                  "description": "Update timestamp",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "consent_data_processing": {
              "description": "Data processing consent flag",
              "type": "boolean"
            },
            "consent_marketing": {
              "description": "Marketing consent flag",
              "type": "boolean"
            },
            "created_at": {
              "description": "Creation timestamp",
              "format": "date-time",
              "type": "string"
            },
            "email": {
              "description": "Lead email address",
              "format": "email",
              "maxLength": 255,
              "type": "string"
            },
            "first_name": {
              "description": "Lead first name",
              "maxLength": 100,
              "type": "string"
            },
            "full_name": {
              "description": "Lead full name (computed)",
              "readOnly": true,
              "type": "string"
            },
            "id": {
              "description": "Lead unique identifier",
              "format": "uuid",
              "type": "string"
            },
            "is_active": {
              "description": "Active status flag",
              "type": "boolean"
            },
            "last_activity": {
              "description": "Last activity timestamp",
              "format": "date-time",
              "type": "string"
            },
            "last_name": {
              "description": "Lead last name",
              "maxLength": 100,
              "type": "string"
            },
            "notes": {
              "description": "Additional notes about the lead",
              "type": "string"
            },
            "phone": {
              "description": "Lead phone number",
              "maxLength": 20,
              "type": "string"
            },
            "source": {
              "description": "Lead source",
              "maxLength": 100,
              "type": "string"
            },
            "status": {
              "description": "Lead status",
              "enum": [
                "new",
                "contacted",
                "qualified",
                "converted",
                "lost"
              ],
              "type": "string"
            },
            "updated_at": {
              "description": "Update timestamp",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "message": {
          "example": "Lead updated successfully",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ListAPIKeysResponseSchema": {
      "properties": {
        "api_keys": {
          "items": {
            "properties": {
              "created_at": {
                "example": "2025-09-01T08:00:00.000Z",
                "format": "date-time",
                "type": "string"
              },
              "expires_at": {
                "example": "2025-12-06T00:00:00.000Z",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "id": {
                "example": "123e4567-e89b-12d3-a456-426614174000",
                "format": "uuid",
                "type": "string"
              },
              "key_prefix": {
                "description": "First 8 characters of API key",
                "example": "ak_AbC12",
                "type": "string"
              },
              "last_used_at": {
                "example": "2025-09-06T10:30:00.000Z",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "name": {
                "example": "Production API Key",
                "type": "string"
              },
              "permissions": {
                "example": {},
                "type": "object"
              },
              "rate_limit_per_day": {
                "example": 10000,
                "type": "integer"
              },
              "rate_limit_per_hour": {
                "example": 1000,
                "type": "integer"
              },
              "scopes": {
                "example": [
                  "read",
                  "write"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "status": {
                "enum": [
                  "active",
                  "inactive",
                  "revoked",
                  "expired"
                ],
                "example": "active",
                "type": "string"
              },
              "updated_at": {
                "example": "2025-09-06T10:30:00.000Z",
                "format": "date-time",
                "type": "string"
              },
              "usage_count": {
                "example": 1250,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "LoginRequestSchema": {
      "properties": {
        "email": {
          "description": "User's email address",
          "example": "user@example.com",
          "format": "email",
          "type": "string"
        },
        "password": {
          "description": "User password",
          "example": "SecurePass123!",
          "type": "string"
        }
      },
      "required": [
        "email",
        "password"
      ],
      "type": "object"
    },
    "LoginResponseSchema": {
      "properties": {
        "access_token": {
          "description": "JWT access token for authentication",
          "type": "string"
        },
        "refresh_token": {
          "description": "JWT refresh token",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserResponseSchema"
        }
      },
      "type": "object"
    },
    "LogoutResponseSchema": {
      "properties": {
        "message": {
          "description": "Success message",
          "example": "Logged out successfully",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Message": {
      "properties": {
        "confidence_score": {
          "description": "AI confidence score",
          "maximum": 1.0,
          "minimum": 0.0,
          "type": "number"
        },
        "content": {
          "description": "Message content",
          "type": "string"
        },
        "content_type": {
          "default": "text",
          "description": "Content type",
          "type": "string"
        },
        "context_used": {
          "description": "Context snippets supplied to the model",
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Message unique identifier",
          "format": "uuid",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": true,
          "description": "Additional message metadata including citation coverage",
          "properties": {
            "all_sources": {
              "description": "Full list of source legend entries returned for the response",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "citation_warnings": {
              "default": [],
              "description": "Warnings raised while validating citations (e.g., out-of-range references)",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "cited_sources": {
              "description": "Numeric source identifiers actually referenced in the response",
              "items": {
                "minimum": 1,
                "type": "integer"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "model_used": {
          "description": "AI model used",
          "type": "string"
        },
        "processing_time": {
          "description": "Processing time in seconds",
          "type": "number"
        },
        "role": {
          "description": "Message role",
          "enum": [
            "user",
            "assistant",
            "system"
          ],
          "type": "string"
        },
        "sources": {
          "description": "Resolved citations enriched with document metadata",
          "items": {
            "properties": {
              "cited": {
                "default": true,
                "description": "Indicates whether the source was explicitly cited in the answer",
                "type": "boolean"
              },
              "document_name": {
                "description": "Human readable name of the cited document or dataset",
                "type": "string"
              },
              "source_number": {
                "description": "Ordinal assigned to the context source (matches [Source #] in the answer)",
                "minimum": 1,
                "type": "integer"
              },
              "url": {
                "description": "Resolvable URL to the referenced document when available",
                "format": "uri",
                "nullable": true,
                "type": "string"
              }
            },
            "required": [
              "source_number",
              "document_name"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "tokens_used": {
          "description": "Tokens used for this message",
          "type": "integer"
        },
        "user_feedback": {
          "description": "User feedback rating",
          "maximum": 5,
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MessageAnalyticsSchema": {
      "properties": {
        "average_confidence_score": {
          "description": "Average AI confidence score",
          "type": "number"
        },
        "average_processing_time": {
          "description": "Average processing time in seconds",
          "type": "number"
        },
        "average_rating": {
          "description": "Average user rating",
          "type": "number"
        },
        "average_tokens_per_message": {
          "description": "Average tokens per message",
          "type": "number"
        },
        "rated_messages": {
          "description": "Number of rated messages",
          "type": "integer"
        },
        "total_messages": {
          "description": "Total number of messages",
          "type": "integer"
        },
        "total_tokens": {
          "description": "Total tokens used",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MetricDataSchema": {
      "items": {
        "properties": {
          "labels": {
            "description": "Metric labels",
            "type": "object"
          },
          "timestamp": {
            "description": "Metric timestamp",
            "format": "date-time",
            "type": "string"
          },
          "value": {
            "description": "Metric value",
            "type": "number"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ModelPerformanceSchema": {
      "properties": {
        "average_confidence": {
          "description": "Average confidence score",
          "type": "number"
        },
        "average_processing_time": {
          "description": "Average processing time",
          "type": "number"
        },
        "message_count": {
          "description": "Number of messages processed",
          "type": "integer"
        },
        "model": {
          "description": "Model name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Pagination": {
      "properties": {
        "has_next": {
          "description": "Has next page",
          "type": "boolean"
        },
        "has_prev": {
          "description": "Has previous page",
          "type": "boolean"
        },
        "page": {
          "description": "Current page number",
          "type": "integer"
        },
        "pages": {
          "description": "Total number of pages",
          "type": "integer"
        },
        "per_page": {
          "description": "Items per page",
          "type": "integer"
        },
        "total": {
          "description": "Total number of items",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PerformanceAnalyticsSchema": {
      "properties": {
        "document_processing": {
          "properties": {
            "average_processing_time_seconds": {
              "description": "Average processing time in seconds",
              "type": "number"
            },
            "failed_documents": {
              "description": "Number of failed documents",
              "type": "integer"
            },
            "success_rate": {
              "description": "Success rate percentage",
              "type": "number"
            }
          },
          "type": "object"
        },
        "model_performance": {
          "items": {
            "properties": {
              "average_confidence": {
                "description": "Average confidence score",
                "type": "number"
              },
              "average_processing_time": {
                "description": "Average processing time",
                "type": "number"
              },
              "message_count": {
                "description": "Number of messages processed",
                "type": "integer"
              },
              "model": {
                "description": "Model name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Provider": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "default_base_url": {
          "description": "Default base URL",
          "format": "uri",
          "nullable": true,
          "type": "string"
        },
        "description": {
          "description": "Provider description",
          "type": "string"
        },
        "documentation_url": {
          "description": "Documentation URL",
          "format": "uri",
          "nullable": true,
          "type": "string"
        },
        "id": {
          "description": "Provider unique identifier",
          "format": "uuid",
          "type": "string"
        },
        "is_featured": {
          "description": "Whether provider is featured",
          "type": "boolean"
        },
        "label": {
          "description": "Provider display label (e.g., 'OpenAI')",
          "type": "string"
        },
        "logo_url": {
          "description": "Logo URL",
          "format": "uri",
          "nullable": true,
          "type": "string"
        },
        "pricing_tier": {
          "description": "Pricing tier",
          "enum": [
            "free",
            "budget",
            "mid",
            "premium",
            "variable"
          ],
          "type": "string"
        },
        "provider_type": {
          "description": "Provider type",
          "enum": [
            "llm",
            "embedding",
            "both"
          ],
          "type": "string"
        },
        "requires_api_key": {
          "description": "Whether API key is required",
          "type": "boolean"
        },
        "requires_base_url": {
          "description": "Whether base URL is required",
          "type": "boolean"
        },
        "tags": {
          "description": "Provider tags",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "value": {
          "description": "Provider value (e.g., 'openai')",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProviderModel": {
      "properties": {
        "context": {
          "description": "Context length",
          "type": "integer"
        },
        "description": {
          "description": "Model description",
          "type": "string"
        },
        "dimension": {
          "description": "Embedding dimension (for embedding models)",
          "type": "integer"
        },
        "display_name": {
          "description": "Model display name",
          "type": "string"
        },
        "id": {
          "description": "Model unique identifier",
          "format": "uuid",
          "type": "string"
        },
        "is_deprecated": {
          "type": "boolean"
        },
        "is_recommended": {
          "type": "boolean"
        },
        "model_type": {
          "description": "Model type",
          "enum": [
            "llm",
            "embedding"
          ],
          "type": "string"
        },
        "name": {
          "description": "Model name",
          "type": "string"
        },
        "pricing": {
          "properties": {
            "input": {
              "description": "Cost per 1K input tokens",
              "type": "number"
            },
            "output": {
              "description": "Cost per 1K output tokens",
              "type": "number"
            }
          },
          "type": "object"
        },
        "provider_id": {
          "description": "Provider ID",
          "format": "uuid",
          "type": "string"
        },
        "supports_function_calling": {
          "description": "Supports function calling (for LLM models)",
          "type": "boolean"
        },
        "supports_streaming": {
          "description": "Supports streaming (for LLM models)",
          "type": "boolean"
        },
        "supports_vision": {
          "description": "Supports vision (for LLM models)",
          "type": "boolean"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RateLimitAnalysisResponseSchema": {
      "properties": {
        "data": {
          "properties": {
            "high_usage_api_keys": {
              "items": {
                "properties": {
                  "api_key_id": {
                    "example": "123e4567-e89b-12d3-a456-426614174000",
                    "format": "uuid",
                    "type": "string"
                  },
                  "daily_limit": {
                    "example": 10000,
                    "type": "integer"
                  },
                  "daily_requests": {
                    "example": 7500,
                    "type": "integer"
                  },
                  "daily_usage_pct": {
                    "example": 75.0,
                    "format": "float",
                    "type": "number"
                  },
                  "hourly_limit": {
                    "example": 1000,
                    "type": "integer"
                  },
                  "hourly_requests": {
                    "example": 850,
                    "type": "integer"
                  },
                  "hourly_usage_pct": {
                    "example": 85.0,
                    "format": "float",
                    "type": "number"
                  },
                  "key_prefix": {
                    "example": "ak_XyZ89",
                    "type": "string"
                  },
                  "name": {
                    "example": "High Traffic API Key",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "period_days": {
              "example": 7,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RateLimitQueryParams": {
      "days": {
        "description": "Number of days to look back for rate limit analysis",
        "example": 7,
        "in": "query",
        "name": "days",
        "schema": {
          "default": 7,
          "maximum": 30,
          "minimum": 1,
          "type": "integer"
        }
      }
    },
    "RecentTestSchema": {
      "properties": {
        "connection_name": {
          "description": "Database connection name",
          "type": "string"
        },
        "database_type": {
          "description": "Database type",
          "type": "string"
        },
        "last_tested": {
          "description": "Last test timestamp",
          "format": "date-time",
          "nullable": true,
          "type": "string"
        },
        "test_result": {
          "description": "Test result",
          "type": "string"
        },
        "username": {
          "description": "Username who performed the test",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RegisterRequestSchema": {
      "properties": {
        "company_id": {
          "description": "Company ID for the user",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid",
          "type": "string"
        },
        "email": {
          "description": "User's email address",
          "example": "user@example.com",
          "format": "email",
          "type": "string"
        },
        "first_name": {
          "description": "User's first name",
          "example": "John",
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "last_name": {
          "description": "User's last name",
          "example": "Doe",
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "password": {
          "description": "User password (minimum 8 characters)",
          "example": "SecurePass123!",
          "minLength": 8,
          "type": "string"
        },
        "username": {
          "description": "Unique username",
          "example": "john_doe",
          "maxLength": 50,
          "minLength": 3,
          "type": "string"
        }
      },
      "required": [
        "company_id",
        "email",
        "username",
        "password",
        "first_name",
        "last_name"
      ],
      "type": "object"
    },
    "RegisterResponseSchema": {
      "properties": {
        "access_token": {
          "description": "JWT access token for authentication",
          "type": "string"
        },
        "message": {
          "description": "Success message",
          "example": "User registered successfully",
          "type": "string"
        },
        "refresh_token": {
          "description": "JWT refresh token",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserResponseSchema"
        }
      },
      "type": "object"
    },
    "RevokeAPIKeyResponseSchema": {
      "properties": {
        "message": {
          "example": "API key revoked successfully",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecurityAnalyticsSchema": {
      "properties": {
        "recent_audit_events": {
          "items": {
            "properties": {
              "category": {
                "description": "Event category",
                "type": "string"
              },
              "event_type": {
                "description": "Event type",
                "type": "string"
              },
              "risk_level": {
                "description": "Risk level",
                "enum": [
                  "low",
                  "medium",
                  "high",
                  "critical"
                ],
                "type": "string"
              },
              "timestamp": {
                "description": "Event timestamp",
                "format": "date-time",
                "type": "string"
              },
              "username": {
                "description": "Username or 'System'",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "risk_distribution_7days": {
          "description": "Risk level distribution for last 7 days",
          "properties": {
            "critical": {
              "type": "integer"
            },
            "high": {
              "type": "integer"
            },
            "low": {
              "type": "integer"
            },
            "medium": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "user_security_status": {
          "properties": {
            "locked_users": {
              "description": "Number of locked users",
              "type": "integer"
            },
            "total_users": {
              "description": "Total number of users",
              "type": "integer"
            },
            "two_factor_enabled": {
              "description": "Number of users with 2FA enabled",
              "type": "integer"
            },
            "verified_users": {
              "description": "Number of verified users",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "SessionAnalyticsSchema": {
      "properties": {
        "average_session_duration_minutes": {
          "description": "Average session duration in minutes",
          "type": "number"
        },
        "total_sessions": {
          "description": "Total number of sessions",
          "type": "integer"
        },
        "unique_ip_addresses": {
          "description": "Number of unique IP addresses",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SimpleErrorResponseSchema": {
      "properties": {
        "error": {
          "example": "API key not found",
          "type": "string"
        }
      },
      "type": "object"
    },
    "State": {
      "properties": {
        "country_id": {
          "description": "Country identifier",
          "type": "integer"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "State unique identifier",
          "type": "integer"
        },
        "name": {
          "description": "State name",
          "maxLength": 100,
          "type": "string"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StateCreateRequest": {
      "properties": {
        "country_id": {
          "description": "Country identifier",
          "example": 1,
          "type": "integer"
        },
        "name": {
          "description": "State name",
          "example": "California",
          "maxLength": 100,
          "type": "string"
        }
      },
      "required": [
        "name",
        "country_id"
      ],
      "type": "object"
    },
    "StateCreateResponse": {
      "properties": {
        "country_id": {
          "description": "Country identifier",
          "example": 1,
          "type": "integer"
        },
        "name": {
          "description": "State name",
          "example": "California",
          "maxLength": 100,
          "type": "string"
        }
      },
      "type": "object"
    },
    "StateWithCities": {
      "properties": {
        "city": {
          "description": "List of cities in this state",
          "items": {
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "postal_code_prefix": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "country": {
          "description": "Country information",
          "properties": {
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "State unique identifier",
          "type": "integer"
        },
        "name": {
          "description": "State name",
          "maxLength": 100,
          "type": "string"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StateWithRelationship": {
      "properties": {
        "country": {
          "description": "Country information",
          "properties": {
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "created_at": {
          "description": "Creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "State unique identifier",
          "type": "integer"
        },
        "name": {
          "description": "State name",
          "maxLength": 100,
          "type": "string"
        },
        "updated_at": {
          "description": "Update timestamp",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StorageAnalyticsSchema": {
      "properties": {
        "average_size_mb": {
          "description": "Average file size in MB",
          "type": "number"
        },
        "average_words": {
          "description": "Average words per document",
          "type": "number"
        },
        "largest_file_mb": {
          "description": "Largest file size in MB",
          "type": "number"
        },
        "total_size_bytes": {
          "description": "Total storage in bytes",
          "type": "integer"
        },
        "total_size_mb": {
          "description": "Total storage in MB",
          "type": "number"
        },
        "total_words": {
          "description": "Total word count",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SystemHealthSchema": {
      "properties": {
        "average_24h": {
          "description": "24-hour average value",
          "type": "number"
        },
        "max_24h": {
          "description": "24-hour maximum value",
          "type": "number"
        },
        "metric_name": {
          "description": "Metric name",
          "type": "string"
        },
        "metric_type": {
          "description": "Metric type",
          "type": "string"
        },
        "min_24h": {
          "description": "24-hour minimum value",
          "type": "number"
        }
      },
      "type": "object"
    },
    "SystemMetricsSchema": {
      "properties": {
        "system_health": {
          "items": {
            "properties": {
              "average_24h": {
                "description": "24-hour average value",
                "type": "number"
              },
              "max_24h": {
                "description": "24-hour maximum value",
                "type": "number"
              },
              "metric_name": {
                "description": "Metric name",
                "type": "string"
              },
              "metric_type": {
                "description": "Metric type",
                "type": "string"
              },
              "min_24h": {
                "description": "24-hour minimum value",
                "type": "number"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TableAnalyticsSchema": {
      "properties": {
        "total_rows": {
          "description": "Total number of rows",
          "type": "integer"
        },
        "total_size_bytes": {
          "description": "Total size in bytes",
          "type": "integer"
        },
        "total_tables": {
          "description": "Total number of tables",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TaskResponse": {
      "properties": {
        "estimated_time": {
          "description": "Optional estimate (in seconds) for task completion",
          "example": 45,
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "Human readable confirmation message",
          "example": "Request accepted and queued for processing.",
          "type": "string"
        },
        "status": {
          "description": "Overall status of the asynchronous request",
          "example": "accepted",
          "type": "string"
        },
        "status_url": {
          "description": "URL that can be polled to retrieve task progress",
          "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
          "format": "uri",
          "type": "string"
        },
        "task_id": {
          "description": "Identifier of the Celery task handling the request",
          "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
          "type": "string"
        }
      },
      "required": [
        "status",
        "task_id",
        "status_url"
      ],
      "type": "object"
    },
    "TopConversationSchema": {
      "properties": {
        "id": {
          "description": "Conversation ID",
          "format": "uuid",
          "type": "string"
        },
        "last_activity": {
          "description": "Last activity timestamp",
          "format": "date-time",
          "type": "string"
        },
        "lead_email": {
          "description": "Lead email",
          "format": "email",
          "type": "string"
        },
        "lead_name": {
          "description": "Lead full name",
          "type": "string"
        },
        "message_count": {
          "description": "Number of messages",
          "type": "integer"
        },
        "title": {
          "description": "Conversation title",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TopEndpointsQueryParams": {
      "days": {
        "description": "Number of days to look back",
        "example": 30,
        "in": "query",
        "name": "days",
        "schema": {
          "default": 30,
          "maximum": 365,
          "minimum": 1,
          "type": "integer"
        }
      },
      "limit": {
        "description": "Maximum number of endpoints to return",
        "example": 10,
        "in": "query",
        "name": "limit",
        "schema": {
          "default": 10,
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        }
      }
    },
    "TopEndpointsResponseSchema": {
      "properties": {
        "data": {
          "properties": {
            "endpoints": {
              "items": {
                "properties": {
                  "avg_response_time": {
                    "example": 186.3,
                    "format": "float",
                    "type": "number"
                  },
                  "endpoint": {
                    "example": "/api/v1/users",
                    "type": "string"
                  },
                  "method": {
                    "example": "GET",
                    "type": "string"
                  },
                  "success_rate": {
                    "example": 99.1,
                    "format": "float",
                    "type": "number"
                  },
                  "total_requests": {
                    "example": 12500,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "period_days": {
              "example": 30,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TopUserSchema": {
      "properties": {
        "document_count": {
          "description": "Number of documents",
          "type": "integer"
        },
        "full_name": {
          "description": "Full name",
          "type": "string"
        },
        "username": {
          "description": "Username",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateLLMSettingsRequest": {
      "properties": {
        "embedding_additional_params": {
          "type": "object"
        },
        "embedding_api_base_url": {
          "format": "uri",
          "type": "string"
        },
        "embedding_api_key": {
          "type": "string"
        },
        "embedding_dimension": {
          "minimum": 1,
          "type": "integer"
        },
        "embedding_model_id": {
          "format": "uuid",
          "type": "string"
        },
        "embedding_provider_id": {
          "format": "uuid",
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "is_default": {
          "type": "boolean"
        },
        "llm_additional_params": {
          "type": "object"
        },
        "llm_api_base_url": {
          "format": "uri",
          "type": "string"
        },
        "llm_api_key": {
          "type": "string"
        },
        "llm_max_tokens": {
          "minimum": 1,
          "type": "integer"
        },
        "llm_model_id": {
          "format": "uuid",
          "type": "string"
        },
        "llm_provider_id": {
          "format": "uuid",
          "type": "string"
        },
        "llm_temperature": {
          "maximum": 2.0,
          "minimum": 0.0,
          "type": "number"
        },
        "widget_config": {
          "type": "object"
        },
        "widget_script_url": {
          "format": "uri",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateModelRequest": {
      "properties": {
        "context_length": {
          "type": "integer"
        },
        "cost_per_1k_tokens_input": {
          "type": "number"
        },
        "cost_per_1k_tokens_output": {
          "type": "number"
        },
        "description": {
          "type": "string"
        },
        "display_name": {
          "maxLength": 300,
          "type": "string"
        },
        "embedding_dimension": {
          "type": "integer"
        },
        "is_active": {
          "type": "boolean"
        },
        "is_deprecated": {
          "type": "boolean"
        },
        "is_recommended": {
          "type": "boolean"
        },
        "sort_order": {
          "type": "integer"
        },
        "supports_function_calling": {
          "type": "boolean"
        },
        "supports_streaming": {
          "type": "boolean"
        },
        "supports_vision": {
          "type": "boolean"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UpdateProfileRequestSchema": {
      "additionalProperties": false,
      "properties": {
        "first_name": {
          "description": "First name",
          "example": "John",
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "language": {
          "default": "en",
          "description": "Language code",
          "example": "en",
          "type": "string"
        },
        "last_name": {
          "description": "Last name",
          "example": "Doe",
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "preferences": {
          "description": "User preferences object",
          "example": {
            "notifications": {
              "email": true,
              "push": false
            },
            "theme": "dark"
          },
          "type": "object"
        },
        "timezone": {
          "default": "UTC",
          "description": "Timezone identifier",
          "example": "America/New_York",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateProfileResponseSchema": {
      "properties": {
        "message": {
          "example": "Profile updated successfully",
          "type": "string"
        },
        "user": {
          "properties": {
            "created_at": {
              "description": "Account creation timestamp",
              "format": "date-time",
              "type": "string"
            },
            "email": {
              "description": "User email address",
              "format": "email",
              "type": "string"
            },
            "email_verified": {
              "description": "Email verification status",
              "type": "boolean"
            },
            "first_name": {
              "description": "First name",
              "type": "string"
            },
            "id": {
              "description": "User ID",
              "format": "uuid",
              "type": "string"
            },
            "language": {
              "default": "en",
              "description": "User language preference",
              "type": "string"
            },
            "last_login": {
              "description": "Last login timestamp",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "last_name": {
              "description": "Last name",
              "type": "string"
            },
            "login_attempts": {
              "description": "Number of login attempts",
              "type": "integer"
            },
            "preferences": {
              "description": "User preferences object",
              "type": "object"
            },
            "role": {
              "description": "User role",
              "enum": [
                "super_admin",
                "admin",
                "user"
              ],
              "type": "string"
            },
            "status": {
              "description": "User account status",
              "enum": [
                "active",
                "inactive",
                "suspended",
                "pending_verification"
              ],
              "type": "string"
            },
            "timezone": {
              "default": "UTC",
              "description": "User timezone",
              "type": "string"
            },
            "two_factor_enabled": {
              "description": "Two-factor authentication status",
              "type": "boolean"
            },
            "updated_at": {
              "description": "Last update timestamp",
              "format": "date-time",
              "type": "string"
            },
            "username": {
              "description": "Username",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "UpdateProviderRequest": {
      "properties": {
        "default_base_url": {
          "format": "uri",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "documentation_url": {
          "format": "uri",
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "is_featured": {
          "type": "boolean"
        },
        "label": {
          "maxLength": 200,
          "type": "string"
        },
        "logo_url": {
          "format": "uri",
          "type": "string"
        },
        "pricing_tier": {
          "enum": [
            "free",
            "budget",
            "mid",
            "premium",
            "variable"
          ],
          "type": "string"
        },
        "provider_type": {
          "enum": [
            "llm",
            "embedding",
            "both"
          ],
          "type": "string"
        },
        "requires_api_key": {
          "type": "boolean"
        },
        "requires_base_url": {
          "type": "boolean"
        },
        "sort_order": {
          "type": "integer"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UsageMetricsSchema": {
      "properties": {
        "agent_usage": {
          "properties": {
            "active_agents": {
              "description": "Number of active agents",
              "type": "integer"
            },
            "avg_agent_rating": {
              "description": "Average agent rating",
              "type": "number"
            },
            "total_agents": {
              "description": "Total number of agents",
              "type": "integer"
            },
            "total_conversations": {
              "description": "Total conversations handled",
              "type": "integer"
            },
            "total_messages": {
              "description": "Total messages processed",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "api_usage": {
          "properties": {
            "active_api_keys": {
              "description": "Number of active API keys",
              "type": "integer"
            },
            "avg_response_time_ms": {
              "description": "Average response time in milliseconds",
              "type": "number"
            },
            "error_count": {
              "description": "Number of error requests",
              "type": "integer"
            },
            "error_rate_percent": {
              "description": "Error rate percentage",
              "type": "number"
            },
            "success_count": {
              "description": "Number of successful requests",
              "type": "integer"
            },
            "total_api_calls": {
              "description": "Total API calls made",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "daily_usage_trend": {
          "items": {
            "properties": {
              "api_calls": {
                "description": "Number of API calls",
                "type": "integer"
              },
              "date": {
                "description": "Date",
                "format": "date",
                "type": "string"
              },
              "errors": {
                "description": "Number of errors",
                "type": "integer"
              },
              "success_rate_percent": {
                "description": "Success rate percentage",
                "type": "number"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "date_range": {
          "properties": {
            "end_date": {
              "description": "End date of analysis",
              "format": "date-time",
              "type": "string"
            },
            "start_date": {
              "description": "Start date of analysis",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "endpoint_usage": {
          "items": {
            "properties": {
              "avg_response_time_ms": {
                "description": "Average response time in milliseconds",
                "type": "number"
              },
              "call_count": {
                "description": "Number of calls to endpoint",
                "type": "integer"
              },
              "endpoint": {
                "description": "API endpoint",
                "type": "string"
              },
              "method": {
                "description": "HTTP method",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "storage_usage": {
          "properties": {
            "total_content_size_bytes": {
              "description": "Total content size in bytes",
              "type": "integer"
            },
            "total_conversations": {
              "description": "Total stored conversations",
              "type": "integer"
            },
            "total_messages": {
              "description": "Total stored messages",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "token_usage": {
          "properties": {
            "avg_tokens_per_message": {
              "description": "Average tokens per message",
              "type": "number"
            },
            "total_messages_processed": {
              "description": "Total messages processed",
              "type": "integer"
            },
            "total_tokens": {
              "description": "Total tokens consumed",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "top_client_ips": {
          "items": {
            "properties": {
              "ip_address": {
                "description": "Client IP address",
                "type": "string"
              },
              "request_count": {
                "description": "Number of requests from IP",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UsageTrendsQueryParams": {
      "days": {
        "description": "Number of days to look back",
        "example": 30,
        "in": "query",
        "name": "days",
        "schema": {
          "default": 30,
          "maximum": 365,
          "minimum": 1,
          "type": "integer"
        }
      },
      "granularity": {
        "description": "Time granularity for trends",
        "example": "daily",
        "in": "query",
        "name": "granularity",
        "schema": {
          "default": "daily",
          "enum": [
            "daily",
            "hourly"
          ],
          "type": "string"
        }
      }
    },
    "UsageTrendsResponseSchema": {
      "properties": {
        "data": {
          "properties": {
            "granularity": {
              "enum": [
                "daily",
                "hourly"
              ],
              "example": "daily",
              "type": "string"
            },
            "period_days": {
              "example": 30,
              "type": "integer"
            },
            "trends": {
              "items": {
                "properties": {
                  "avg_response_time": {
                    "example": 234.5,
                    "format": "float",
                    "type": "number"
                  },
                  "period": {
                    "example": "2025-09-06T00:00:00.000Z",
                    "format": "date-time",
                    "type": "string"
                  },
                  "success_rate": {
                    "example": 98.2,
                    "format": "float",
                    "type": "number"
                  },
                  "total_requests": {
                    "example": 4250,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UserContextSchema": {
      "properties": {
        "company_id": {
          "description": "Company ID",
          "format": "uuid",
          "nullable": true,
          "type": "string"
        },
        "email_verified": {
          "description": "Email verification status",
          "type": "boolean"
        },
        "is_admin": {
          "description": "Whether user has admin privileges",
          "type": "boolean"
        },
        "role": {
          "description": "User role",
          "enum": [
            "admin",
            "super_admin",
            "user"
          ],
          "type": "string"
        },
        "two_factor_enabled": {
          "description": "2FA enablement status",
          "type": "boolean"
        },
        "user_id": {
          "description": "User ID",
          "format": "uuid",
          "type": "string"
        },
        "username": {
          "description": "Username",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserManagementSchema": {
      "properties": {
        "active_users_24h": {
          "description": "Active users in last 24 hours",
          "type": "integer"
        },
        "role_distribution": {
          "additionalProperties": {
            "type": "integer"
          },
          "description": "User role distribution",
          "type": "object"
        },
        "user_status_distribution": {
          "additionalProperties": {
            "type": "integer"
          },
          "description": "User status distribution",
          "type": "object"
        }
      },
      "type": "object"
    },
    "UserProfileResponseSchema": {
      "properties": {
        "user": {
          "properties": {
            "created_at": {
              "description": "Account creation timestamp",
              "format": "date-time",
              "type": "string"
            },
            "email": {
              "description": "User email address",
              "format": "email",
              "type": "string"
            },
            "email_verified": {
              "description": "Email verification status",
              "type": "boolean"
            },
            "first_name": {
              "description": "First name",
              "type": "string"
            },
            "id": {
              "description": "User ID",
              "format": "uuid",
              "type": "string"
            },
            "language": {
              "default": "en",
              "description": "User language preference",
              "type": "string"
            },
            "last_login": {
              "description": "Last login timestamp",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "last_name": {
              "description": "Last name",
              "type": "string"
            },
            "login_attempts": {
              "description": "Number of login attempts",
              "type": "integer"
            },
            "preferences": {
              "description": "User preferences object",
              "type": "object"
            },
            "role": {
              "description": "User role",
              "enum": [
                "super_admin",
                "admin",
                "user"
              ],
              "type": "string"
            },
            "status": {
              "description": "User account status",
              "enum": [
                "active",
                "inactive",
                "suspended",
                "pending_verification"
              ],
              "type": "string"
            },
            "timezone": {
              "default": "UTC",
              "description": "User timezone",
              "type": "string"
            },
            "two_factor_enabled": {
              "description": "Two-factor authentication status",
              "type": "boolean"
            },
            "updated_at": {
              "description": "Last update timestamp",
              "format": "date-time",
              "type": "string"
            },
            "username": {
              "description": "Username",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "UserProfileSchema": {
      "properties": {
        "created_at": {
          "description": "Account creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "description": "User email address",
          "format": "email",
          "type": "string"
        },
        "email_verified": {
          "description": "Email verification status",
          "type": "boolean"
        },
        "first_name": {
          "description": "First name",
          "type": "string"
        },
        "id": {
          "description": "User ID",
          "format": "uuid",
          "type": "string"
        },
        "language": {
          "default": "en",
          "description": "User language preference",
          "type": "string"
        },
        "last_login": {
          "description": "Last login timestamp",
          "format": "date-time",
          "nullable": true,
          "type": "string"
        },
        "last_name": {
          "description": "Last name",
          "type": "string"
        },
        "login_attempts": {
          "description": "Number of login attempts",
          "type": "integer"
        },
        "preferences": {
          "description": "User preferences object",
          "type": "object"
        },
        "role": {
          "description": "User role",
          "enum": [
            "super_admin",
            "admin",
            "user"
          ],
          "type": "string"
        },
        "status": {
          "description": "User account status",
          "enum": [
            "active",
            "inactive",
            "suspended",
            "pending_verification"
          ],
          "type": "string"
        },
        "timezone": {
          "default": "UTC",
          "description": "User timezone",
          "type": "string"
        },
        "two_factor_enabled": {
          "description": "Two-factor authentication status",
          "type": "boolean"
        },
        "updated_at": {
          "description": "Last update timestamp",
          "format": "date-time",
          "type": "string"
        },
        "username": {
          "description": "Username",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserResponseSchema": {
      "properties": {
        "created_at": {
          "description": "Account creation timestamp",
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "description": "User's email address",
          "format": "email",
          "type": "string"
        },
        "email_verified": {
          "description": "Whether email is verified",
          "type": "boolean"
        },
        "first_name": {
          "description": "User's first name",
          "type": "string"
        },
        "id": {
          "description": "User's unique identifier",
          "format": "uuid",
          "type": "string"
        },
        "last_login": {
          "description": "Last login timestamp",
          "format": "date-time",
          "nullable": true,
          "type": "string"
        },
        "last_name": {
          "description": "User's last name",
          "type": "string"
        },
        "login_attempts": {
          "description": "Number of failed login attempts",
          "type": "integer"
        },
        "role": {
          "description": "User role",
          "enum": [
            "super_admin",
            "admin",
            "user"
          ],
          "type": "string"
        },
        "status": {
          "description": "User account status",
          "enum": [
            "active",
            "inactive",
            "suspended",
            "pending_verification"
          ],
          "type": "string"
        },
        "two_factor_enabled": {
          "description": "Whether 2FA is enabled",
          "type": "boolean"
        },
        "updated_at": {
          "description": "Account last update timestamp",
          "format": "date-time",
          "type": "string"
        },
        "username": {
          "description": "User's username",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserSecurityStatusSchema": {
      "properties": {
        "locked_users": {
          "description": "Number of locked users",
          "type": "integer"
        },
        "total_users": {
          "description": "Total number of users",
          "type": "integer"
        },
        "two_factor_enabled": {
          "description": "Number of users with 2FA enabled",
          "type": "integer"
        },
        "verified_users": {
          "description": "Number of verified users",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ValidateCredentialsResponseSchema": {
      "properties": {
        "api_key_info": {
          "properties": {
            "created_at": {
              "example": "2025-09-01T08:00:00.000Z",
              "format": "date-time",
              "type": "string"
            },
            "expires_at": {
              "example": "2025-12-06T00:00:00.000Z",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "id": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            },
            "key_prefix": {
              "description": "First 8 characters of API key",
              "example": "ak_AbC12",
              "type": "string"
            },
            "last_used_at": {
              "example": "2025-09-06T10:30:00.000Z",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "example": "Production API Key",
              "type": "string"
            },
            "permissions": {
              "example": {},
              "type": "object"
            },
            "rate_limit_per_day": {
              "example": 10000,
              "type": "integer"
            },
            "rate_limit_per_hour": {
              "example": 1000,
              "type": "integer"
            },
            "scopes": {
              "example": [
                "read",
                "write"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "status": {
              "enum": [
                "active",
                "inactive",
                "revoked",
                "expired"
              ],
              "example": "active",
              "type": "string"
            },
            "updated_at": {
              "example": "2025-09-06T10:30:00.000Z",
              "format": "date-time",
              "type": "string"
            },
            "usage_count": {
              "example": 1250,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "company": {
          "description": "Company information (null if no company)",
          "example": {
            "id": "789e1234-e89b-12d3-a456-426614174002",
            "name": "Acme Corp",
            "plan": "enterprise"
          },
          "nullable": true,
          "type": "object"
        },
        "user": {
          "description": "User information",
          "example": {
            "email": "user@example.com",
            "id": "456e7890-e89b-12d3-a456-426614174001",
            "name": "John Doe"
          },
          "type": "object"
        },
        "valid": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ValidationErrorSchema": {
      "properties": {
        "error": {
          "description": "Error message",
          "example": "Validation failed",
          "type": "string"
        },
        "errors": {
          "description": "Field-specific validation errors",
          "example": {
            "email": [
              "Invalid email format"
            ],
            "password": [
              "Password too short"
            ]
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "WebsitePage": {
      "properties": {
        "canonical_url": {
          "format": "uri",
          "type": "string"
        },
        "change_frequency_minutes": {
          "nullable": true,
          "type": "integer"
        },
        "checksum": {
          "nullable": true,
          "type": "string"
        },
        "content_hash": {
          "nullable": true,
          "type": "string"
        },
        "content_length": {
          "nullable": true,
          "type": "integer"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "language": {
          "nullable": true,
          "type": "string"
        },
        "last_crawl_status": {
          "enum": [
            "pending",
            "crawled",
            "failed",
            "excluded"
          ],
          "nullable": true,
          "type": "string"
        },
        "last_crawled_at": {
          "format": "date-time",
          "nullable": true,
          "type": "string"
        },
        "last_http_status": {
          "nullable": true,
          "type": "integer"
        },
        "metadata": {
          "type": "object"
        },
        "next_crawl_at": {
          "format": "date-time",
          "nullable": true,
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "raw_storage_path": {
          "nullable": true,
          "type": "string"
        },
        "title": {
          "nullable": true,
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "website_source_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WebsiteSource": {
      "properties": {
        "agent_id": {
          "format": "uuid",
          "type": "string"
        },
        "allowed_paths": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "base_url": {
          "format": "uri",
          "type": "string"
        },
        "company_id": {
          "format": "uuid",
          "type": "string"
        },
        "crawl_config": {
          "type": "object"
        },
        "crawl_frequency_minutes": {
          "type": "integer"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "disallowed_paths": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "domain": {
          "description": "Root domain of the website",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "last_crawl_completed_at": {
          "format": "date-time",
          "nullable": true,
          "type": "string"
        },
        "last_crawl_started_at": {
          "format": "date-time",
          "nullable": true,
          "type": "string"
        },
        "last_crawl_status": {
          "enum": [
            "active",
            "inactive",
            "crawling",
            "failed"
          ],
          "nullable": true,
          "type": "string"
        },
        "last_error": {
          "nullable": true,
          "type": "string"
        },
        "max_depth": {
          "type": "integer"
        },
        "max_pages": {
          "type": "integer"
        },
        "notes": {
          "nullable": true,
          "type": "string"
        },
        "seed_urls": {
          "items": {
            "format": "uri",
            "type": "string"
          },
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "host": "app.knowrithm.org",
  "info": {
    "contact": {
      "name": "Knowrithm Support",
      "url": "https://docs.knowrithm.org",
      "email": "support@knowrithm.org"
    },
    "description": "Knowrithm is an enterprise multi-agent platform that pairs secure authentication, knowledge ingestion, conversation orchestration, and analytics. This OpenAPI document captures every production endpoint, shared response envelope, and error model.",
    "title": "Knowrithm REST API",
    "version": "1.0.0",
    "termsOfService": "https://www.knowrithm.org/terms",
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    },
    "x-logo": {
      "url": "https://cdn.knowrithm.org/assets/brand/logo-light.svg",
      "backgroundColor": "#0F172A"
    }
  },
  "paths": {
    "/api/v1/address": {
      "get": {
        "description": "Get the address associated with the authenticated company.",
        "responses": {
          "200": {
            "description": "Address retrieved successfully",
            "schema": {
              "properties": {
                "address": {
                  "items": {
                    "properties": {
                      "city": {
                        "description": "City information",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "country": {
                        "description": "Country information",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "id": {
                        "description": "Address unique identifier",
                        "type": "integer"
                      },
                      "is_primary": {
                        "description": "Primary address flag",
                        "type": "boolean"
                      },
                      "lan": {
                        "description": "Longitude coordinate",
                        "format": "float",
                        "type": "number"
                      },
                      "lat": {
                        "description": "Latitude coordinate",
                        "format": "float",
                        "type": "number"
                      },
                      "postal_code": {
                        "description": "Postal code",
                        "maxLength": 20,
                        "type": "string"
                      },
                      "state": {
                        "description": "State information",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "street_address": {
                        "description": "Street address",
                        "maxLength": 255,
                        "type": "string"
                      },
                      "updated_at": {
                        "description": "Update timestamp",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get company address",
        "tags": [
          "Addresses"
        ]
      },
      "post": {
        "description": "Create a new address with complete location information asynchronously.",
        "parameters": [
          {
            "description": "Address information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "city_id": {
                  "description": "City identifier",
                  "example": 1,
                  "type": "integer"
                },
                "country_id": {
                  "description": "Country identifier",
                  "example": 1,
                  "type": "integer"
                },
                "is_primary": {
                  "default": false,
                  "description": "Primary address flag",
                  "example": true,
                  "type": "boolean"
                },
                "lan": {
                  "description": "Longitude coordinate",
                  "example": -118.2437,
                  "format": "float",
                  "type": "number"
                },
                "lat": {
                  "description": "Latitude coordinate",
                  "example": 34.0522,
                  "format": "float",
                  "type": "number"
                },
                "postal_code": {
                  "description": "Postal code",
                  "example": "90210",
                  "maxLength": 20,
                  "type": "string"
                },
                "state_id": {
                  "description": "State identifier",
                  "example": 1,
                  "type": "integer"
                },
                "street_address": {
                  "description": "Street address",
                  "example": "123 Main Street",
                  "maxLength": 255,
                  "type": "string"
                }
              },
              "required": [
                "street_address",
                "city_id",
                "state_id",
                "country_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Address creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields or invalid data",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new address",
        "tags": [
          "Addresses"
        ]
      }
    },
    "/api/v1/admin/system-metric": {
      "get": {
        "description": "\n    Retrieve system performance and health metrics from the last 24 hours.\n    \n    **Access Control:**\n    - Super Admin: Can access metrics for any company by specifying company_id in path\n    - Admin: Can only access metrics for their own company\n    \n    **Metrics Include:**\n    - CPU usage percentages\n    - Memory utilization\n    - Disk I/O statistics  \n    - Network throughput\n    - Application-specific metrics\n    \n    **Data Range:** Last 24 hours, limited to 1000 most recent data points per metric type.\n    ",
        "parameters": [
          {
            "description": "Company ID (Super Admin only). If not provided, uses admin's company.",
            "in": "path",
            "name": "company_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generated_at": {
                      "description": "Metrics generation timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "metrics": {
                      "additionalProperties": {
                        "items": {
                          "properties": {
                            "labels": {
                              "description": "Metric labels",
                              "type": "object"
                            },
                            "timestamp": {
                              "description": "Metric timestamp",
                              "format": "date-time",
                              "type": "string"
                            },
                            "value": {
                              "description": "Metric value",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "description": "Metrics grouped by metric name",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "System metrics retrieved successfully"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "insufficient_role": {
                    "summary": "Insufficient permissions",
                    "value": {
                      "message": "Not allowed"
                    }
                  },
                  "not_user": {
                    "summary": "Not a user account",
                    "value": {
                      "message": "Not allowed"
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden - Admin access required or invalid company access"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "error": "Failed to retrieve metrics"
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Internal server error - Failed to retrieve metrics"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Admin: Get system metrics",
        "tags": [
          "Admin"
        ]
      }
    },
    "/api/v1/admin/user": {
      "get": {
        "description": "Retrieve paginated list of users with comprehensive filtering, searching, and sorting capabilities. Supports both admin and super-admin access.",
        "parameters": [
          {
            "default": 1,
            "description": "Page number for pagination",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "integer"
          },
          {
            "default": 50,
            "description": "Number of results per page (max 100)",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "per_page",
            "type": "integer"
          },
          {
            "description": "Filter users by account status",
            "enum": [
              "active",
              "inactive",
              "suspended",
              "pending_verification"
            ],
            "in": "query",
            "name": "status",
            "type": "string"
          },
          {
            "description": "Filter users by role",
            "enum": [
              "super_admin",
              "admin",
              "user"
            ],
            "in": "query",
            "name": "role",
            "type": "string"
          },
          {
            "description": "Filter by email verification status (true/false)",
            "in": "query",
            "name": "email_verified",
            "type": "boolean"
          },
          {
            "description": "Filter by two-factor authentication status (true/false)",
            "in": "query",
            "name": "two_factor_enabled",
            "type": "boolean"
          },
          {
            "description": "Filter users who have never logged in (true/false)",
            "in": "query",
            "name": "never_logged_in",
            "type": "boolean"
          },
          {
            "description": "Filter locked/unlocked accounts (true/false)",
            "in": "query",
            "name": "locked",
            "type": "boolean"
          },
          {
            "description": "Include soft-deleted users in results (true/false)",
            "in": "query",
            "name": "include_deleted",
            "type": "boolean"
          },
          {
            "description": "Show only soft-deleted users (true/false)",
            "in": "query",
            "name": "only_deleted",
            "type": "boolean"
          },
          {
            "description": "Search across email, username, first name, last name, and full name",
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "description": "Filter users created after this date (ISO format: 2024-01-01T00:00:00Z)",
            "format": "date-time",
            "in": "query",
            "name": "created_after",
            "type": "string"
          },
          {
            "description": "Filter users created before this date (ISO format: 2024-12-31T23:59:59Z)",
            "format": "date-time",
            "in": "query",
            "name": "created_before",
            "type": "string"
          },
          {
            "description": "Filter users who logged in after this date (ISO format)",
            "format": "date-time",
            "in": "query",
            "name": "last_login_after",
            "type": "string"
          },
          {
            "description": "Filter users who logged in before this date (ISO format)",
            "format": "date-time",
            "in": "query",
            "name": "last_login_before",
            "type": "string"
          },
          {
            "description": "Filter users with login attempts >= this threshold (default: 5)",
            "in": "query",
            "minimum": 1,
            "name": "high_login_attempts",
            "type": "integer"
          },
          {
            "description": "Filter by user timezone (e.g., 'UTC', 'America/New_York')",
            "in": "query",
            "name": "timezone",
            "type": "string"
          },
          {
            "description": "Filter by user language preference (e.g., 'en', 'es', 'fr')",
            "in": "query",
            "name": "language",
            "type": "string"
          },
          {
            "default": "created_at",
            "description": "Field to sort by",
            "enum": [
              "created_at",
              "updated_at",
              "last_login",
              "email",
              "username",
              "first_name",
              "last_name",
              "login_attempts"
            ],
            "in": "query",
            "name": "sort_by",
            "type": "string"
          },
          {
            "default": "desc",
            "description": "Sort order (ascending or descending)",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "sort_order",
            "type": "string"
          },
          {
            "description": "Company ID (super-admin route only)",
            "format": "uuid",
            "in": "path",
            "name": "company_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully with applied filters",
            "schema": {
              "properties": {
                "filters_applied": {
                  "description": "Summary of all filters that were applied to the query",
                  "properties": {
                    "created_after": {
                      "nullable": true,
                      "type": "string"
                    },
                    "created_before": {
                      "nullable": true,
                      "type": "string"
                    },
                    "email_verified": {
                      "nullable": true,
                      "type": "string"
                    },
                    "high_login_attempts": {
                      "nullable": true,
                      "type": "string"
                    },
                    "include_deleted": {
                      "nullable": true,
                      "type": "string"
                    },
                    "language": {
                      "nullable": true,
                      "type": "string"
                    },
                    "last_login_after": {
                      "nullable": true,
                      "type": "string"
                    },
                    "last_login_before": {
                      "nullable": true,
                      "type": "string"
                    },
                    "locked": {
                      "nullable": true,
                      "type": "string"
                    },
                    "never_logged_in": {
                      "nullable": true,
                      "type": "string"
                    },
                    "only_deleted": {
                      "nullable": true,
                      "type": "string"
                    },
                    "role": {
                      "nullable": true,
                      "type": "string"
                    },
                    "search": {
                      "nullable": true,
                      "type": "string"
                    },
                    "sort_by": {
                      "type": "string"
                    },
                    "sort_order": {
                      "type": "string"
                    },
                    "status": {
                      "nullable": true,
                      "type": "string"
                    },
                    "timezone": {
                      "nullable": true,
                      "type": "string"
                    },
                    "two_factor_enabled": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "pagination": {
                  "properties": {
                    "has_next": {
                      "type": "boolean"
                    },
                    "has_prev": {
                      "type": "boolean"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "pages": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "total": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "users": {
                  "items": {
                    "properties": {
                      "created_at": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "email_verified": {
                        "type": "boolean"
                      },
                      "first_name": {
                        "type": "string"
                      },
                      "id": {
                        "format": "uuid",
                        "type": "string"
                      },
                      "last_login": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      },
                      "last_name": {
                        "type": "string"
                      },
                      "login_attempts": {
                        "type": "integer"
                      },
                      "role": {
                        "enum": [
                          "super_admin",
                          "admin",
                          "user"
                        ],
                        "type": "string"
                      },
                      "status": {
                        "enum": [
                          "active",
                          "inactive",
                          "suspended",
                          "pending_verification"
                        ],
                        "type": "string"
                      },
                      "two_factor_enabled": {
                        "type": "boolean"
                      },
                      "updated_at": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid filter parameters",
            "schema": {
              "properties": {
                "error": {
                  "examples": [
                    "Invalid status: invalid_status",
                    "Invalid role: invalid_role",
                    "Invalid created_after date format. Use ISO format.",
                    "Invalid sort_by field. Valid options: ['created_at', 'updated_at', ...]"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Admin/Super-admin access required",
            "schema": {
              "properties": {
                "message": {
                  "example": "Not allowed",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to retrieve users",
            "schema": {
              "properties": {
                "error": {
                  "example": "Failed to retrieve users",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Admin: Get all users with filtering capabilities",
        "tags": [
          "Admin"
        ]
      }
    },
    "/api/v1/admin/user/{user_id}": {
      "get": {
        "description": "Retrieve detailed information for a specific user by ID (admin only).",
        "parameters": [
          {
            "description": "User ID",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "schema": {
              "properties": {
                "data": {
                  "properties": {
                    "created_at": {
                      "description": "Account creation timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "email": {
                      "description": "User's email address",
                      "format": "email",
                      "type": "string"
                    },
                    "email_verified": {
                      "description": "Whether email is verified",
                      "type": "boolean"
                    },
                    "first_name": {
                      "description": "User's first name",
                      "type": "string"
                    },
                    "id": {
                      "description": "User's unique identifier",
                      "format": "uuid",
                      "type": "string"
                    },
                    "last_login": {
                      "description": "Last login timestamp",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "last_name": {
                      "description": "User's last name",
                      "type": "string"
                    },
                    "login_attempts": {
                      "description": "Number of failed login attempts",
                      "type": "integer"
                    },
                    "role": {
                      "description": "User role",
                      "enum": [
                        "super_admin",
                        "admin",
                        "user"
                      ],
                      "type": "string"
                    },
                    "status": {
                      "description": "User account status",
                      "enum": [
                        "active",
                        "inactive",
                        "suspended",
                        "pending_verification"
                      ],
                      "type": "string"
                    },
                    "two_factor_enabled": {
                      "description": "Whether 2FA is enabled",
                      "type": "boolean"
                    },
                    "updated_at": {
                      "description": "Account last update timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "username": {
                      "description": "User's username",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "message": {
                  "example": "User retrieved successfully",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a specific user by ID.",
        "tags": [
          "Admin"
        ]
      }
    },
    "/api/v1/agent": {
      "get": {
        "description": "List agents with filtering and pagination options.",
        "parameters": [
          {
            "description": "Filter by company ID",
            "format": "uuid",
            "in": "query",
            "name": "company_id",
            "type": "string"
          },
          {
            "description": "Filter by status",
            "enum": [
              "active",
              "inactive",
              "training",
              "maintenance"
            ],
            "in": "query",
            "name": "status",
            "type": "string"
          },
          {
            "default": 1,
            "description": "Page number",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 10,
            "description": "Items per page",
            "in": "query",
            "maximum": 100,
            "name": "per_page",
            "type": "integer"
          },
          {
            "description": "Search in name and description",
            "in": "query",
            "name": "search",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Agents retrieved successfully",
            "schema": {
              "properties": {
                "agents": {
                  "items": {
                    "properties": {
                      "avatar_url": {
                        "description": "Agent avatar URL",
                        "format": "uri",
                        "type": "string"
                      },
                      "average_rating": {
                        "description": "Average rating",
                        "maximum": 5.0,
                        "minimum": 0.0,
                        "type": "number"
                      },
                      "capabilities": {
                        "description": "Agent capabilities",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "company_id": {
                        "description": "Company identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "databases": {
                        "description": "Linked database connections",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "description": {
                        "description": "Agent description",
                        "type": "string"
                      },
                      "documents": {
                        "description": "Linked documents",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "embed_code": {
                        "description": "Generated widget embed code",
                        "type": "string"
                      },
                      "id": {
                        "description": "Agent unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "languages": {
                        "description": "Supported languages",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "last_trained": {
                        "description": "Last training timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "llm_settings_id": {
                        "description": "Linked LLM settings identifier",
                        "format": "uuid",
                        "nullable": true,
                        "type": "string"
                      },
                      "max_tokens": {
                        "description": "Maximum tokens",
                        "minimum": 1,
                        "type": "integer"
                      },
                      "model_name": {
                        "description": "AI model name",
                        "type": "string"
                      },
                      "name": {
                        "description": "Agent name",
                        "maxLength": 200,
                        "type": "string"
                      },
                      "operating_hours": {
                        "description": "Agent operating hours",
                        "type": "object"
                      },
                      "personality_traits": {
                        "description": "Agent personality configuration",
                        "type": "object"
                      },
                      "status": {
                        "description": "Agent status",
                        "enum": [
                          "active",
                          "inactive",
                          "training",
                          "maintenance"
                        ],
                        "type": "string"
                      },
                      "temperature": {
                        "description": "Model temperature",
                        "maximum": 2.0,
                        "minimum": 0.0,
                        "type": "number"
                      },
                      "total_conversations": {
                        "description": "Total conversations",
                        "type": "integer"
                      },
                      "total_messages": {
                        "description": "Total messages",
                        "type": "integer"
                      },
                      "updated_at": {
                        "description": "Update timestamp",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "pagination": {
                  "properties": {
                    "has_next": {
                      "description": "Has next page",
                      "type": "boolean"
                    },
                    "has_prev": {
                      "description": "Has previous page",
                      "type": "boolean"
                    },
                    "page": {
                      "description": "Current page number",
                      "type": "integer"
                    },
                    "pages": {
                      "description": "Total number of pages",
                      "type": "integer"
                    },
                    "per_page": {
                      "description": "Items per page",
                      "type": "integer"
                    },
                    "total": {
                      "description": "Total number of items",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid status value",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List agents with filtering and pagination",
        "tags": [
          "Agents"
        ]
      },
      "post": {
        "description": "Create a new AI agent for a company and provision agent-specific LLM/embedding settings in a single asynchronous call.",
        "parameters": [
          {
            "description": "Agent configuration",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "avatar_url": {
                  "description": "Agent avatar URL",
                  "format": "uri",
                  "type": "string"
                },
                "capabilities": {
                  "description": "Agent capabilities",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "company_id": {
                  "description": "Target company identifier (super admin only)",
                  "example": "123e4567-e89b-12d3-a456-426614174000",
                  "format": "uuid",
                  "type": "string"
                },
                "description": {
                  "description": "Agent description",
                  "example": "Handles customer inquiries and support requests",
                  "type": "string"
                },
                "embedding_additional_params": {
                  "description": "Additional embedding provider parameters",
                  "type": "object"
                },
                "embedding_api_base_url": {
                  "description": "Custom base URL for the embedding provider",
                  "format": "uri",
                  "nullable": true,
                  "type": "string"
                },
                "embedding_api_key": {
                  "description": "API key for the embedding provider",
                  "type": "string"
                },
                "embedding_dimension": {
                  "description": "Embedding vector dimension override",
                  "type": "integer"
                },
                "embedding_model_id": {
                  "description": "Embedding model to use (must belong to the selected provider)",
                  "example": "bc03b08f-8f44-4a1e-9227-f0022f8b5d4e",
                  "format": "uuid",
                  "type": "string"
                },
                "embedding_provider_id": {
                  "description": "Provider to use for embeddings",
                  "example": "75d4ceaf-6a3c-4bd3-98f0-0bcf2bb9c2d4",
                  "format": "uuid",
                  "type": "string"
                },
                "languages": {
                  "default": [
                    "en"
                  ],
                  "description": "Supported languages",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "llm_additional_params": {
                  "description": "Additional provider-specific parameters",
                  "type": "object"
                },
                "llm_api_base_url": {
                  "description": "Custom base URL for the LLM provider",
                  "format": "uri",
                  "nullable": true,
                  "type": "string"
                },
                "llm_api_key": {
                  "description": "API key for the selected LLM provider",
                  "type": "string"
                },
                "llm_max_tokens": {
                  "description": "Maximum tokens for the agent's responses",
                  "minimum": 1,
                  "type": "integer"
                },
                "llm_model_id": {
                  "description": "Model to use for LLM completions (must belong to the selected provider)",
                  "example": "8f3c2d09-0d0f-4fcf-83da-79d58a0d30d5",
                  "format": "uuid",
                  "type": "string"
                },
                "llm_provider_id": {
                  "description": "Provider to use for LLM completions",
                  "example": "6fa1fc5e-a7de-4c98-b203-20e063db89fe",
                  "format": "uuid",
                  "type": "string"
                },
                "llm_temperature": {
                  "default": 0.7,
                  "description": "Temperature to use for the agent's model",
                  "maximum": 2.0,
                  "minimum": 0.0,
                  "type": "number"
                },
                "name": {
                  "description": "Agent name",
                  "example": "Customer Support Bot",
                  "type": "string"
                },
                "operating_hours": {
                  "description": "Agent operating hours",
                  "type": "object"
                },
                "personality_traits": {
                  "description": "Agent personality configuration",
                  "type": "object"
                },
                "status": {
                  "default": "active",
                  "description": "Agent status",
                  "enum": [
                    "active",
                    "inactive",
                    "training",
                    "maintenance"
                  ],
                  "type": "string"
                },
                "widget_config": {
                  "description": "Widget configuration overrides",
                  "type": "object"
                },
                "widget_script_url": {
                  "description": "Override widget script URL",
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "llm_provider_id",
                "llm_model_id",
                "embedding_provider_id",
                "embedding_model_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Agent creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields or invalid provider/model configuration",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for target company",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Company or requested providers/models not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new agent for a company",
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v1/agent/by-name/{name}": {
      "get": {
        "description": "Retrieve an agent within the scoped company using a case-insensitive name match. Super admins may specify a company ID query parameter.",
        "parameters": [
          {
            "description": "Agent name to search for",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional company ID (super admin only)",
            "format": "uuid",
            "in": "query",
            "name": "company_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent retrieved successfully",
            "schema": {
              "properties": {
                "agent": {
                  "properties": {
                    "avatar_url": {
                      "description": "Agent avatar URL",
                      "format": "uri",
                      "type": "string"
                    },
                    "average_rating": {
                      "description": "Average rating",
                      "maximum": 5.0,
                      "minimum": 0.0,
                      "type": "number"
                    },
                    "capabilities": {
                      "description": "Agent capabilities",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "company_id": {
                      "description": "Company identifier",
                      "format": "uuid",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "Creation timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "databases": {
                      "description": "Linked database connections",
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "description": {
                      "description": "Agent description",
                      "type": "string"
                    },
                    "documents": {
                      "description": "Linked documents",
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "embed_code": {
                      "description": "Generated widget embed code",
                      "type": "string"
                    },
                    "id": {
                      "description": "Agent unique identifier",
                      "format": "uuid",
                      "type": "string"
                    },
                    "languages": {
                      "description": "Supported languages",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "last_trained": {
                      "description": "Last training timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "llm_settings_id": {
                      "description": "Linked LLM settings identifier",
                      "format": "uuid",
                      "nullable": true,
                      "type": "string"
                    },
                    "max_tokens": {
                      "description": "Maximum tokens",
                      "minimum": 1,
                      "type": "integer"
                    },
                    "model_name": {
                      "description": "AI model name",
                      "type": "string"
                    },
                    "name": {
                      "description": "Agent name",
                      "maxLength": 200,
                      "type": "string"
                    },
                    "operating_hours": {
                      "description": "Agent operating hours",
                      "type": "object"
                    },
                    "personality_traits": {
                      "description": "Agent personality configuration",
                      "type": "object"
                    },
                    "status": {
                      "description": "Agent status",
                      "enum": [
                        "active",
                        "inactive",
                        "training",
                        "maintenance"
                      ],
                      "type": "string"
                    },
                    "temperature": {
                      "description": "Model temperature",
                      "maximum": 2.0,
                      "minimum": 0.0,
                      "type": "number"
                    },
                    "total_conversations": {
                      "description": "Total conversations",
                      "type": "integer"
                    },
                    "total_messages": {
                      "description": "Total messages",
                      "type": "integer"
                    },
                    "updated_at": {
                      "description": "Update timestamp",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Retrieve an agent by name within the scoped company.",
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v1/agent/{agent_id}": {
      "delete": {
        "description": "Delete an agent (admin only). Cannot delete agents with active conversations. The deletion runs asynchronously.",
        "parameters": [
          {
            "description": "Agent ID",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Agent deletion request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Cannot delete agent with active conversations",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete an agent (soft delete)",
        "tags": [
          "Agents"
        ]
      },
      "get": {
        "description": "Retrieve a specific agent by its ID.",
        "parameters": [
          {
            "description": "Agent ID",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent retrieved successfully",
            "schema": {
              "properties": {
                "agent": {
                  "properties": {
                    "avatar_url": {
                      "description": "Agent avatar URL",
                      "format": "uri",
                      "type": "string"
                    },
                    "average_rating": {
                      "description": "Average rating",
                      "maximum": 5.0,
                      "minimum": 0.0,
                      "type": "number"
                    },
                    "capabilities": {
                      "description": "Agent capabilities",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "company_id": {
                      "description": "Company identifier",
                      "format": "uuid",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "Creation timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "databases": {
                      "description": "Linked database connections",
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "description": {
                      "description": "Agent description",
                      "type": "string"
                    },
                    "documents": {
                      "description": "Linked documents",
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "embed_code": {
                      "description": "Generated widget embed code",
                      "type": "string"
                    },
                    "id": {
                      "description": "Agent unique identifier",
                      "format": "uuid",
                      "type": "string"
                    },
                    "languages": {
                      "description": "Supported languages",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "last_trained": {
                      "description": "Last training timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "llm_settings_id": {
                      "description": "Linked LLM settings identifier",
                      "format": "uuid",
                      "nullable": true,
                      "type": "string"
                    },
                    "max_tokens": {
                      "description": "Maximum tokens",
                      "minimum": 1,
                      "type": "integer"
                    },
                    "model_name": {
                      "description": "AI model name",
                      "type": "string"
                    },
                    "name": {
                      "description": "Agent name",
                      "maxLength": 200,
                      "type": "string"
                    },
                    "operating_hours": {
                      "description": "Agent operating hours",
                      "type": "object"
                    },
                    "personality_traits": {
                      "description": "Agent personality configuration",
                      "type": "object"
                    },
                    "status": {
                      "description": "Agent status",
                      "enum": [
                        "active",
                        "inactive",
                        "training",
                        "maintenance"
                      ],
                      "type": "string"
                    },
                    "temperature": {
                      "description": "Model temperature",
                      "maximum": 2.0,
                      "minimum": 0.0,
                      "type": "number"
                    },
                    "total_conversations": {
                      "description": "Total conversations",
                      "type": "integer"
                    },
                    "total_messages": {
                      "description": "Total messages",
                      "type": "integer"
                    },
                    "updated_at": {
                      "description": "Update timestamp",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [],
        "summary": "Get a specific agent by ID",
        "tags": [
          "Agents"
        ]
      },
      "put": {
        "description": "Update an existing agent's configuration asynchronously.",
        "parameters": [
          {
            "description": "Agent ID",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Agent updates",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "avatar_url": {
                  "description": "Agent avatar URL",
                  "format": "uri",
                  "type": "string"
                },
                "capabilities": {
                  "description": "Agent capabilities",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "description": {
                  "description": "Agent description",
                  "type": "string"
                },
                "languages": {
                  "description": "Supported languages",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "llm_settings_id": {
                  "description": "New LLM settings to associate with the agent",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "description": "Agent name",
                  "type": "string"
                },
                "operating_hours": {
                  "description": "Agent operating hours",
                  "type": "object"
                },
                "personality_traits": {
                  "description": "Agent personality configuration",
                  "type": "object"
                },
                "status": {
                  "description": "Agent status",
                  "enum": [
                    "active",
                    "inactive",
                    "training",
                    "maintenance"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Agent update request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update an existing agent",
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v1/agent/{agent_id}/clone": {
      "post": {
        "description": "Create an inactive clone of an existing agent asynchronously.",
        "parameters": [
          {
            "description": "Agent ID",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional overrides for the cloned agent",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "properties": {
                "llm_settings_id": {
                  "description": "Optional existing LLM settings to associate with the clone",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "description": "Name for the cloned agent",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Agent clone request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized to clone this agent",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Clone an existing agent",
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v1/agent/{agent_id}/embed-code": {
      "get": {
        "description": "Retrieve ready-to-use widget embed snippets and configuration for an agent.",
        "parameters": [
          {
            "description": "Agent ID",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Embed code generated successfully",
            "schema": {
              "properties": {
                "advanced": {
                  "description": "Advanced embed code snippet with configuration options",
                  "type": "string"
                },
                "agent_id": {
                  "description": "Agent identifier",
                  "format": "uuid",
                  "type": "string"
                },
                "agent_name": {
                  "description": "Agent display name",
                  "type": "string"
                },
                "config": {
                  "additionalProperties": true,
                  "description": "Widget configuration object (script URLs and data attributes)",
                  "type": "object"
                },
                "preview_url": {
                  "description": "URL that renders a hosted preview of the widget",
                  "format": "uri",
                  "type": "string"
                },
                "simple": {
                  "description": "Simple embed code snippet",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "No LLM settings configured for this agent",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get embed code for agent widget",
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v1/agent/{agent_id}/restore": {
      "patch": {
        "description": "Restore a previously deleted agent asynchronously.",
        "parameters": [
          {
            "description": "Agent ID",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Agent restoration request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Restore a deleted agent",
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v1/agent/{agent_id}/stats": {
      "get": {
        "description": "Retrieve aggregate statistics for a specific agent.",
        "parameters": [
          {
            "description": "Agent ID",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent statistics retrieved successfully",
            "schema": {
              "properties": {
                "agent_id": {
                  "description": "Agent identifier",
                  "format": "uuid",
                  "type": "string"
                },
                "agent_name": {
                  "description": "Agent display name",
                  "type": "string"
                },
                "average_rating": {
                  "description": "Average rating score, if available",
                  "format": "float",
                  "nullable": true,
                  "type": "number"
                },
                "created_at": {
                  "description": "Agent creation timestamp",
                  "format": "date-time",
                  "nullable": true,
                  "type": "string"
                },
                "databases_count": {
                  "description": "Linked database count",
                  "type": "integer"
                },
                "documents_count": {
                  "description": "Linked document count",
                  "type": "integer"
                },
                "last_trained": {
                  "description": "Timestamp of last training run",
                  "format": "date-time",
                  "nullable": true,
                  "type": "string"
                },
                "llm_model": {
                  "description": "Resolved LLM model name",
                  "nullable": true,
                  "type": "string"
                },
                "llm_provider": {
                  "description": "Resolved LLM provider identifier",
                  "nullable": true,
                  "type": "string"
                },
                "status": {
                  "description": "Current agent status",
                  "example": "active",
                  "type": "string"
                },
                "total_conversations": {
                  "description": "Total conversations handled",
                  "type": "integer"
                },
                "total_messages": {
                  "description": "Total messages processed",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get agent statistics",
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v1/agent/{agent_id}/test": {
      "post": {
        "description": "Run a sample conversation against an agent. The test executes asynchronously and results can be retrieved via the task status endpoint.",
        "parameters": [
          {
            "description": "Agent ID",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional test configuration",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "properties": {
                "query": {
                  "description": "Sample query to execute against the agent",
                  "example": "Hello, can you introduce yourself?",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Agent test request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Test agent with a sample query",
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v1/analytic/agent/{agent_id}": {
      "get": {
        "description": "Retrieve detailed performance analytics for an agent including conversation metrics, message statistics, token usage, quality metrics, and activity trends.",
        "parameters": [
          {
            "description": "Unique identifier of the agent",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Start date for metrics (ISO 8601 format)",
            "in": "query",
            "name": "start_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End date for metrics (ISO 8601 format)",
            "in": "query",
            "name": "end_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent metrics retrieved successfully",
            "schema": {
              "properties": {
                "activity_trend": {
                  "items": {
                    "properties": {
                      "conversations": {
                        "description": "Number of conversations",
                        "type": "integer"
                      },
                      "date": {
                        "description": "Date",
                        "format": "date",
                        "type": "string"
                      },
                      "messages": {
                        "description": "Number of messages",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "agent_info": {
                  "properties": {
                    "id": {
                      "description": "Agent ID",
                      "type": "string"
                    },
                    "model_name": {
                      "description": "Model name used by agent",
                      "type": "string"
                    },
                    "name": {
                      "description": "Agent name",
                      "type": "string"
                    },
                    "status": {
                      "description": "Agent status",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "conversation_metrics": {
                  "properties": {
                    "active_conversations": {
                      "description": "Active conversations",
                      "type": "integer"
                    },
                    "avg_messages_per_conversation": {
                      "description": "Average messages per conversation",
                      "type": "number"
                    },
                    "total_conversations": {
                      "description": "Total conversations handled",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "conversion_metrics": {
                  "properties": {
                    "conversion_rate_percent": {
                      "description": "Conversion rate percentage",
                      "type": "number"
                    },
                    "total_converted": {
                      "description": "Total converted conversations",
                      "type": "integer"
                    },
                    "total_lost": {
                      "description": "Total lost conversations",
                      "type": "integer"
                    },
                    "total_qualified": {
                      "description": "Total qualified conversations",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "date_range": {
                  "properties": {
                    "end_date": {
                      "description": "End date of analysis",
                      "format": "date-time",
                      "type": "string"
                    },
                    "start_date": {
                      "description": "Start date of analysis",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "message_metrics": {
                  "properties": {
                    "assistant_messages": {
                      "description": "Assistant messages sent",
                      "type": "integer"
                    },
                    "total_messages": {
                      "description": "Total messages processed",
                      "type": "integer"
                    },
                    "user_messages": {
                      "description": "User messages received",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "performance_metrics": {
                  "properties": {
                    "avg_response_time_seconds": {
                      "description": "Average response time in seconds",
                      "type": "number"
                    },
                    "max_response_time_seconds": {
                      "description": "Maximum response time in seconds",
                      "type": "number"
                    },
                    "min_response_time_seconds": {
                      "description": "Minimum response time in seconds",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "quality_metrics": {
                  "properties": {
                    "avg_message_feedback": {
                      "description": "Average message feedback score",
                      "type": "number"
                    },
                    "avg_satisfaction_rating": {
                      "description": "Average satisfaction rating",
                      "type": "number"
                    },
                    "current_agent_rating": {
                      "description": "Current agent rating",
                      "type": "number"
                    },
                    "satisfaction_response_rate_percent": {
                      "description": "Satisfaction response rate percentage",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "token_usage": {
                  "properties": {
                    "avg_tokens_per_message": {
                      "description": "Average tokens per message",
                      "type": "number"
                    },
                    "total_tokens": {
                      "description": "Total tokens consumed",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "top_sources": {
                  "items": {
                    "properties": {
                      "conversation_count": {
                        "description": "Number of conversations from source",
                        "type": "integer"
                      },
                      "source": {
                        "description": "Source name",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid date range parameters",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get comprehensive metrics for a specific agent",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/analytic/agent/{agent_id}/performance-comparison": {
      "get": {
        "description": "Compare an agent's performance metrics against company averages including conversations, messages, satisfaction ratings, response times, and conversions.",
        "parameters": [
          {
            "description": "Unique identifier of the agent",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Start date for comparison (ISO 8601 format)",
            "in": "query",
            "name": "start_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End date for comparison (ISO 8601 format)",
            "in": "query",
            "name": "end_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent performance comparison retrieved successfully",
            "schema": {
              "properties": {
                "agent_info": {
                  "properties": {
                    "id": {
                      "description": "Agent ID",
                      "type": "string"
                    },
                    "name": {
                      "description": "Agent name",
                      "type": "string"
                    },
                    "status": {
                      "description": "Agent status",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "date_range": {
                  "properties": {
                    "end_date": {
                      "description": "End date of analysis",
                      "format": "date-time",
                      "type": "string"
                    },
                    "start_date": {
                      "description": "Start date of analysis",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "performance_comparison": {
                  "properties": {
                    "conversations": {
                      "properties": {
                        "agent_value": {
                          "description": "Agent's conversation count",
                          "type": "integer"
                        },
                        "company_average": {
                          "description": "Company average conversation count",
                          "type": "number"
                        },
                        "performance_vs_average_percent": {
                          "description": "Performance vs average percentage",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "conversions": {
                      "properties": {
                        "agent_value": {
                          "description": "Agent's conversion count",
                          "type": "integer"
                        },
                        "company_average": {
                          "description": "Company average conversion count",
                          "type": "number"
                        },
                        "performance_vs_average_percent": {
                          "description": "Performance vs average percentage",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "response_time": {
                      "properties": {
                        "agent_value": {
                          "description": "Agent's response time",
                          "type": "number"
                        },
                        "company_average": {
                          "description": "Company average response time",
                          "type": "number"
                        },
                        "performance_vs_average_percent": {
                          "description": "Performance vs average percentage",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "satisfaction_rating": {
                      "properties": {
                        "agent_value": {
                          "description": "Agent's satisfaction rating",
                          "type": "number"
                        },
                        "company_average": {
                          "description": "Company average satisfaction rating",
                          "type": "number"
                        },
                        "performance_vs_average_percent": {
                          "description": "Performance vs average percentage",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "total_messages": {
                      "properties": {
                        "agent_value": {
                          "description": "Agent's total messages",
                          "type": "integer"
                        },
                        "company_average": {
                          "description": "Company average total messages",
                          "type": "number"
                        },
                        "performance_vs_average_percent": {
                          "description": "Performance vs average percentage",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid date range parameters",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Compare agent performance against company averages",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/analytic/conversation/{conversation_id}": {
      "get": {
        "description": "Retrieve comprehensive analytics for a conversation including message statistics, performance metrics, conversation flow, context analysis, and message timeline.",
        "parameters": [
          {
            "description": "Unique identifier of the conversation",
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation analytics retrieved successfully",
            "schema": {
              "properties": {
                "activity_timeline": {
                  "items": {
                    "properties": {
                      "conversations": {
                        "description": "Number of active conversations",
                        "type": "integer"
                      },
                      "date": {
                        "description": "Activity date",
                        "format": "date",
                        "type": "string"
                      },
                      "messages": {
                        "description": "Number of messages",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "conversation_status": {
                  "additionalProperties": {
                    "type": "integer"
                  },
                  "description": "Conversation status distribution",
                  "type": "object"
                },
                "lead_engagement": {
                  "properties": {
                    "average_satisfaction": {
                      "description": "Average lead satisfaction score",
                      "type": "number"
                    },
                    "engaged_leads": {
                      "description": "Number of engaged leads",
                      "type": "integer"
                    },
                    "total_conversions": {
                      "description": "Total number of conversions",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "message_analytics": {
                  "properties": {
                    "average_confidence_score": {
                      "description": "Average AI confidence score",
                      "type": "number"
                    },
                    "average_processing_time": {
                      "description": "Average processing time in seconds",
                      "type": "number"
                    },
                    "average_rating": {
                      "description": "Average user rating",
                      "type": "number"
                    },
                    "average_tokens_per_message": {
                      "description": "Average tokens per message",
                      "type": "number"
                    },
                    "rated_messages": {
                      "description": "Number of rated messages",
                      "type": "integer"
                    },
                    "total_messages": {
                      "description": "Total number of messages",
                      "type": "integer"
                    },
                    "total_tokens": {
                      "description": "Total tokens used",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "message_roles": {
                  "additionalProperties": {
                    "type": "integer"
                  },
                  "description": "Message role distribution",
                  "type": "object"
                },
                "top_conversations": {
                  "items": {
                    "properties": {
                      "id": {
                        "description": "Conversation ID",
                        "format": "uuid",
                        "type": "string"
                      },
                      "last_activity": {
                        "description": "Last activity timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "lead_email": {
                        "description": "Lead email",
                        "format": "email",
                        "type": "string"
                      },
                      "lead_name": {
                        "description": "Lead full name",
                        "type": "string"
                      },
                      "message_count": {
                        "description": "Number of messages",
                        "type": "integer"
                      },
                      "title": {
                        "description": "Conversation title",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Conversation not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get detailed analytics for a specific conversation",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/analytic/dashboard": {
      "get": {
        "description": "Retrieve comprehensive analytics including documents, conversations, leads, agents, databases, activity, security, and system metrics. Admins see company-wide data, regular users see personal data only.",
        "responses": {
          "200": {
            "description": "Dashboard analytics retrieved successfully",
            "schema": {
              "properties": {
                "activity_analytics": {
                  "properties": {
                    "login_timeline": {
                      "items": {
                        "properties": {
                          "date": {
                            "description": "Login date",
                            "format": "date",
                            "type": "string"
                          },
                          "unique_logins": {
                            "description": "Number of unique logins",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "session_analytics": {
                      "properties": {
                        "average_session_duration_minutes": {
                          "description": "Average session duration in minutes",
                          "type": "number"
                        },
                        "total_sessions": {
                          "description": "Total number of sessions",
                          "type": "integer"
                        },
                        "unique_ip_addresses": {
                          "description": "Number of unique IP addresses",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "agent_analytics": {
                  "properties": {
                    "agent_status_distribution": {
                      "additionalProperties": {
                        "type": "integer"
                      },
                      "description": "Agent status distribution",
                      "type": "object"
                    },
                    "top_performing_agents": {
                      "items": {
                        "properties": {
                          "average_rating": {
                            "description": "Average user rating",
                            "type": "number"
                          },
                          "name": {
                            "description": "Agent name",
                            "type": "string"
                          },
                          "status": {
                            "description": "Agent status",
                            "type": "string"
                          },
                          "total_conversations": {
                            "description": "Total conversations handled",
                            "type": "integer"
                          },
                          "total_messages": {
                            "description": "Total messages processed",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "company_analytics": {
                  "properties": {
                    "company_info": {
                      "properties": {
                        "address": {
                          "description": "Company address details",
                          "type": "object"
                        },
                        "created_at": {
                          "description": "Creation timestamp",
                          "format": "date-time",
                          "type": "string"
                        },
                        "email": {
                          "description": "Company email",
                          "format": "email",
                          "type": "string"
                        },
                        "id": {
                          "description": "Company unique identifier",
                          "format": "uuid",
                          "type": "string"
                        },
                        "is_active": {
                          "default": true,
                          "description": "Company active status",
                          "type": "boolean"
                        },
                        "is_verified": {
                          "default": false,
                          "description": "Company verification status",
                          "type": "boolean"
                        },
                        "logo": {
                          "description": "Company logo URL or file path",
                          "type": "string"
                        },
                        "name": {
                          "description": "Company name",
                          "type": "string"
                        },
                        "phone": {
                          "description": "Company phone number",
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "Update timestamp",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "user_growth_90days": {
                      "items": {
                        "properties": {
                          "date": {
                            "description": "Date",
                            "format": "date",
                            "type": "string"
                          },
                          "new_users": {
                            "description": "Number of new users",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "conversation_analytics": {
                  "properties": {
                    "activity_timeline": {
                      "items": {
                        "properties": {
                          "conversations": {
                            "description": "Number of active conversations",
                            "type": "integer"
                          },
                          "date": {
                            "description": "Activity date",
                            "format": "date",
                            "type": "string"
                          },
                          "messages": {
                            "description": "Number of messages",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "conversation_status": {
                      "additionalProperties": {
                        "type": "integer"
                      },
                      "description": "Conversation status distribution",
                      "type": "object"
                    },
                    "lead_engagement": {
                      "properties": {
                        "average_satisfaction": {
                          "description": "Average lead satisfaction score",
                          "type": "number"
                        },
                        "engaged_leads": {
                          "description": "Number of engaged leads",
                          "type": "integer"
                        },
                        "total_conversions": {
                          "description": "Total number of conversions",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "message_analytics": {
                      "properties": {
                        "average_confidence_score": {
                          "description": "Average AI confidence score",
                          "type": "number"
                        },
                        "average_processing_time": {
                          "description": "Average processing time in seconds",
                          "type": "number"
                        },
                        "average_rating": {
                          "description": "Average user rating",
                          "type": "number"
                        },
                        "average_tokens_per_message": {
                          "description": "Average tokens per message",
                          "type": "number"
                        },
                        "rated_messages": {
                          "description": "Number of rated messages",
                          "type": "integer"
                        },
                        "total_messages": {
                          "description": "Total number of messages",
                          "type": "integer"
                        },
                        "total_tokens": {
                          "description": "Total tokens used",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "message_roles": {
                      "additionalProperties": {
                        "type": "integer"
                      },
                      "description": "Message role distribution",
                      "type": "object"
                    },
                    "top_conversations": {
                      "items": {
                        "properties": {
                          "id": {
                            "description": "Conversation ID",
                            "format": "uuid",
                            "type": "string"
                          },
                          "last_activity": {
                            "description": "Last activity timestamp",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lead_email": {
                            "description": "Lead email",
                            "format": "email",
                            "type": "string"
                          },
                          "lead_name": {
                            "description": "Lead full name",
                            "type": "string"
                          },
                          "message_count": {
                            "description": "Number of messages",
                            "type": "integer"
                          },
                          "title": {
                            "description": "Conversation title",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "core_metrics": {
                  "properties": {
                    "connection_count": {
                      "description": "Total number of database connections",
                      "type": "integer"
                    },
                    "conversation_count": {
                      "description": "Total number of active conversations",
                      "type": "integer"
                    },
                    "document_count": {
                      "description": "Total number of documents",
                      "type": "integer"
                    },
                    "lead_count": {
                      "description": "Total number of leads",
                      "type": "integer"
                    },
                    "scope": {
                      "description": "Data scope",
                      "enum": [
                        "company",
                        "personal"
                      ],
                      "type": "string"
                    },
                    "total_users": {
                      "description": "Total number of users",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "database_analytics": {
                  "properties": {
                    "connection_status": {
                      "properties": {
                        "active": {
                          "description": "Number of active connections",
                          "type": "integer"
                        },
                        "inactive": {
                          "description": "Number of inactive connections",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "connection_types": {
                      "additionalProperties": {
                        "type": "integer"
                      },
                      "description": "Database connection type distribution",
                      "type": "object"
                    },
                    "recent_tests": {
                      "items": {
                        "properties": {
                          "connection_name": {
                            "description": "Database connection name",
                            "type": "string"
                          },
                          "database_type": {
                            "description": "Database type",
                            "type": "string"
                          },
                          "last_tested": {
                            "description": "Last test timestamp",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                          },
                          "test_result": {
                            "description": "Test result",
                            "type": "string"
                          },
                          "username": {
                            "description": "Username who performed the test",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "table_analytics": {
                      "properties": {
                        "total_rows": {
                          "description": "Total number of rows",
                          "type": "integer"
                        },
                        "total_size_bytes": {
                          "description": "Total size in bytes",
                          "type": "integer"
                        },
                        "total_tables": {
                          "description": "Total number of tables",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "document_analytics": {
                  "properties": {
                    "daily_uploads": {
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Number of uploads",
                            "type": "integer"
                          },
                          "date": {
                            "description": "Upload date",
                            "format": "date",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "document_types": {
                      "additionalProperties": {
                        "type": "integer"
                      },
                      "description": "Document type distribution",
                      "type": "object"
                    },
                    "processing_status": {
                      "additionalProperties": {
                        "type": "integer"
                      },
                      "description": "Document processing status distribution",
                      "type": "object"
                    },
                    "storage_analytics": {
                      "properties": {
                        "average_size_mb": {
                          "description": "Average file size in MB",
                          "type": "number"
                        },
                        "average_words": {
                          "description": "Average words per document",
                          "type": "number"
                        },
                        "largest_file_mb": {
                          "description": "Largest file size in MB",
                          "type": "number"
                        },
                        "total_size_bytes": {
                          "description": "Total storage in bytes",
                          "type": "integer"
                        },
                        "total_size_mb": {
                          "description": "Total storage in MB",
                          "type": "number"
                        },
                        "total_words": {
                          "description": "Total word count",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "top_users_by_documents": {
                      "items": {
                        "properties": {
                          "document_count": {
                            "description": "Number of documents",
                            "type": "integer"
                          },
                          "full_name": {
                            "description": "Full name",
                            "type": "string"
                          },
                          "username": {
                            "description": "Username",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "generated_at": {
                  "description": "Analytics generation timestamp",
                  "format": "date-time",
                  "type": "string"
                },
                "lead_analytics": {
                  "properties": {
                    "consent_analytics": {
                      "properties": {
                        "data_consent_rate": {
                          "description": "Data processing consent rate percentage",
                          "type": "number"
                        },
                        "marketing_consent_rate": {
                          "description": "Marketing consent rate percentage",
                          "type": "number"
                        },
                        "total_leads": {
                          "description": "Total number of leads",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "daily_new_leads": {
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Number of new leads",
                            "type": "integer"
                          },
                          "date": {
                            "description": "Date",
                            "format": "date",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "lead_sources": {
                      "additionalProperties": {
                        "type": "integer"
                      },
                      "description": "Lead source distribution",
                      "type": "object"
                    },
                    "lead_status_distribution": {
                      "additionalProperties": {
                        "type": "integer"
                      },
                      "description": "Lead status distribution",
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "performance_analytics": {
                  "properties": {
                    "document_processing": {
                      "properties": {
                        "average_processing_time_seconds": {
                          "description": "Average processing time in seconds",
                          "type": "number"
                        },
                        "failed_documents": {
                          "description": "Number of failed documents",
                          "type": "integer"
                        },
                        "success_rate": {
                          "description": "Success rate percentage",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "model_performance": {
                      "items": {
                        "properties": {
                          "average_confidence": {
                            "description": "Average confidence score",
                            "type": "number"
                          },
                          "average_processing_time": {
                            "description": "Average processing time",
                            "type": "number"
                          },
                          "message_count": {
                            "description": "Number of messages processed",
                            "type": "integer"
                          },
                          "model": {
                            "description": "Model name",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "security_analytics": {
                  "properties": {
                    "recent_audit_events": {
                      "items": {
                        "properties": {
                          "category": {
                            "description": "Event category",
                            "type": "string"
                          },
                          "event_type": {
                            "description": "Event type",
                            "type": "string"
                          },
                          "risk_level": {
                            "description": "Risk level",
                            "enum": [
                              "low",
                              "medium",
                              "high",
                              "critical"
                            ],
                            "type": "string"
                          },
                          "timestamp": {
                            "description": "Event timestamp",
                            "format": "date-time",
                            "type": "string"
                          },
                          "username": {
                            "description": "Username or 'System'",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "risk_distribution_7days": {
                      "description": "Risk level distribution for last 7 days",
                      "properties": {
                        "critical": {
                          "type": "integer"
                        },
                        "high": {
                          "type": "integer"
                        },
                        "low": {
                          "type": "integer"
                        },
                        "medium": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "user_security_status": {
                      "properties": {
                        "locked_users": {
                          "description": "Number of locked users",
                          "type": "integer"
                        },
                        "total_users": {
                          "description": "Total number of users",
                          "type": "integer"
                        },
                        "two_factor_enabled": {
                          "description": "Number of users with 2FA enabled",
                          "type": "integer"
                        },
                        "verified_users": {
                          "description": "Number of verified users",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "system_metrics": {
                  "properties": {
                    "system_health": {
                      "items": {
                        "properties": {
                          "average_24h": {
                            "description": "24-hour average value",
                            "type": "number"
                          },
                          "max_24h": {
                            "description": "24-hour maximum value",
                            "type": "number"
                          },
                          "metric_name": {
                            "description": "Metric name",
                            "type": "string"
                          },
                          "metric_type": {
                            "description": "Metric type",
                            "type": "string"
                          },
                          "min_24h": {
                            "description": "24-hour minimum value",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "user_context": {
                  "properties": {
                    "company_id": {
                      "description": "Company ID",
                      "format": "uuid",
                      "nullable": true,
                      "type": "string"
                    },
                    "email_verified": {
                      "description": "Email verification status",
                      "type": "boolean"
                    },
                    "is_admin": {
                      "description": "Whether user has admin privileges",
                      "type": "boolean"
                    },
                    "role": {
                      "description": "User role",
                      "enum": [
                        "admin",
                        "super_admin",
                        "user"
                      ],
                      "type": "string"
                    },
                    "two_factor_enabled": {
                      "description": "2FA enablement status",
                      "type": "boolean"
                    },
                    "user_id": {
                      "description": "User ID",
                      "format": "uuid",
                      "type": "string"
                    },
                    "username": {
                      "description": "Username",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "user_management": {
                  "properties": {
                    "active_users_24h": {
                      "description": "Active users in last 24 hours",
                      "type": "integer"
                    },
                    "role_distribution": {
                      "additionalProperties": {
                        "type": "integer"
                      },
                      "description": "User role distribution",
                      "type": "object"
                    },
                    "user_status_distribution": {
                      "additionalProperties": {
                        "type": "integer"
                      },
                      "description": "User status distribution",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Not allowed - User access required",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Enhanced dashboard analytics with company-wide data for admins and leads integration",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/analytic/export": {
      "post": {
        "description": "Export analytics data (conversations, leads, agents, or usage logs) in JSON or CSV format for a specified date range.",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "export_agents": {
                  "summary": "Export agents data",
                  "value": {
                    "format": "json",
                    "type": "agents"
                  }
                },
                "export_conversations": {
                  "summary": "Export conversations data",
                  "value": {
                    "end_date": "2024-01-31T23:59:59Z",
                    "format": "json",
                    "start_date": "2024-01-01T00:00:00Z",
                    "type": "conversations"
                  }
                },
                "export_leads_csv": {
                  "summary": "Export leads data as CSV",
                  "value": {
                    "end_date": "2024-01-31T23:59:59Z",
                    "format": "csv",
                    "start_date": "2024-01-01T00:00:00Z",
                    "type": "leads"
                  }
                },
                "export_usage_logs": {
                  "summary": "Export API usage logs",
                  "value": {
                    "end_date": "2024-01-31T23:59:59Z",
                    "format": "json",
                    "start_date": "2024-01-01T00:00:00Z",
                    "type": "usage"
                  }
                }
              },
              "schema": {
                "properties": {
                  "end_date": {
                    "description": "End date for data export (ISO 8601 format)",
                    "format": "date-time",
                    "type": "string"
                  },
                  "format": {
                    "default": "json",
                    "description": "Export format",
                    "enum": [
                      "json",
                      "csv"
                    ],
                    "type": "string"
                  },
                  "start_date": {
                    "description": "Start date for data export (ISO 8601 format)",
                    "format": "date-time",
                    "type": "string"
                  },
                  "type": {
                    "default": "conversations",
                    "description": "Type of data to export",
                    "enum": [
                      "conversations",
                      "leads",
                      "agents",
                      "usage"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Analytics data exported successfully",
            "schema": {
              "properties": {
                "agents": {
                  "description": "Array of agent objects (when type=agents)",
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                },
                "conversations": {
                  "description": "Array of conversation objects (when type=conversations)",
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                },
                "count": {
                  "description": "Total number of records exported",
                  "type": "integer"
                },
                "leads": {
                  "description": "Array of lead objects (when type=leads)",
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                },
                "metadata": {
                  "description": "Export metadata",
                  "properties": {
                    "company_id": {
                      "description": "Company ID",
                      "type": "string"
                    },
                    "date_range": {
                      "properties": {
                        "end_date": {
                          "description": "End date of export",
                          "format": "date-time",
                          "type": "string"
                        },
                        "start_date": {
                          "description": "Start date of export",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "export_type": {
                      "description": "Type of data exported",
                      "type": "string"
                    },
                    "exported_at": {
                      "description": "Export timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "format": {
                      "description": "Export format used",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "usage_logs": {
                  "description": "Array of usage log objects (when type=usage)",
                  "items": {
                    "properties": {
                      "created_at": {
                        "description": "Log creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "endpoint": {
                        "description": "API endpoint",
                        "type": "string"
                      },
                      "id": {
                        "description": "Usage log ID",
                        "type": "string"
                      },
                      "ip_address": {
                        "description": "Client IP address",
                        "type": "string"
                      },
                      "method": {
                        "description": "HTTP method",
                        "type": "string"
                      },
                      "response_time_ms": {
                        "description": "Response time in milliseconds",
                        "type": "number"
                      },
                      "status_code": {
                        "description": "HTTP status code",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export analytics data in various formats",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/analytic/leads": {
      "get": {
        "description": "Retrieve comprehensive lead analytics including conversion funnel, status distribution, source analysis, engagement metrics, and performance trends.",
        "parameters": [
          {
            "description": "Start date for analytics (ISO 8601 format)",
            "in": "query",
            "name": "start_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End date for analytics (ISO 8601 format)",
            "in": "query",
            "name": "end_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead analytics retrieved successfully",
            "schema": {
              "properties": {
                "consent_analytics": {
                  "properties": {
                    "data_consent_rate": {
                      "description": "Data processing consent rate percentage",
                      "type": "number"
                    },
                    "marketing_consent_rate": {
                      "description": "Marketing consent rate percentage",
                      "type": "number"
                    },
                    "total_leads": {
                      "description": "Total number of leads",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "daily_new_leads": {
                  "items": {
                    "properties": {
                      "count": {
                        "description": "Number of new leads",
                        "type": "integer"
                      },
                      "date": {
                        "description": "Date",
                        "format": "date",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "lead_sources": {
                  "additionalProperties": {
                    "type": "integer"
                  },
                  "description": "Lead source distribution",
                  "type": "object"
                },
                "lead_status_distribution": {
                  "additionalProperties": {
                    "type": "integer"
                  },
                  "description": "Lead status distribution",
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid date range parameters",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get lead conversion analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/analytic/usage": {
      "get": {
        "description": "Retrieve comprehensive platform usage analytics including API usage, agent performance, token consumption, storage metrics, and daily trends.",
        "parameters": [
          {
            "description": "Start date for metrics (ISO 8601 format)",
            "in": "query",
            "name": "start_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "End date for metrics (ISO 8601 format)",
            "in": "query",
            "name": "end_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usage metrics retrieved successfully",
            "schema": {
              "properties": {
                "agent_usage": {
                  "properties": {
                    "active_agents": {
                      "description": "Number of active agents",
                      "type": "integer"
                    },
                    "avg_agent_rating": {
                      "description": "Average agent rating",
                      "type": "number"
                    },
                    "total_agents": {
                      "description": "Total number of agents",
                      "type": "integer"
                    },
                    "total_conversations": {
                      "description": "Total conversations handled",
                      "type": "integer"
                    },
                    "total_messages": {
                      "description": "Total messages processed",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "api_usage": {
                  "properties": {
                    "active_api_keys": {
                      "description": "Number of active API keys",
                      "type": "integer"
                    },
                    "avg_response_time_ms": {
                      "description": "Average response time in milliseconds",
                      "type": "number"
                    },
                    "error_count": {
                      "description": "Number of error requests",
                      "type": "integer"
                    },
                    "error_rate_percent": {
                      "description": "Error rate percentage",
                      "type": "number"
                    },
                    "success_count": {
                      "description": "Number of successful requests",
                      "type": "integer"
                    },
                    "total_api_calls": {
                      "description": "Total API calls made",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "daily_usage_trend": {
                  "items": {
                    "properties": {
                      "api_calls": {
                        "description": "Number of API calls",
                        "type": "integer"
                      },
                      "date": {
                        "description": "Date",
                        "format": "date",
                        "type": "string"
                      },
                      "errors": {
                        "description": "Number of errors",
                        "type": "integer"
                      },
                      "success_rate_percent": {
                        "description": "Success rate percentage",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "date_range": {
                  "properties": {
                    "end_date": {
                      "description": "End date of analysis",
                      "format": "date-time",
                      "type": "string"
                    },
                    "start_date": {
                      "description": "Start date of analysis",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "endpoint_usage": {
                  "items": {
                    "properties": {
                      "avg_response_time_ms": {
                        "description": "Average response time in milliseconds",
                        "type": "number"
                      },
                      "call_count": {
                        "description": "Number of calls to endpoint",
                        "type": "integer"
                      },
                      "endpoint": {
                        "description": "API endpoint",
                        "type": "string"
                      },
                      "method": {
                        "description": "HTTP method",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "storage_usage": {
                  "properties": {
                    "total_content_size_bytes": {
                      "description": "Total content size in bytes",
                      "type": "integer"
                    },
                    "total_conversations": {
                      "description": "Total stored conversations",
                      "type": "integer"
                    },
                    "total_messages": {
                      "description": "Total stored messages",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "token_usage": {
                  "properties": {
                    "avg_tokens_per_message": {
                      "description": "Average tokens per message",
                      "type": "number"
                    },
                    "total_messages_processed": {
                      "description": "Total messages processed",
                      "type": "integer"
                    },
                    "total_tokens": {
                      "description": "Total tokens consumed",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "top_client_ips": {
                  "items": {
                    "properties": {
                      "ip_address": {
                        "description": "Client IP address",
                        "type": "string"
                      },
                      "request_count": {
                        "description": "Number of requests from IP",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid date range parameters",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get platform usage metrics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/api-key-performance": {
      "get": {
        "description": "Retrieve detailed performance metrics for individual API keys including usage counts, success rates, and response times. Requires API key authentication with 'read' or 'admin' scope.",
        "parameters": [
          {
            "description": "Number of days to look back",
            "example": 30,
            "in": "query",
            "name": "days",
            "schema": {
              "default": 30,
              "maximum": 365,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of API keys to return",
            "example": 20,
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 20,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API key performance metrics retrieved successfully",
            "schema": {
              "properties": {
                "data": {
                  "properties": {
                    "api_keys": {
                      "items": {
                        "properties": {
                          "api_key_id": {
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "format": "uuid",
                            "type": "string"
                          },
                          "avg_response_time": {
                            "example": 298.4,
                            "format": "float",
                            "type": "number"
                          },
                          "created_at": {
                            "example": "2025-08-01T08:00:00.000Z",
                            "format": "date-time",
                            "type": "string"
                          },
                          "key_prefix": {
                            "example": "ak_AbC12",
                            "type": "string"
                          },
                          "last_used_at": {
                            "example": "2025-09-06T10:30:00.000Z",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                          },
                          "name": {
                            "example": "Production API Key",
                            "type": "string"
                          },
                          "status": {
                            "enum": [
                              "active",
                              "inactive",
                              "revoked",
                              "expired"
                            ],
                            "example": "active",
                            "type": "string"
                          },
                          "success_rate": {
                            "example": 97.8,
                            "format": "float",
                            "type": "number"
                          },
                          "total_requests": {
                            "example": 8750,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "period_days": {
                      "example": 30,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "success": {
                  "example": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - API key authentication required",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get performance metrics for individual API keys",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/auth/api-keys": {
      "get": {
        "description": "Retrieve all active API keys for the authenticated user. Requires JWT authentication.",
        "responses": {
          "200": {
            "description": "API keys retrieved successfully",
            "schema": {
              "properties": {
                "api_keys": {
                  "items": {
                    "properties": {
                      "created_at": {
                        "example": "2025-09-01T08:00:00.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "expires_at": {
                        "example": "2025-12-06T00:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      },
                      "id": {
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "format": "uuid",
                        "type": "string"
                      },
                      "key_prefix": {
                        "description": "First 8 characters of API key",
                        "example": "ak_AbC12",
                        "type": "string"
                      },
                      "last_used_at": {
                        "example": "2025-09-06T10:30:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      },
                      "name": {
                        "example": "Production API Key",
                        "type": "string"
                      },
                      "permissions": {
                        "example": {},
                        "type": "object"
                      },
                      "rate_limit_per_day": {
                        "example": 10000,
                        "type": "integer"
                      },
                      "rate_limit_per_hour": {
                        "example": 1000,
                        "type": "integer"
                      },
                      "scopes": {
                        "example": [
                          "read",
                          "write"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "enum": [
                          "active",
                          "inactive",
                          "revoked",
                          "expired"
                        ],
                        "example": "active",
                        "type": "string"
                      },
                      "updated_at": {
                        "example": "2025-09-06T10:30:00.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "usage_count": {
                        "example": 1250,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List user's API keys",
        "tags": [
          "API Keys"
        ]
      },
      "post": {
        "description": "Create a new API key with specified scopes and permissions. Requires JWT authentication.",
        "parameters": [
          {
            "description": "API key creation information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "expires_in_days": {
                  "description": "Number of days until key expires (null for no expiration)",
                  "example": 90,
                  "maximum": 365,
                  "minimum": 1,
                  "type": "integer"
                },
                "name": {
                  "description": "Human-readable name for the API key",
                  "example": "Production API Key",
                  "maxLength": 100,
                  "type": "string"
                },
                "permissions": {
                  "default": {},
                  "description": "Detailed permissions configuration",
                  "example": {
                    "can_manage_users": true,
                    "can_view_analytics": true
                  },
                  "type": "object"
                },
                "scopes": {
                  "default": [
                    "read",
                    "write"
                  ],
                  "description": "List of permitted scopes",
                  "example": [
                    "read",
                    "write",
                    "update"
                  ],
                  "items": {
                    "enum": [
                      "read",
                      "write",
                      "update",
                      "delete",
                      "admin",
                      "full_access"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "API key created successfully",
            "schema": {
              "properties": {
                "api_key": {
                  "description": "The generated API key (store securely)",
                  "example": "ak_AbC123XyZ789...",
                  "type": "string"
                },
                "api_secret": {
                  "description": "The API secret (store securely - cannot be retrieved later)",
                  "example": "as_SecretKey123...",
                  "type": "string"
                },
                "details": {
                  "properties": {
                    "created_at": {
                      "example": "2025-09-01T08:00:00.000Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "expires_at": {
                      "example": "2025-12-06T00:00:00.000Z",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "id": {
                      "example": "123e4567-e89b-12d3-a456-426614174000",
                      "format": "uuid",
                      "type": "string"
                    },
                    "key_prefix": {
                      "description": "First 8 characters of API key",
                      "example": "ak_AbC12",
                      "type": "string"
                    },
                    "last_used_at": {
                      "example": "2025-09-06T10:30:00.000Z",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "name": {
                      "example": "Production API Key",
                      "type": "string"
                    },
                    "permissions": {
                      "example": {},
                      "type": "object"
                    },
                    "rate_limit_per_day": {
                      "example": 10000,
                      "type": "integer"
                    },
                    "rate_limit_per_hour": {
                      "example": 1000,
                      "type": "integer"
                    },
                    "scopes": {
                      "example": [
                        "read",
                        "write"
                      ],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "status": {
                      "enum": [
                        "active",
                        "inactive",
                        "revoked",
                        "expired"
                      ],
                      "example": "active",
                      "type": "string"
                    },
                    "updated_at": {
                      "example": "2025-09-06T10:30:00.000Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "usage_count": {
                      "example": 1250,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "message": {
                  "example": "API key created successfully. Store the secret securely - it cannot be retrieved later.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create new API key",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api/v1/auth/api-keys/{api_key_id}": {
      "delete": {
        "description": "Revoke an existing API key. Once revoked, the API key cannot be used for authentication. Requires JWT authentication.",
        "parameters": [
          {
            "description": "API Key UUID",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "in": "path",
            "name": "api_key_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API key revoked successfully",
            "schema": {
              "properties": {
                "message": {
                  "example": "API key revoked successfully",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "API key not found",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Revoke an API key",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "description": "Authenticate user with email and password. The login is processed asynchronously and issues tokens upon completion.",
        "parameters": [
          {
            "description": "Login credentials",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "email": {
                  "description": "User's email address",
                  "example": "user@example.com",
                  "format": "email",
                  "type": "string"
                },
                "password": {
                  "description": "User password",
                  "example": "SecurePass123!",
                  "type": "string"
                }
              },
              "required": [
                "email",
                "password"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Login request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields",
            "examples": {
              "application/json": {
                "error": "Email and password required"
              }
            },
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "examples": {
              "application/json": {
                "error": "Invalid credentials"
              }
            },
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "423": {
            "description": "Locked - Account is locked",
            "examples": {
              "application/json": {
                "error": "Account is locked"
              }
            },
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "User login",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "description": "Logout user and revoke current session asynchronously. Requires valid JWT token.",
        "parameters": [
          {
            "description": "Bearer token for authentication",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Logout request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "User logout",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "description": "Generate a new access token using a valid refresh token. The refresh operation runs asynchronously.",
        "responses": {
          "202": {
            "description": "Token refresh request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "401": {
            "description": "Invalid or expired refresh token",
            "schema": {
              "properties": {
                "error": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "User account is locked or inactive",
            "schema": {
              "properties": {
                "error": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Refresh JWT access token using refresh token",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "description": "Create a new user account with company association. The registration runs asynchronously and issues tokens upon completion.",
        "parameters": [
          {
            "description": "User registration data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "company_id": {
                  "description": "Company ID for the user",
                  "example": "123e4567-e89b-12d3-a456-426614174000",
                  "format": "uuid",
                  "type": "string"
                },
                "email": {
                  "description": "User's email address",
                  "example": "user@example.com",
                  "format": "email",
                  "type": "string"
                },
                "first_name": {
                  "description": "User's first name",
                  "example": "John",
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
                },
                "last_name": {
                  "description": "User's last name",
                  "example": "Doe",
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
                },
                "password": {
                  "description": "User password (minimum 8 characters)",
                  "example": "SecurePass123!",
                  "minLength": 8,
                  "type": "string"
                },
                "username": {
                  "description": "Unique username",
                  "example": "john_doe",
                  "maxLength": 50,
                  "minLength": 3,
                  "type": "string"
                }
              },
              "required": [
                "company_id",
                "email",
                "username",
                "password",
                "first_name",
                "last_name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "User registration request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Validation failed or user already exists",
            "examples": {
              "application/json": {
                "error": "Email already registered"
              }
            },
            "schema": {
              "properties": {
                "error": {
                  "description": "Error message",
                  "example": "Validation failed",
                  "type": "string"
                },
                "errors": {
                  "description": "Field-specific validation errors",
                  "example": {
                    "email": [
                      "Invalid email format"
                    ],
                    "password": [
                      "Password too short"
                    ]
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "User registration",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/user": {
      "post": {
        "description": "Create a new user account within the same company asynchronously. Requires admin privileges.",
        "parameters": [
          {
            "description": "User data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "email": {
                  "description": "User's email address",
                  "example": "newuser@example.com",
                  "format": "email",
                  "type": "string"
                },
                "first_name": {
                  "description": "User's first name",
                  "example": "Jane",
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
                },
                "last_name": {
                  "description": "User's last name",
                  "example": "Smith",
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
                },
                "password": {
                  "description": "User password (minimum 8 characters)",
                  "example": "SecurePass123!",
                  "minLength": 8,
                  "type": "string"
                },
                "username": {
                  "description": "Unique username",
                  "example": "jane_smith",
                  "maxLength": 50,
                  "minLength": 3,
                  "type": "string"
                }
              },
              "required": [
                "email",
                "username",
                "password",
                "first_name",
                "last_name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "User creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "properties": {
                "error": {
                  "description": "Error message",
                  "example": "Validation failed",
                  "type": "string"
                },
                "errors": {
                  "description": "Field-specific validation errors",
                  "example": {
                    "email": [
                      "Invalid email format"
                    ],
                    "password": [
                      "Password too short"
                    ]
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "application/json": {
                "error": "Not allowed"
              }
            },
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add New User",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/user/me": {
      "get": {
        "description": "Fetch details of the currently authenticated user, including their access token, refresh token, and company info. Requires a valid JWT token.",
        "responses": {
          "200": {
            "description": "User details retrieved successfully",
            "schema": {
              "properties": {
                "access_token": {
                  "description": "JWT access token for the user",
                  "type": "string"
                },
                "company": {
                  "description": "Company details",
                  "properties": {
                    "address": {
                      "description": "Company address details",
                      "properties": {
                        "city": {
                          "description": "City",
                          "type": "string"
                        },
                        "country": {
                          "description": "Country",
                          "type": "string"
                        },
                        "postal_code": {
                          "description": "Postal/ZIP code",
                          "type": "string"
                        },
                        "state": {
                          "description": "State",
                          "type": "string"
                        },
                        "street": {
                          "description": "Street address",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "created_at": {
                      "description": "Timestamp of company creation",
                      "type": "string"
                    },
                    "email": {
                      "description": "Company email address",
                      "type": "string"
                    },
                    "id": {
                      "description": "Company ID",
                      "type": "string"
                    },
                    "is_active": {
                      "description": "Whether the company is active",
                      "type": "boolean"
                    },
                    "is_verified": {
                      "description": "Whether the company is verified",
                      "type": "boolean"
                    },
                    "logo": {
                      "description": "Company logo URL",
                      "type": "string"
                    },
                    "name": {
                      "description": "Company name",
                      "type": "string"
                    },
                    "phone": {
                      "description": "Company phone number",
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "Timestamp of last company update",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "refresh_token": {
                  "description": "JWT refresh token for the user",
                  "type": "string"
                },
                "user": {
                  "description": "User details",
                  "properties": {
                    "created_at": {
                      "description": "Timestamp of account creation",
                      "type": "string"
                    },
                    "email": {
                      "description": "User email address",
                      "type": "string"
                    },
                    "email_verified": {
                      "description": "Whether the user's email is verified",
                      "type": "boolean"
                    },
                    "first_name": {
                      "description": "User's first name",
                      "type": "string"
                    },
                    "id": {
                      "description": "User ID",
                      "type": "string"
                    },
                    "last_login": {
                      "description": "Timestamp of the last login",
                      "type": "string"
                    },
                    "last_name": {
                      "description": "User's last name",
                      "type": "string"
                    },
                    "login_attempts": {
                      "description": "Number of failed login attempts",
                      "type": "integer"
                    },
                    "role": {
                      "description": "User role",
                      "type": "string"
                    },
                    "status": {
                      "description": "User status",
                      "type": "string"
                    },
                    "two_factor_enabled": {
                      "description": "Whether the user has two-factor authentication enabled",
                      "type": "boolean"
                    },
                    "updated_at": {
                      "description": "Timestamp of last account update",
                      "type": "string"
                    },
                    "username": {
                      "description": "Username of the user",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized: Invalid or missing JWT token",
            "schema": {
              "properties": {
                "error": {
                  "description": "Error message",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "423": {
            "description": "Account locked",
            "schema": {
              "properties": {
                "error": {
                  "description": "Account is locked message",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "error": {
                  "description": "Error message",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user details",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/validate": {
      "get": {
        "description": "Validate the current API key credentials and return associated user and company information. Requires JWT authentication.",
        "responses": {
          "200": {
            "description": "Credentials validated successfully",
            "schema": {
              "properties": {
                "api_key_info": {
                  "properties": {
                    "created_at": {
                      "example": "2025-09-01T08:00:00.000Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "expires_at": {
                      "example": "2025-12-06T00:00:00.000Z",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "id": {
                      "example": "123e4567-e89b-12d3-a456-426614174000",
                      "format": "uuid",
                      "type": "string"
                    },
                    "key_prefix": {
                      "description": "First 8 characters of API key",
                      "example": "ak_AbC12",
                      "type": "string"
                    },
                    "last_used_at": {
                      "example": "2025-09-06T10:30:00.000Z",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "name": {
                      "example": "Production API Key",
                      "type": "string"
                    },
                    "permissions": {
                      "example": {},
                      "type": "object"
                    },
                    "rate_limit_per_day": {
                      "example": 10000,
                      "type": "integer"
                    },
                    "rate_limit_per_hour": {
                      "example": 1000,
                      "type": "integer"
                    },
                    "scopes": {
                      "example": [
                        "read",
                        "write"
                      ],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "status": {
                      "enum": [
                        "active",
                        "inactive",
                        "revoked",
                        "expired"
                      ],
                      "example": "active",
                      "type": "string"
                    },
                    "updated_at": {
                      "example": "2025-09-06T10:30:00.000Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "usage_count": {
                      "example": 1250,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "company": {
                  "description": "Company information (null if no company)",
                  "example": {
                    "id": "789e1234-e89b-12d3-a456-426614174002",
                    "name": "Acme Corp",
                    "plan": "enterprise"
                  },
                  "nullable": true,
                  "type": "object"
                },
                "user": {
                  "description": "User information",
                  "example": {
                    "email": "user@example.com",
                    "id": "456e7890-e89b-12d3-a456-426614174001",
                    "name": "John Doe"
                  },
                  "type": "object"
                },
                "valid": {
                  "example": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired credentials",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Validate current API credentials",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api/v1/city": {
      "post": {
        "description": "Create a new city within a state asynchronously.",
        "parameters": [
          {
            "description": "City information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "description": "City name",
                  "example": "Los Angeles",
                  "maxLength": 100,
                  "type": "string"
                },
                "postal_code_prefix": {
                  "description": "Postal code prefix",
                  "example": "90",
                  "maxLength": 10,
                  "type": "string"
                },
                "state_id": {
                  "description": "State identifier",
                  "example": 1,
                  "type": "integer"
                }
              },
              "required": [
                "name",
                "state_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "City creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "State not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict - City already exists in this state",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new city",
        "tags": [
          "Cities"
        ]
      }
    },
    "/api/v1/city/state/{state_id}": {
      "get": {
        "description": "Get all cities within a specific state.",
        "parameters": [
          {
            "description": "State ID",
            "in": "path",
            "name": "state_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Cities retrieved successfully",
            "schema": {
              "items": {
                "properties": {
                  "country": {
                    "description": "Country information",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "created_at": {
                    "description": "Creation timestamp",
                    "format": "date-time",
                    "type": "string"
                  },
                  "id": {
                    "description": "City unique identifier",
                    "type": "integer"
                  },
                  "name": {
                    "description": "City name",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "postal_code_prefix": {
                    "description": "Postal code prefix",
                    "maxLength": 10,
                    "type": "string"
                  },
                  "state": {
                    "description": "State information",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "updated_at": {
                    "description": "Update timestamp",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "List cities by state",
        "tags": [
          "Cities"
        ]
      }
    },
    "/api/v1/city/{city_id}": {
      "get": {
        "description": "Get detailed information about a specific city.",
        "parameters": [
          {
            "description": "City ID",
            "in": "path",
            "name": "city_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "City details retrieved successfully",
            "schema": {
              "properties": {
                "country": {
                  "description": "Country information",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "created_at": {
                  "description": "Creation timestamp",
                  "format": "date-time",
                  "type": "string"
                },
                "id": {
                  "description": "City unique identifier",
                  "type": "integer"
                },
                "name": {
                  "description": "City name",
                  "maxLength": 100,
                  "type": "string"
                },
                "postal_code_prefix": {
                  "description": "Postal code prefix",
                  "maxLength": 10,
                  "type": "string"
                },
                "state": {
                  "description": "State information",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "updated_at": {
                  "description": "Update timestamp",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "City not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Get city details",
        "tags": [
          "Cities"
        ]
      },
      "patch": {
        "description": "Update city information asynchronously.",
        "parameters": [
          {
            "description": "City ID",
            "in": "path",
            "name": "city_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Updated city information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "description": "City name",
                  "example": "Los Angeles",
                  "maxLength": 100,
                  "type": "string"
                },
                "postal_code_prefix": {
                  "description": "Postal code prefix",
                  "example": "90",
                  "maxLength": 10,
                  "type": "string"
                },
                "state_id": {
                  "description": "State identifier",
                  "example": 1,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "City update request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "City or State not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict - City name already exists in this state",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update a city",
        "tags": [
          "Cities"
        ]
      }
    },
    "/api/v1/company": {
      "get": {
        "description": "Retrieve a specific company by its ID.",
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "company_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Company retrieved successfully",
            "schema": {
              "properties": {
                "address": {
                  "description": "Company address details",
                  "type": "object"
                },
                "created_at": {
                  "description": "Creation timestamp",
                  "format": "date-time",
                  "type": "string"
                },
                "email": {
                  "description": "Company email",
                  "format": "email",
                  "type": "string"
                },
                "id": {
                  "description": "Company unique identifier",
                  "format": "uuid",
                  "type": "string"
                },
                "is_active": {
                  "default": true,
                  "description": "Company active status",
                  "type": "boolean"
                },
                "is_verified": {
                  "default": false,
                  "description": "Company verification status",
                  "type": "boolean"
                },
                "logo": {
                  "description": "Company logo URL or file path",
                  "type": "string"
                },
                "name": {
                  "description": "Company name",
                  "type": "string"
                },
                "phone": {
                  "description": "Company phone number",
                  "type": "string"
                },
                "updated_at": {
                  "description": "Update timestamp",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Company not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a specific company by ID.",
        "tags": [
          "Companies"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "description": "Add a new company with optional logo image upload. The creation runs asynchronously and supports both JSON and multipart form data.",
        "parameters": [
          {
            "description": "Company details (for JSON requests)",
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "address_id": {
                  "description": "Address ID",
                  "type": "integer"
                },
                "email": {
                  "description": "Company email",
                  "example": "contact@acme.com",
                  "format": "email",
                  "type": "string"
                },
                "logo": {
                  "description": "Logo file or URL",
                  "type": "string"
                },
                "name": {
                  "description": "Company name",
                  "example": "Acme Corporation",
                  "type": "string"
                },
                "phone": {
                  "description": "Company phone number",
                  "example": "+1-555-123-4567",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "email"
              ],
              "type": "object"
            }
          },
          {
            "description": "Company name (for form requests)",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Company email (for form requests)",
            "format": "email",
            "in": "formData",
            "name": "email",
            "required": true,
            "type": "string"
          },
          {
            "description": "Company phone (for form requests)",
            "in": "formData",
            "name": "phone",
            "type": "string"
          },
          {
            "description": "Address ID (for form requests)",
            "in": "formData",
            "name": "address_id",
            "type": "integer"
          },
          {
            "description": "Company logo file (for form requests)",
            "in": "formData",
            "name": "logo",
            "type": "file"
          }
        ],
        "responses": {
          "202": {
            "description": "Company creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields or invalid file",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Add a new company with optional logo image upload.",
        "tags": [
          "Companies"
        ]
      }
    },
    "/api/v1/company/statistics": {
      "get": {
        "description": "Get lead statistics for a specific company.",
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "company_id",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Number of days for statistics",
            "in": "query",
            "name": "days",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "schema": {
              "properties": {
                "statistics": {
                  "properties": {
                    "active_conversations": {
                      "description": "Active conversations count",
                      "type": "integer"
                    },
                    "conversion_rate": {
                      "description": "Conversion rate percentage",
                      "type": "number"
                    },
                    "period_days": {
                      "description": "Statistics period in days",
                      "type": "integer"
                    },
                    "qualified_leads": {
                      "description": "Qualified leads count",
                      "type": "integer"
                    },
                    "total_leads": {
                      "description": "Total leads count",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "success": {
                  "description": "Request success status",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Company not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get lead statistics for a company",
        "tags": [
          "Companies"
        ]
      }
    },
    "/api/v1/company/{company_id}": {
      "patch": {
        "description": "Partially update an existing company. Same functionality as PUT but semantically correct for partial updates.",
        "parameters": [
          {
            "description": "Company unique identifier",
            "format": "uuid",
            "in": "path",
            "name": "company_id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "phone": "+1-555-111-2222"
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "address_id": {
                    "description": "Address ID reference",
                    "example": 123,
                    "type": "integer"
                  },
                  "email": {
                    "description": "Company email",
                    "example": "updated@acme.com",
                    "format": "email",
                    "type": "string"
                  },
                  "logo": {
                    "description": "Logo file path or URL",
                    "example": "https://example.com/logo.png",
                    "type": "string"
                  },
                  "name": {
                    "description": "Company name",
                    "example": "Acme Corporation Updated",
                    "type": "string"
                  },
                  "phone": {
                    "description": "Company phone number",
                    "example": "+1-555-987-6543",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Company update request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - User not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found - Company not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Partially update a company (same logic as PUT but semantically correct for partial updates)",
        "tags": [
          "Companies"
        ]
      },
      "put": {
        "description": "Update an existing company with provided fields. All fields are optional.",
        "parameters": [
          {
            "description": "Company unique identifier",
            "format": "uuid",
            "in": "path",
            "name": "company_id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "email": "newemail@acme.com",
                "name": "Acme Corporation - Updated",
                "phone": "+1-555-999-8888"
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "address_id": {
                    "description": "Address ID reference",
                    "example": 123,
                    "type": "integer"
                  },
                  "email": {
                    "description": "Company email",
                    "example": "updated@acme.com",
                    "format": "email",
                    "type": "string"
                  },
                  "logo": {
                    "description": "Logo file path or URL",
                    "example": "https://example.com/logo.png",
                    "type": "string"
                  },
                  "name": {
                    "description": "Company name",
                    "example": "Acme Corporation Updated",
                    "type": "string"
                  },
                  "phone": {
                    "description": "Company phone number",
                    "example": "+1-555-987-6543",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Company update request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - User not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found - Company not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update an existing company",
        "tags": [
          "Companies"
        ]
      }
    },
    "/api/v1/company/{company_id}/statistics": {
      "get": {
        "description": "Get lead statistics for a specific company.",
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "company_id",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Number of days for statistics",
            "in": "query",
            "name": "days",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "schema": {
              "properties": {
                "statistics": {
                  "properties": {
                    "active_conversations": {
                      "description": "Active conversations count",
                      "type": "integer"
                    },
                    "conversion_rate": {
                      "description": "Conversion rate percentage",
                      "type": "number"
                    },
                    "period_days": {
                      "description": "Statistics period in days",
                      "type": "integer"
                    },
                    "qualified_leads": {
                      "description": "Qualified leads count",
                      "type": "integer"
                    },
                    "total_leads": {
                      "description": "Total leads count",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "success": {
                  "description": "Request success status",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Company not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get lead statistics for a company",
        "tags": [
          "Companies"
        ]
      }
    },
    "/api/v1/conversation": {
      "get": {
        "description": "Retrieve user's conversations with pagination.",
        "parameters": [
          {
            "default": 1,
            "description": "Page number",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 20,
            "description": "Items per page",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversations retrieved successfully",
            "schema": {
              "properties": {
                "conversations": {
                  "items": {
                    "properties": {
                      "agent": {
                        "$ref": "#/definitions/Agent",
                        "description": "Associated agent"
                      },
                      "archived_at": {
                        "description": "Archive timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "context_strategy": {
                        "default": "sliding_window",
                        "description": "Context management strategy",
                        "type": "string"
                      },
                      "conversion_outcome": {
                        "description": "Conversion outcome",
                        "type": "string"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "ended_at": {
                        "description": "End timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "id": {
                        "description": "Conversation unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "last_activity": {
                        "description": "Last activity timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "lead_satisfaction": {
                        "description": "Lead satisfaction rating",
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "max_context_length": {
                        "default": 4000,
                        "description": "Maximum context length",
                        "type": "integer"
                      },
                      "message_count": {
                        "description": "Total message count",
                        "type": "integer"
                      },
                      "messages": {
                        "description": "Conversation messages",
                        "items": {
                          "properties": {
                            "confidence_score": {
                              "description": "AI confidence score",
                              "maximum": 1.0,
                              "minimum": 0.0,
                              "type": "number"
                            },
                            "content": {
                              "description": "Message content",
                              "type": "string"
                            },
                            "content_type": {
                              "default": "text",
                              "description": "Content type",
                              "type": "string"
                            },
                            "context_used": {
                              "description": "Context snippets supplied to the model",
                              "items": {
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "created_at": {
                              "description": "Creation timestamp",
                              "format": "date-time",
                              "type": "string"
                            },
                            "id": {
                              "description": "Message unique identifier",
                              "format": "uuid",
                              "type": "string"
                            },
                            "metadata": {
                              "additionalProperties": true,
                              "description": "Additional message metadata including citation coverage",
                              "properties": {
                                "all_sources": {
                                  "description": "Full list of source legend entries returned for the response",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "citation_warnings": {
                                  "default": [],
                                  "description": "Warnings raised while validating citations (e.g., out-of-range references)",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "cited_sources": {
                                  "description": "Numeric source identifiers actually referenced in the response",
                                  "items": {
                                    "minimum": 1,
                                    "type": "integer"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "model_used": {
                              "description": "AI model used",
                              "type": "string"
                            },
                            "processing_time": {
                              "description": "Processing time in seconds",
                              "type": "number"
                            },
                            "role": {
                              "description": "Message role",
                              "enum": [
                                "user",
                                "assistant",
                                "system"
                              ],
                              "type": "string"
                            },
                            "sources": {
                              "description": "Resolved citations enriched with document metadata",
                              "items": {
                                "properties": {
                                  "cited": {
                                    "default": true,
                                    "description": "Indicates whether the source was explicitly cited in the answer",
                                    "type": "boolean"
                                  },
                                  "document_name": {
                                    "description": "Human readable name of the cited document or dataset",
                                    "type": "string"
                                  },
                                  "source_number": {
                                    "description": "Ordinal assigned to the context source (matches [Source #] in the answer)",
                                    "minimum": 1,
                                    "type": "integer"
                                  },
                                  "url": {
                                    "description": "Resolvable URL to the referenced document when available",
                                    "format": "uri",
                                    "nullable": true,
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "source_number",
                                  "document_name"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "tokens_used": {
                              "description": "Tokens used for this message",
                              "type": "integer"
                            },
                            "user_feedback": {
                              "description": "User feedback rating",
                              "maximum": 5,
                              "minimum": 1,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "metadata": {
                        "description": "Conversation metadata",
                        "type": "object"
                      },
                      "status": {
                        "description": "Conversation status",
                        "enum": [
                          "active",
                          "archived",
                          "deleted"
                        ],
                        "type": "string"
                      },
                      "tags": {
                        "description": "Conversation tags",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "description": "Conversation title",
                        "maxLength": 200,
                        "type": "string"
                      },
                      "total_tokens": {
                        "description": "Total tokens used",
                        "type": "integer"
                      },
                      "updated_at": {
                        "description": "Update timestamp",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "pagination": {
                  "properties": {
                    "has_next": {
                      "description": "Has next page",
                      "type": "boolean"
                    },
                    "has_prev": {
                      "description": "Has previous page",
                      "type": "boolean"
                    },
                    "page": {
                      "description": "Current page number",
                      "type": "integer"
                    },
                    "pages": {
                      "description": "Total number of pages",
                      "type": "integer"
                    },
                    "per_page": {
                      "description": "Items per page",
                      "type": "integer"
                    },
                    "total": {
                      "description": "Total number of items",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user's conversations",
        "tags": [
          "Conversations"
        ]
      },
      "post": {
        "description": "Create a new conversation with an AI agent.",
        "parameters": [
          {
            "description": "Conversation details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "agent_id": {
                  "description": "Agent ID",
                  "example": "123e4567-e89b-12d3-a456-426614174000",
                  "format": "uuid",
                  "type": "string"
                },
                "max_context_length": {
                  "default": 4000,
                  "description": "Maximum context length",
                  "minimum": 1000,
                  "type": "integer"
                },
                "metadata": {
                  "default": {},
                  "description": "Additional metadata",
                  "type": "object"
                },
                "title": {
                  "default": "New Conversation",
                  "description": "Conversation title",
                  "example": "Customer Support Chat",
                  "type": "string"
                }
              },
              "required": [
                "agent_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Conversation created successfully",
            "schema": {
              "properties": {
                "conversation": {
                  "properties": {
                    "agent": {
                      "$ref": "#/definitions/Agent",
                      "description": "Associated agent"
                    },
                    "archived_at": {
                      "description": "Archive timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "context_strategy": {
                      "default": "sliding_window",
                      "description": "Context management strategy",
                      "type": "string"
                    },
                    "conversion_outcome": {
                      "description": "Conversion outcome",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "Creation timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "ended_at": {
                      "description": "End timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "id": {
                      "description": "Conversation unique identifier",
                      "format": "uuid",
                      "type": "string"
                    },
                    "last_activity": {
                      "description": "Last activity timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "lead_satisfaction": {
                      "description": "Lead satisfaction rating",
                      "maximum": 5,
                      "minimum": 1,
                      "type": "integer"
                    },
                    "max_context_length": {
                      "default": 4000,
                      "description": "Maximum context length",
                      "type": "integer"
                    },
                    "message_count": {
                      "description": "Total message count",
                      "type": "integer"
                    },
                    "messages": {
                      "description": "Conversation messages",
                      "items": {
                        "properties": {
                          "confidence_score": {
                            "description": "AI confidence score",
                            "maximum": 1.0,
                            "minimum": 0.0,
                            "type": "number"
                          },
                          "content": {
                            "description": "Message content",
                            "type": "string"
                          },
                          "content_type": {
                            "default": "text",
                            "description": "Content type",
                            "type": "string"
                          },
                          "context_used": {
                            "description": "Context snippets supplied to the model",
                            "items": {
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "created_at": {
                            "description": "Creation timestamp",
                            "format": "date-time",
                            "type": "string"
                          },
                          "id": {
                            "description": "Message unique identifier",
                            "format": "uuid",
                            "type": "string"
                          },
                          "metadata": {
                            "additionalProperties": true,
                            "description": "Additional message metadata including citation coverage",
                            "properties": {
                              "all_sources": {
                                "description": "Full list of source legend entries returned for the response",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "citation_warnings": {
                                "default": [],
                                "description": "Warnings raised while validating citations (e.g., out-of-range references)",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "cited_sources": {
                                "description": "Numeric source identifiers actually referenced in the response",
                                "items": {
                                  "minimum": 1,
                                  "type": "integer"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "model_used": {
                            "description": "AI model used",
                            "type": "string"
                          },
                          "processing_time": {
                            "description": "Processing time in seconds",
                            "type": "number"
                          },
                          "role": {
                            "description": "Message role",
                            "enum": [
                              "user",
                              "assistant",
                              "system"
                            ],
                            "type": "string"
                          },
                          "sources": {
                            "description": "Resolved citations enriched with document metadata",
                            "items": {
                              "properties": {
                                "cited": {
                                  "default": true,
                                  "description": "Indicates whether the source was explicitly cited in the answer",
                                  "type": "boolean"
                                },
                                "document_name": {
                                  "description": "Human readable name of the cited document or dataset",
                                  "type": "string"
                                },
                                "source_number": {
                                  "description": "Ordinal assigned to the context source (matches [Source #] in the answer)",
                                  "minimum": 1,
                                  "type": "integer"
                                },
                                "url": {
                                  "description": "Resolvable URL to the referenced document when available",
                                  "format": "uri",
                                  "nullable": true,
                                  "type": "string"
                                }
                              },
                              "required": [
                                "source_number",
                                "document_name"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "tokens_used": {
                            "description": "Tokens used for this message",
                            "type": "integer"
                          },
                          "user_feedback": {
                            "description": "User feedback rating",
                            "maximum": 5,
                            "minimum": 1,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "description": "Conversation metadata",
                      "type": "object"
                    },
                    "status": {
                      "description": "Conversation status",
                      "enum": [
                        "active",
                        "archived",
                        "deleted"
                      ],
                      "type": "string"
                    },
                    "tags": {
                      "description": "Conversation tags",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "title": {
                      "description": "Conversation title",
                      "maxLength": 200,
                      "type": "string"
                    },
                    "total_tokens": {
                      "description": "Total tokens used",
                      "type": "integer"
                    },
                    "updated_at": {
                      "description": "Update timestamp",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create new conversation",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/api/v1/conversation/agent/{agent_id}": {
      "get": {
        "description": "Retrieve conversations associated with a specific agent ID. Leads see only their conversations with that agent.",
        "parameters": [
          {
            "description": "Agent ID",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          },
          {
            "default": "active",
            "description": "Conversation status",
            "enum": [
              "active",
              "archived",
              "deleted",
              "all"
            ],
            "in": "query",
            "name": "status",
            "type": "string"
          },
          {
            "default": 1,
            "description": "Page number",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 20,
            "description": "Items per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent conversations retrieved successfully",
            "schema": {
              "properties": {
                "conversations": {
                  "items": {
                    "properties": {
                      "agent": {
                        "$ref": "#/definitions/Agent",
                        "description": "Associated agent"
                      },
                      "archived_at": {
                        "description": "Archive timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "context_strategy": {
                        "default": "sliding_window",
                        "description": "Context management strategy",
                        "type": "string"
                      },
                      "conversion_outcome": {
                        "description": "Conversion outcome",
                        "type": "string"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "ended_at": {
                        "description": "End timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "id": {
                        "description": "Conversation unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "last_activity": {
                        "description": "Last activity timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "lead_satisfaction": {
                        "description": "Lead satisfaction rating",
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "max_context_length": {
                        "default": 4000,
                        "description": "Maximum context length",
                        "type": "integer"
                      },
                      "message_count": {
                        "description": "Total message count",
                        "type": "integer"
                      },
                      "messages": {
                        "description": "Conversation messages",
                        "items": {
                          "properties": {
                            "confidence_score": {
                              "description": "AI confidence score",
                              "maximum": 1.0,
                              "minimum": 0.0,
                              "type": "number"
                            },
                            "content": {
                              "description": "Message content",
                              "type": "string"
                            },
                            "content_type": {
                              "default": "text",
                              "description": "Content type",
                              "type": "string"
                            },
                            "context_used": {
                              "description": "Context snippets supplied to the model",
                              "items": {
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "created_at": {
                              "description": "Creation timestamp",
                              "format": "date-time",
                              "type": "string"
                            },
                            "id": {
                              "description": "Message unique identifier",
                              "format": "uuid",
                              "type": "string"
                            },
                            "metadata": {
                              "additionalProperties": true,
                              "description": "Additional message metadata including citation coverage",
                              "properties": {
                                "all_sources": {
                                  "description": "Full list of source legend entries returned for the response",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "citation_warnings": {
                                  "default": [],
                                  "description": "Warnings raised while validating citations (e.g., out-of-range references)",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "cited_sources": {
                                  "description": "Numeric source identifiers actually referenced in the response",
                                  "items": {
                                    "minimum": 1,
                                    "type": "integer"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "model_used": {
                              "description": "AI model used",
                              "type": "string"
                            },
                            "processing_time": {
                              "description": "Processing time in seconds",
                              "type": "number"
                            },
                            "role": {
                              "description": "Message role",
                              "enum": [
                                "user",
                                "assistant",
                                "system"
                              ],
                              "type": "string"
                            },
                            "sources": {
                              "description": "Resolved citations enriched with document metadata",
                              "items": {
                                "properties": {
                                  "cited": {
                                    "default": true,
                                    "description": "Indicates whether the source was explicitly cited in the answer",
                                    "type": "boolean"
                                  },
                                  "document_name": {
                                    "description": "Human readable name of the cited document or dataset",
                                    "type": "string"
                                  },
                                  "source_number": {
                                    "description": "Ordinal assigned to the context source (matches [Source #] in the answer)",
                                    "minimum": 1,
                                    "type": "integer"
                                  },
                                  "url": {
                                    "description": "Resolvable URL to the referenced document when available",
                                    "format": "uri",
                                    "nullable": true,
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "source_number",
                                  "document_name"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "tokens_used": {
                              "description": "Tokens used for this message",
                              "type": "integer"
                            },
                            "user_feedback": {
                              "description": "User feedback rating",
                              "maximum": 5,
                              "minimum": 1,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "metadata": {
                        "description": "Conversation metadata",
                        "type": "object"
                      },
                      "status": {
                        "description": "Conversation status",
                        "enum": [
                          "active",
                          "archived",
                          "deleted"
                        ],
                        "type": "string"
                      },
                      "tags": {
                        "description": "Conversation tags",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "description": "Conversation title",
                        "maxLength": 200,
                        "type": "string"
                      },
                      "total_tokens": {
                        "description": "Total tokens used",
                        "type": "integer"
                      },
                      "updated_at": {
                        "description": "Update timestamp",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "pagination": {
                  "properties": {
                    "has_next": {
                      "description": "Has next page",
                      "type": "boolean"
                    },
                    "has_prev": {
                      "description": "Has previous page",
                      "type": "boolean"
                    },
                    "page": {
                      "description": "Current page number",
                      "type": "integer"
                    },
                    "pages": {
                      "description": "Total number of pages",
                      "type": "integer"
                    },
                    "per_page": {
                      "description": "Items per page",
                      "type": "integer"
                    },
                    "total": {
                      "description": "Total number of items",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get conversations scoped to a specific agent.",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/api/v1/conversation/deleted": {
      "get": {
        "description": "Get all soft-deleted conversations for the current user.",
        "responses": {
          "200": {
            "description": "Deleted conversations retrieved successfully",
            "schema": {
              "properties": {
                "deleted_conversations": {
                  "description": "List of deleted conversations",
                  "items": {
                    "properties": {
                      "agent": {
                        "$ref": "#/definitions/Agent",
                        "description": "Associated agent"
                      },
                      "archived_at": {
                        "description": "Archive timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "context_strategy": {
                        "default": "sliding_window",
                        "description": "Context management strategy",
                        "type": "string"
                      },
                      "conversion_outcome": {
                        "description": "Conversion outcome",
                        "type": "string"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "ended_at": {
                        "description": "End timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "id": {
                        "description": "Conversation unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "last_activity": {
                        "description": "Last activity timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "lead_satisfaction": {
                        "description": "Lead satisfaction rating",
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "max_context_length": {
                        "default": 4000,
                        "description": "Maximum context length",
                        "type": "integer"
                      },
                      "message_count": {
                        "description": "Total message count",
                        "type": "integer"
                      },
                      "messages": {
                        "description": "Conversation messages",
                        "items": {
                          "properties": {
                            "confidence_score": {
                              "description": "AI confidence score",
                              "maximum": 1.0,
                              "minimum": 0.0,
                              "type": "number"
                            },
                            "content": {
                              "description": "Message content",
                              "type": "string"
                            },
                            "content_type": {
                              "default": "text",
                              "description": "Content type",
                              "type": "string"
                            },
                            "context_used": {
                              "description": "Context snippets supplied to the model",
                              "items": {
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "created_at": {
                              "description": "Creation timestamp",
                              "format": "date-time",
                              "type": "string"
                            },
                            "id": {
                              "description": "Message unique identifier",
                              "format": "uuid",
                              "type": "string"
                            },
                            "metadata": {
                              "additionalProperties": true,
                              "description": "Additional message metadata including citation coverage",
                              "properties": {
                                "all_sources": {
                                  "description": "Full list of source legend entries returned for the response",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "citation_warnings": {
                                  "default": [],
                                  "description": "Warnings raised while validating citations (e.g., out-of-range references)",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "cited_sources": {
                                  "description": "Numeric source identifiers actually referenced in the response",
                                  "items": {
                                    "minimum": 1,
                                    "type": "integer"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "model_used": {
                              "description": "AI model used",
                              "type": "string"
                            },
                            "processing_time": {
                              "description": "Processing time in seconds",
                              "type": "number"
                            },
                            "role": {
                              "description": "Message role",
                              "enum": [
                                "user",
                                "assistant",
                                "system"
                              ],
                              "type": "string"
                            },
                            "sources": {
                              "description": "Resolved citations enriched with document metadata",
                              "items": {
                                "properties": {
                                  "cited": {
                                    "default": true,
                                    "description": "Indicates whether the source was explicitly cited in the answer",
                                    "type": "boolean"
                                  },
                                  "document_name": {
                                    "description": "Human readable name of the cited document or dataset",
                                    "type": "string"
                                  },
                                  "source_number": {
                                    "description": "Ordinal assigned to the context source (matches [Source #] in the answer)",
                                    "minimum": 1,
                                    "type": "integer"
                                  },
                                  "url": {
                                    "description": "Resolvable URL to the referenced document when available",
                                    "format": "uri",
                                    "nullable": true,
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "source_number",
                                  "document_name"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "tokens_used": {
                              "description": "Tokens used for this message",
                              "type": "integer"
                            },
                            "user_feedback": {
                              "description": "User feedback rating",
                              "maximum": 5,
                              "minimum": 1,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "metadata": {
                        "description": "Conversation metadata",
                        "type": "object"
                      },
                      "status": {
                        "description": "Conversation status",
                        "enum": [
                          "active",
                          "archived",
                          "deleted"
                        ],
                        "type": "string"
                      },
                      "tags": {
                        "description": "Conversation tags",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "description": "Conversation title",
                        "maxLength": 200,
                        "type": "string"
                      },
                      "total_tokens": {
                        "description": "Total tokens used",
                        "type": "integer"
                      },
                      "updated_at": {
                        "description": "Update timestamp",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all soft-deleted conversations",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/api/v1/conversation/entity": {
      "get": {
        "description": "Retrieve user's conversations with pagination.",
        "parameters": [
          {
            "default": 1,
            "description": "Page number",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 20,
            "description": "Items per page",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversations retrieved successfully",
            "schema": {
              "properties": {
                "conversations": {
                  "items": {
                    "properties": {
                      "agent": {
                        "$ref": "#/definitions/Agent",
                        "description": "Associated agent"
                      },
                      "archived_at": {
                        "description": "Archive timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "context_strategy": {
                        "default": "sliding_window",
                        "description": "Context management strategy",
                        "type": "string"
                      },
                      "conversion_outcome": {
                        "description": "Conversion outcome",
                        "type": "string"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "ended_at": {
                        "description": "End timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "id": {
                        "description": "Conversation unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "last_activity": {
                        "description": "Last activity timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "lead_satisfaction": {
                        "description": "Lead satisfaction rating",
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "max_context_length": {
                        "default": 4000,
                        "description": "Maximum context length",
                        "type": "integer"
                      },
                      "message_count": {
                        "description": "Total message count",
                        "type": "integer"
                      },
                      "messages": {
                        "description": "Conversation messages",
                        "items": {
                          "properties": {
                            "confidence_score": {
                              "description": "AI confidence score",
                              "maximum": 1.0,
                              "minimum": 0.0,
                              "type": "number"
                            },
                            "content": {
                              "description": "Message content",
                              "type": "string"
                            },
                            "content_type": {
                              "default": "text",
                              "description": "Content type",
                              "type": "string"
                            },
                            "context_used": {
                              "description": "Context snippets supplied to the model",
                              "items": {
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "created_at": {
                              "description": "Creation timestamp",
                              "format": "date-time",
                              "type": "string"
                            },
                            "id": {
                              "description": "Message unique identifier",
                              "format": "uuid",
                              "type": "string"
                            },
                            "metadata": {
                              "additionalProperties": true,
                              "description": "Additional message metadata including citation coverage",
                              "properties": {
                                "all_sources": {
                                  "description": "Full list of source legend entries returned for the response",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "citation_warnings": {
                                  "default": [],
                                  "description": "Warnings raised while validating citations (e.g., out-of-range references)",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "cited_sources": {
                                  "description": "Numeric source identifiers actually referenced in the response",
                                  "items": {
                                    "minimum": 1,
                                    "type": "integer"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "model_used": {
                              "description": "AI model used",
                              "type": "string"
                            },
                            "processing_time": {
                              "description": "Processing time in seconds",
                              "type": "number"
                            },
                            "role": {
                              "description": "Message role",
                              "enum": [
                                "user",
                                "assistant",
                                "system"
                              ],
                              "type": "string"
                            },
                            "sources": {
                              "description": "Resolved citations enriched with document metadata",
                              "items": {
                                "properties": {
                                  "cited": {
                                    "default": true,
                                    "description": "Indicates whether the source was explicitly cited in the answer",
                                    "type": "boolean"
                                  },
                                  "document_name": {
                                    "description": "Human readable name of the cited document or dataset",
                                    "type": "string"
                                  },
                                  "source_number": {
                                    "description": "Ordinal assigned to the context source (matches [Source #] in the answer)",
                                    "minimum": 1,
                                    "type": "integer"
                                  },
                                  "url": {
                                    "description": "Resolvable URL to the referenced document when available",
                                    "format": "uri",
                                    "nullable": true,
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "source_number",
                                  "document_name"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "tokens_used": {
                              "description": "Tokens used for this message",
                              "type": "integer"
                            },
                            "user_feedback": {
                              "description": "User feedback rating",
                              "maximum": 5,
                              "minimum": 1,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "metadata": {
                        "description": "Conversation metadata",
                        "type": "object"
                      },
                      "status": {
                        "description": "Conversation status",
                        "enum": [
                          "active",
                          "archived",
                          "deleted"
                        ],
                        "type": "string"
                      },
                      "tags": {
                        "description": "Conversation tags",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "description": "Conversation title",
                        "maxLength": 200,
                        "type": "string"
                      },
                      "total_tokens": {
                        "description": "Total tokens used",
                        "type": "integer"
                      },
                      "updated_at": {
                        "description": "Update timestamp",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "pagination": {
                  "properties": {
                    "has_next": {
                      "description": "Has next page",
                      "type": "boolean"
                    },
                    "has_prev": {
                      "description": "Has previous page",
                      "type": "boolean"
                    },
                    "page": {
                      "description": "Current page number",
                      "type": "integer"
                    },
                    "pages": {
                      "description": "Total number of pages",
                      "type": "integer"
                    },
                    "per_page": {
                      "description": "Items per page",
                      "type": "integer"
                    },
                    "total": {
                      "description": "Total number of items",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user's conversations",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/api/v1/conversation/entity/{entity_id}": {
      "get": {
        "description": "Retrieve conversations associated with a specific entity ID. Leads can only access their own records.",
        "parameters": [
          {
            "description": "Entity ID",
            "format": "uuid",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional entity type filter",
            "enum": [
              "user",
              "lead"
            ],
            "in": "query",
            "name": "entity_type",
            "type": "string"
          },
          {
            "default": "active",
            "description": "Conversation status",
            "enum": [
              "active",
              "archived",
              "deleted",
              "all"
            ],
            "in": "query",
            "name": "status",
            "type": "string"
          },
          {
            "default": 1,
            "description": "Page number",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 20,
            "description": "Items per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Entity conversations retrieved successfully",
            "schema": {
              "properties": {
                "conversations": {
                  "items": {
                    "properties": {
                      "agent": {
                        "$ref": "#/definitions/Agent",
                        "description": "Associated agent"
                      },
                      "archived_at": {
                        "description": "Archive timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "context_strategy": {
                        "default": "sliding_window",
                        "description": "Context management strategy",
                        "type": "string"
                      },
                      "conversion_outcome": {
                        "description": "Conversion outcome",
                        "type": "string"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "ended_at": {
                        "description": "End timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "id": {
                        "description": "Conversation unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "last_activity": {
                        "description": "Last activity timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "lead_satisfaction": {
                        "description": "Lead satisfaction rating",
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "max_context_length": {
                        "default": 4000,
                        "description": "Maximum context length",
                        "type": "integer"
                      },
                      "message_count": {
                        "description": "Total message count",
                        "type": "integer"
                      },
                      "messages": {
                        "description": "Conversation messages",
                        "items": {
                          "properties": {
                            "confidence_score": {
                              "description": "AI confidence score",
                              "maximum": 1.0,
                              "minimum": 0.0,
                              "type": "number"
                            },
                            "content": {
                              "description": "Message content",
                              "type": "string"
                            },
                            "content_type": {
                              "default": "text",
                              "description": "Content type",
                              "type": "string"
                            },
                            "context_used": {
                              "description": "Context snippets supplied to the model",
                              "items": {
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "created_at": {
                              "description": "Creation timestamp",
                              "format": "date-time",
                              "type": "string"
                            },
                            "id": {
                              "description": "Message unique identifier",
                              "format": "uuid",
                              "type": "string"
                            },
                            "metadata": {
                              "additionalProperties": true,
                              "description": "Additional message metadata including citation coverage",
                              "properties": {
                                "all_sources": {
                                  "description": "Full list of source legend entries returned for the response",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "citation_warnings": {
                                  "default": [],
                                  "description": "Warnings raised while validating citations (e.g., out-of-range references)",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "cited_sources": {
                                  "description": "Numeric source identifiers actually referenced in the response",
                                  "items": {
                                    "minimum": 1,
                                    "type": "integer"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "model_used": {
                              "description": "AI model used",
                              "type": "string"
                            },
                            "processing_time": {
                              "description": "Processing time in seconds",
                              "type": "number"
                            },
                            "role": {
                              "description": "Message role",
                              "enum": [
                                "user",
                                "assistant",
                                "system"
                              ],
                              "type": "string"
                            },
                            "sources": {
                              "description": "Resolved citations enriched with document metadata",
                              "items": {
                                "properties": {
                                  "cited": {
                                    "default": true,
                                    "description": "Indicates whether the source was explicitly cited in the answer",
                                    "type": "boolean"
                                  },
                                  "document_name": {
                                    "description": "Human readable name of the cited document or dataset",
                                    "type": "string"
                                  },
                                  "source_number": {
                                    "description": "Ordinal assigned to the context source (matches [Source #] in the answer)",
                                    "minimum": 1,
                                    "type": "integer"
                                  },
                                  "url": {
                                    "description": "Resolvable URL to the referenced document when available",
                                    "format": "uri",
                                    "nullable": true,
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "source_number",
                                  "document_name"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "tokens_used": {
                              "description": "Tokens used for this message",
                              "type": "integer"
                            },
                            "user_feedback": {
                              "description": "User feedback rating",
                              "maximum": 5,
                              "minimum": 1,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "metadata": {
                        "description": "Conversation metadata",
                        "type": "object"
                      },
                      "status": {
                        "description": "Conversation status",
                        "enum": [
                          "active",
                          "archived",
                          "deleted"
                        ],
                        "type": "string"
                      },
                      "tags": {
                        "description": "Conversation tags",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "description": "Conversation title",
                        "maxLength": 200,
                        "type": "string"
                      },
                      "total_tokens": {
                        "description": "Total tokens used",
                        "type": "integer"
                      },
                      "updated_at": {
                        "description": "Update timestamp",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "pagination": {
                  "properties": {
                    "has_next": {
                      "description": "Has next page",
                      "type": "boolean"
                    },
                    "has_prev": {
                      "description": "Has previous page",
                      "type": "boolean"
                    },
                    "page": {
                      "description": "Current page number",
                      "type": "integer"
                    },
                    "pages": {
                      "description": "Total number of pages",
                      "type": "integer"
                    },
                    "per_page": {
                      "description": "Items per page",
                      "type": "integer"
                    },
                    "total": {
                      "description": "Total number of items",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get conversations scoped to a specific entity identifier.",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/api/v1/conversation/{conversation_id}": {
      "delete": {
        "description": "Soft delete a conversation by setting is_active to False. Also soft deletes all associated messages.",
        "parameters": [
          {
            "description": "Conversation ID to delete",
            "format": "uuid",
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation deleted successfully",
            "schema": {
              "properties": {
                "conversation_id": {
                  "description": "Deleted conversation ID",
                  "format": "uuid",
                  "type": "string"
                },
                "deleted_messages_count": {
                  "description": "Number of messages deleted",
                  "type": "integer"
                },
                "message": {
                  "description": "Success message",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Conversation not found or already deleted",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Soft delete a conversation by setting is_active to False\nAlso soft deletes all associated messages",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/api/v1/conversation/{conversation_id}/chat": {
      "post": {
        "description": "Accept a user message and enqueue it for asynchronous AI processing. Poll the conversation messages endpoint to retrieve the generated reply.",
        "parameters": [
          {
            "description": "Conversation ID",
            "format": "uuid",
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Chat message",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "message": {
                  "description": "User message",
                  "example": "Hello, I need help with my order",
                  "type": "string"
                }
              },
              "required": [
                "message"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Message accepted for asynchronous processing",
            "schema": {
              "properties": {
                "conversation_id": {
                  "description": "Conversation identifier",
                  "example": "7b8d7e42-9ef4-4f5c-8cbd-3b9e99dd0fd5",
                  "format": "uuid",
                  "type": "string"
                },
                "message_id": {
                  "description": "Identifier of the queued user message",
                  "example": "4f9e2f07-d1f6-43a1-bad7-6d3650f58ac3",
                  "format": "uuid",
                  "type": "string"
                },
                "poll_url": {
                  "description": "Endpoint that can be polled to retrieve the updated conversation history",
                  "example": "/v1/conversation/7b8d7e42-9ef4-4f5c-8cbd-3b9e99dd0fd5/messages",
                  "format": "uri",
                  "type": "string"
                },
                "status": {
                  "description": "Current processing state of the chat request",
                  "example": "queued",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the asynchronous task handling the AI response",
                  "example": "3f4033c0-9a9e-4d48-9a61-9ebd9c18b7f9",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "conversation_id",
                "message_id"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Message is required",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Conversation not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Send message and get AI response",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/api/v1/conversation/{conversation_id}/message/restore-all": {
      "patch": {
        "description": "Restore all soft-deleted messages for a specific conversation.",
        "parameters": [
          {
            "description": "Conversation ID whose messages to restore",
            "format": "uuid",
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Messages restored successfully",
            "schema": {
              "properties": {
                "conversation_id": {
                  "description": "Conversation ID",
                  "format": "uuid",
                  "type": "string"
                },
                "message": {
                  "description": "Success message",
                  "type": "string"
                },
                "restored_messages_count": {
                  "description": "Number of messages restored",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Active conversation not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Restore all soft-deleted messages for a specific conversation",
        "tags": [
          "Messages"
        ]
      }
    },
    "/api/v1/conversation/{conversation_id}/messages": {
      "delete": {
        "description": "Soft delete all messages for a specific conversation.",
        "parameters": [
          {
            "description": "Conversation ID whose messages to delete",
            "format": "uuid",
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Messages deleted successfully",
            "schema": {
              "properties": {
                "conversation_id": {
                  "description": "Conversation ID",
                  "format": "uuid",
                  "type": "string"
                },
                "deleted_messages_count": {
                  "description": "Number of messages deleted",
                  "type": "integer"
                },
                "message": {
                  "description": "Success message",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Conversation not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Soft delete all messages for a specific conversation",
        "tags": [
          "Messages"
        ]
      },
      "get": {
        "description": "Retrieve messages for a specific conversation.",
        "parameters": [
          {
            "description": "Conversation ID",
            "format": "uuid",
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Page number",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 50,
            "description": "Items per page",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Messages retrieved successfully",
            "schema": {
              "properties": {
                "messages": {
                  "items": {
                    "properties": {
                      "confidence_score": {
                        "description": "AI confidence score",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "type": "number"
                      },
                      "content": {
                        "description": "Message content",
                        "type": "string"
                      },
                      "content_type": {
                        "default": "text",
                        "description": "Content type",
                        "type": "string"
                      },
                      "context_used": {
                        "description": "Context snippets supplied to the model",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "id": {
                        "description": "Message unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "metadata": {
                        "additionalProperties": true,
                        "description": "Additional message metadata including citation coverage",
                        "properties": {
                          "all_sources": {
                            "description": "Full list of source legend entries returned for the response",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "citation_warnings": {
                            "default": [],
                            "description": "Warnings raised while validating citations (e.g., out-of-range references)",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "cited_sources": {
                            "description": "Numeric source identifiers actually referenced in the response",
                            "items": {
                              "minimum": 1,
                              "type": "integer"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "model_used": {
                        "description": "AI model used",
                        "type": "string"
                      },
                      "processing_time": {
                        "description": "Processing time in seconds",
                        "type": "number"
                      },
                      "role": {
                        "description": "Message role",
                        "enum": [
                          "user",
                          "assistant",
                          "system"
                        ],
                        "type": "string"
                      },
                      "sources": {
                        "description": "Resolved citations enriched with document metadata",
                        "items": {
                          "properties": {
                            "cited": {
                              "default": true,
                              "description": "Indicates whether the source was explicitly cited in the answer",
                              "type": "boolean"
                            },
                            "document_name": {
                              "description": "Human readable name of the cited document or dataset",
                              "type": "string"
                            },
                            "source_number": {
                              "description": "Ordinal assigned to the context source (matches [Source #] in the answer)",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "url": {
                              "description": "Resolvable URL to the referenced document when available",
                              "format": "uri",
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "required": [
                            "source_number",
                            "document_name"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "tokens_used": {
                        "description": "Tokens used for this message",
                        "type": "integer"
                      },
                      "user_feedback": {
                        "description": "User feedback rating",
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "pagination": {
                  "properties": {
                    "has_next": {
                      "description": "Has next page",
                      "type": "boolean"
                    },
                    "has_prev": {
                      "description": "Has previous page",
                      "type": "boolean"
                    },
                    "page": {
                      "description": "Current page number",
                      "type": "integer"
                    },
                    "pages": {
                      "description": "Total number of pages",
                      "type": "integer"
                    },
                    "per_page": {
                      "description": "Items per page",
                      "type": "integer"
                    },
                    "total": {
                      "description": "Total number of items",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Conversation not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get conversation messages",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/api/v1/conversation/{conversation_id}/messages/stream": {
      "get": {
        "description": "Open a Server-Sent Events (SSE) stream that emits queued, completed, and failed chat events for the specified conversation.",
        "parameters": [
          {
            "description": "Conversation ID",
            "format": "uuid",
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "SSE stream established. Events are delivered as newline-delimited payloads.",
            "schema": {
              "example": "event: completed\\ndata: {\\\"conversation_id\\\": \\\"...\\\", \\\"message\\\": {\\\"id\\\": \\\"...\\\", \\\"role\\\": \\\"assistant\\\", \\\"content\\\": \\\"Response text with [Source 1]\\\", \\\"citations\\\": [{\\\"source_number\\\": 1, \\\"document_name\\\": \\\"Knowledge Base.pdf\\\", \\\"url\\\": \\\"https://...\\\"}], \\\"metadata\\\": {\\\"cited_sources\\\": [1], \\\"all_sources\\\": [\\\"Document Source 1: Knowledge Base.pdf\\\" ]}}}\\n\\n",
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Conversation not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "503": {
            "description": "Streaming backend not configured",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Server-Sent Events stream for conversation updates.",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/api/v1/conversation/{conversation_id}/restore": {
      "patch": {
        "description": "Restore a soft-deleted conversation by setting is_active to True.",
        "parameters": [
          {
            "description": "Conversation ID to restore",
            "format": "uuid",
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation restored successfully",
            "schema": {
              "properties": {
                "conversation_id": {
                  "description": "Restored conversation ID",
                  "format": "uuid",
                  "type": "string"
                },
                "message": {
                  "description": "Success message",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Deleted conversation not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Restore a soft-deleted conversation by setting is_active to True",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/api/v1/country": {
      "get": {
        "description": "Get a list of all countries.",
        "responses": {
          "200": {
            "description": "Countries retrieved successfully",
            "schema": {
              "items": {
                "properties": {
                  "created_at": {
                    "description": "Creation timestamp",
                    "format": "date-time",
                    "type": "string"
                  },
                  "id": {
                    "description": "Country unique identifier",
                    "type": "integer"
                  },
                  "iso_code": {
                    "description": "ISO country code",
                    "maxLength": 3,
                    "type": "string"
                  },
                  "name": {
                    "description": "Country name",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "Update timestamp",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "List all countries",
        "tags": [
          "Countries"
        ]
      },
      "post": {
        "description": "Create a new country with name and optional ISO code. The operation runs asynchronously.",
        "parameters": [
          {
            "description": "Country information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "iso_code": {
                  "description": "ISO country code",
                  "example": "USA",
                  "maxLength": 3,
                  "type": "string"
                },
                "name": {
                  "description": "Country name",
                  "example": "United States",
                  "maxLength": 100,
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Country creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields or invalid data",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict - Country already exists",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new country",
        "tags": [
          "Countries"
        ]
      }
    },
    "/api/v1/country/{country_id}": {
      "get": {
        "description": "Get detailed information about a specific country including its states.",
        "parameters": [
          {
            "description": "Country ID",
            "in": "path",
            "name": "country_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Country details retrieved successfully",
            "schema": {
              "properties": {
                "created_at": {
                  "description": "Creation timestamp",
                  "format": "date-time",
                  "type": "string"
                },
                "id": {
                  "description": "Country unique identifier",
                  "type": "integer"
                },
                "iso_code": {
                  "description": "ISO country code",
                  "maxLength": 3,
                  "type": "string"
                },
                "name": {
                  "description": "Country name",
                  "maxLength": 100,
                  "type": "string"
                },
                "state": {
                  "description": "List of states in this country",
                  "items": {
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "updated_at": {
                  "description": "Update timestamp",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Country not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Get country details",
        "tags": [
          "Countries"
        ]
      },
      "patch": {
        "description": "Update country information asynchronously.",
        "parameters": [
          {
            "description": "Country ID",
            "in": "path",
            "name": "country_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Updated country information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "iso_code": {
                  "description": "ISO country code",
                  "example": "USA",
                  "maxLength": 3,
                  "type": "string"
                },
                "name": {
                  "description": "Country name",
                  "example": "United States",
                  "maxLength": 100,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Country update request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Country not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict - Country name already exists",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update a country",
        "tags": [
          "Countries"
        ]
      }
    },
    "/api/v1/database-connection": {
      "get": {
        "description": "Retrieve all database connections for the authenticated user.",
        "responses": {
          "200": {
            "description": "Database connections retrieved successfully",
            "schema": {
              "properties": {
                "connection": {
                  "items": {
                    "properties": {
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "database_type": {
                        "description": "Database type",
                        "enum": [
                          "postgresql",
                          "mysql",
                          "sqlite",
                          "mongodb",
                          "mssql",
                          "cockroachdb"
                        ],
                        "type": "string"
                      },
                      "id": {
                        "description": "Connection unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "is_active": {
                        "description": "Connection active status",
                        "type": "boolean"
                      },
                      "last_tested": {
                        "description": "Last test timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "name": {
                        "description": "Connection name",
                        "type": "string"
                      },
                      "test_result": {
                        "description": "Last test result message",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user's database connections",
        "tags": [
          "Database Connections"
        ]
      },
      "post": {
        "description": "Create a new database connection and test its validity.",
        "parameters": [
          {
            "description": "Database connection details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "agent_id": {
                  "description": "Agent identifier the connection belongs to",
                  "example": "123e4567-e89b-12d3-a456-426614174000",
                  "format": "uuid",
                  "type": "string"
                },
                "connection_params": {
                  "default": {},
                  "description": "Additional connection parameters",
                  "type": "object"
                },
                "database_type": {
                  "description": "Database type",
                  "enum": [
                    "postgresql",
                    "mysql",
                    "sqlite",
                    "mongodb",
                    "mssql",
                    "cockroachdb"
                  ],
                  "example": "postgresql",
                  "type": "string"
                },
                "name": {
                  "description": "Connection name",
                  "example": "Production DB",
                  "type": "string"
                },
                "url": {
                  "description": "Database connection string",
                  "example": "postgresql://user:pass@localhost:5432/dbname",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "database_type",
                "url",
                "agent_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Database connection created successfully",
            "schema": {
              "properties": {
                "connection": {
                  "properties": {
                    "created_at": {
                      "description": "Creation timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "database_type": {
                      "description": "Database type",
                      "enum": [
                        "postgresql",
                        "mysql",
                        "sqlite",
                        "mongodb",
                        "mssql",
                        "cockroachdb"
                      ],
                      "type": "string"
                    },
                    "id": {
                      "description": "Connection unique identifier",
                      "format": "uuid",
                      "type": "string"
                    },
                    "is_active": {
                      "description": "Connection active status",
                      "type": "boolean"
                    },
                    "last_tested": {
                      "description": "Last test timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "name": {
                      "description": "Connection name",
                      "type": "string"
                    },
                    "test_result": {
                      "description": "Last test result message",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "is_active": {
                  "description": "Connection active status",
                  "type": "boolean"
                },
                "message": {
                  "example": "Database connection created successfully",
                  "type": "string"
                },
                "test_result": {
                  "description": "Connection test result",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid database type or connection name exists",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create database connection",
        "tags": [
          "Database Connections"
        ]
      }
    },
    "/api/v1/database-connection/agent/{agent_id}": {
      "get": {
        "description": "Retrieve database connections scoped to a given agent identifier.",
        "parameters": [
          {
            "description": "Agent identifier whose connections should be returned",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Database connections retrieved successfully",
            "schema": {
              "properties": {
                "connection": {
                  "items": {
                    "properties": {
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "database_type": {
                        "description": "Database type",
                        "enum": [
                          "postgresql",
                          "mysql",
                          "sqlite",
                          "mongodb",
                          "mssql",
                          "cockroachdb"
                        ],
                        "type": "string"
                      },
                      "id": {
                        "description": "Connection unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "is_active": {
                        "description": "Connection active status",
                        "type": "boolean"
                      },
                      "last_tested": {
                        "description": "Last test timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "name": {
                        "description": "Connection name",
                        "type": "string"
                      },
                      "test_result": {
                        "description": "Last test result message",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid agent_id supplied",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get database connections associated with a specific agent.",
        "tags": [
          "Database Connections"
        ]
      }
    },
    "/api/v1/database-connection/analyze": {
      "post": {
        "description": "Analyze all active database connections and store their metadata.",
        "responses": {
          "202": {
            "description": "Bulk database analysis request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Analyze all active database connections",
        "tags": [
          "Database Connections"
        ]
      }
    },
    "/api/v1/database-connection/deleted": {
      "get": {
        "description": "Get all soft-deleted database connections for the current user.",
        "responses": {
          "200": {
            "description": "Deleted connections retrieved successfully",
            "schema": {
              "properties": {
                "deleted_connections": {
                  "description": "List of deleted database connections",
                  "items": {
                    "properties": {
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "database_type": {
                        "description": "Database type",
                        "enum": [
                          "postgresql",
                          "mysql",
                          "sqlite",
                          "mongodb",
                          "mssql",
                          "cockroachdb"
                        ],
                        "type": "string"
                      },
                      "id": {
                        "description": "Connection unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "is_active": {
                        "description": "Connection active status",
                        "type": "boolean"
                      },
                      "last_tested": {
                        "description": "Last test timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "name": {
                        "description": "Connection name",
                        "type": "string"
                      },
                      "test_result": {
                        "description": "Last test result message",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all soft-deleted database connections for the current user",
        "tags": [
          "Database Connections"
        ]
      }
    },
    "/api/v1/database-connection/export": {
      "post": {
        "description": "Export database tables as documents for processing.",
        "parameters": [
          {
            "description": "Export configuration",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "connection_id": {
                  "description": "Database connection ID",
                  "format": "uuid",
                  "type": "string"
                },
                "limit_per_table": {
                  "description": "Limit records per table",
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "required": [
                "connection_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Export request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - connection_id is required",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Export database to documents",
        "tags": [
          "Database Connections"
        ]
      }
    },
    "/api/v1/database-connection/table/deleted": {
      "get": {
        "description": "Get all soft-deleted database tables for the current user.",
        "responses": {
          "200": {
            "description": "Deleted tables retrieved successfully",
            "schema": {
              "properties": {
                "deleted_tables": {
                  "description": "List of deleted database tables",
                  "items": {
                    "properties": {
                      "columns_info": {
                        "description": "Column metadata",
                        "type": "object"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "id": {
                        "description": "Table unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "last_analyzed": {
                        "description": "Last analysis timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "row_count": {
                        "description": "Estimated row count",
                        "type": "integer"
                      },
                      "schema_name": {
                        "description": "Schema name",
                        "type": "string"
                      },
                      "table_name": {
                        "description": "Table name",
                        "type": "string"
                      },
                      "table_size": {
                        "description": "Table size in bytes",
                        "type": "integer"
                      },
                      "table_type": {
                        "description": "Table type (TABLE, VIEW, etc.)",
                        "type": "string"
                      },
                      "updated_at": {
                        "description": "Update timestamp",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all soft-deleted database tables for the current user",
        "tags": [
          "Database Tables"
        ]
      }
    },
    "/api/v1/database-connection/table/{table_id}": {
      "delete": {
        "description": "Soft delete a database table by setting is_active to False.",
        "parameters": [
          {
            "description": "Database table ID to delete",
            "format": "uuid",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Database table deletion request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Database table not found or already deleted",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Soft delete a database table by setting is_active to False",
        "tags": [
          "Database Tables"
        ]
      },
      "get": {
        "description": "Get detailed metadata for a specific database table.",
        "parameters": [
          {
            "description": "Table ID",
            "format": "uuid",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Table details retrieved successfully",
            "schema": {
              "properties": {
                "columns_info": {
                  "description": "Column metadata",
                  "type": "object"
                },
                "created_at": {
                  "description": "Creation timestamp",
                  "format": "date-time",
                  "type": "string"
                },
                "id": {
                  "description": "Table unique identifier",
                  "format": "uuid",
                  "type": "string"
                },
                "last_analyzed": {
                  "description": "Last analysis timestamp",
                  "format": "date-time",
                  "type": "string"
                },
                "row_count": {
                  "description": "Estimated row count",
                  "type": "integer"
                },
                "schema_name": {
                  "description": "Schema name",
                  "type": "string"
                },
                "table_name": {
                  "description": "Table name",
                  "type": "string"
                },
                "table_size": {
                  "description": "Table size in bytes",
                  "type": "integer"
                },
                "table_type": {
                  "description": "Table type (TABLE, VIEW, etc.)",
                  "type": "string"
                },
                "updated_at": {
                  "description": "Update timestamp",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Table not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get detailed metadata for a specific table",
        "tags": [
          "Database Connections"
        ]
      }
    },
    "/api/v1/database-connection/table/{table_id}/restore": {
      "patch": {
        "description": "Restore a soft-deleted database table by setting is_active to True.",
        "parameters": [
          {
            "description": "Database table ID to restore",
            "format": "uuid",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Database table restoration request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Cannot restore table: parent connection is deleted",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Deleted database table not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Restore a soft-deleted database table by setting is_active to True",
        "tags": [
          "Database Tables"
        ]
      }
    },
    "/api/v1/database-connection/{connection_id}": {
      "delete": {
        "description": "Soft delete a database connection by setting is_active to False. Also soft deletes all associated tables.",
        "parameters": [
          {
            "description": "Database connection ID to delete",
            "format": "uuid",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Database connection deletion request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Database connection not found or already deleted",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Soft delete a database connection by setting is_active to False\nAlso soft deletes all associated tables",
        "tags": [
          "Database Connections"
        ]
      },
      "patch": {
        "description": "Partially update an existing database connection. Same functionality as PUT but semantically correct for partial updates.",
        "parameters": [
          {
            "description": "Database connection unique identifier",
            "format": "uuid",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "is_active": false
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "connection_params": {
                    "description": "Additional connection parameters",
                    "example": {
                      "connect_timeout": 30,
                      "sslmode": "require"
                    },
                    "type": "object"
                  },
                  "connection_string": {
                    "description": "Database connection string (will be encrypted)",
                    "example": "postgresql://user:password@localhost:5432/database",
                    "type": "string"
                  },
                  "database_type": {
                    "description": "Database type",
                    "enum": [
                      "postgresql",
                      "mysql",
                      "sqlite",
                      "mongodb",
                      "mssql",
                      "cockroachdb"
                    ],
                    "example": "postgresql",
                    "type": "string"
                  },
                  "is_active": {
                    "description": "Connection active status",
                    "example": true,
                    "type": "boolean"
                  },
                  "max_overflow": {
                    "description": "Max overflow connections",
                    "example": 20,
                    "minimum": 0,
                    "type": "integer"
                  },
                  "name": {
                    "description": "Connection name",
                    "example": "Production Database",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "pool_size": {
                    "description": "Connection pool size",
                    "example": 10,
                    "minimum": 1,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "created_at": "2024-01-01T00:00:00Z",
                    "database_type": "postgresql",
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "is_active": true,
                    "last_tested": null,
                    "max_overflow": 10,
                    "name": "Updated Production DB",
                    "pool_size": 15,
                    "test_result": null,
                    "updated_at": "2024-01-02T10:30:00Z"
                  },
                  "message": "Database connection updated successfully. Updated fields: name, pool_size",
                  "success": true
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "created_at": {
                          "description": "Creation timestamp",
                          "format": "date-time",
                          "type": "string"
                        },
                        "database_type": {
                          "description": "Database type",
                          "enum": [
                            "postgresql",
                            "mysql",
                            "sqlite",
                            "mongodb",
                            "mssql",
                            "cockroachdb"
                          ],
                          "type": "string"
                        },
                        "id": {
                          "description": "Connection unique identifier",
                          "format": "uuid",
                          "type": "string"
                        },
                        "is_active": {
                          "description": "Connection active status",
                          "type": "boolean"
                        },
                        "last_tested": {
                          "description": "Last test timestamp",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Connection name",
                          "type": "string"
                        },
                        "test_result": {
                          "description": "Last test result message",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Success message with updated fields",
                      "type": "string"
                    },
                    "success": {
                      "description": "Request success status",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Database connection updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "empty_name": {
                    "value": {
                      "message": "Name cannot be empty",
                      "success": false
                    }
                  },
                  "invalid_pool_size": {
                    "value": {
                      "message": "Pool size must be a positive integer",
                      "success": false
                    }
                  },
                  "invalid_uuid": {
                    "value": {
                      "message": "Invalid connection ID format",
                      "success": false
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request - Invalid input data"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Authentication required",
                  "success": false
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized - Invalid or missing JWT token"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Not allowed"
                },
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden - User not allowed"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Database connection not found",
                  "success": false
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Not Found - Database connection not found"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "constraint_violation": {
                    "value": {
                      "message": "Database constraint violation",
                      "success": false
                    }
                  },
                  "duplicate_name": {
                    "value": {
                      "message": "A connection with this name already exists for this user",
                      "success": false
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict - Constraint violation"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "message": "An unexpected error occurred",
                  "success": false
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Partially update a database connection (same logic as PUT but semantically correct for partial updates)",
        "tags": [
          "Database Connections"
        ]
      },
      "put": {
        "description": "Update an existing database connection with provided fields. All fields are optional.",
        "parameters": [
          {
            "description": "Database connection unique identifier",
            "format": "uuid",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "database_type": "postgresql",
                "is_active": true,
                "name": "Updated Production DB",
                "pool_size": 15
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "connection_params": {
                    "description": "Additional connection parameters",
                    "example": {
                      "connect_timeout": 30,
                      "sslmode": "require"
                    },
                    "type": "object"
                  },
                  "connection_string": {
                    "description": "Database connection string (will be encrypted)",
                    "example": "postgresql://user:password@localhost:5432/database",
                    "type": "string"
                  },
                  "database_type": {
                    "description": "Database type",
                    "enum": [
                      "postgresql",
                      "mysql",
                      "sqlite",
                      "mongodb",
                      "mssql",
                      "cockroachdb"
                    ],
                    "example": "postgresql",
                    "type": "string"
                  },
                  "is_active": {
                    "description": "Connection active status",
                    "example": true,
                    "type": "boolean"
                  },
                  "max_overflow": {
                    "description": "Max overflow connections",
                    "example": 20,
                    "minimum": 0,
                    "type": "integer"
                  },
                  "name": {
                    "description": "Connection name",
                    "example": "Production Database",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "pool_size": {
                    "description": "Connection pool size",
                    "example": 10,
                    "minimum": 1,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "created_at": "2024-01-01T00:00:00Z",
                    "database_type": "postgresql",
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "is_active": true,
                    "last_tested": null,
                    "max_overflow": 10,
                    "name": "Updated Production DB",
                    "pool_size": 15,
                    "test_result": null,
                    "updated_at": "2024-01-02T10:30:00Z"
                  },
                  "message": "Database connection updated successfully. Updated fields: name, pool_size",
                  "success": true
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "created_at": {
                          "description": "Creation timestamp",
                          "format": "date-time",
                          "type": "string"
                        },
                        "database_type": {
                          "description": "Database type",
                          "enum": [
                            "postgresql",
                            "mysql",
                            "sqlite",
                            "mongodb",
                            "mssql",
                            "cockroachdb"
                          ],
                          "type": "string"
                        },
                        "id": {
                          "description": "Connection unique identifier",
                          "format": "uuid",
                          "type": "string"
                        },
                        "is_active": {
                          "description": "Connection active status",
                          "type": "boolean"
                        },
                        "last_tested": {
                          "description": "Last test timestamp",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Connection name",
                          "type": "string"
                        },
                        "test_result": {
                          "description": "Last test result message",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Success message with updated fields",
                      "type": "string"
                    },
                    "success": {
                      "description": "Request success status",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Database connection updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "empty_name": {
                    "value": {
                      "message": "Name cannot be empty",
                      "success": false
                    }
                  },
                  "invalid_pool_size": {
                    "value": {
                      "message": "Pool size must be a positive integer",
                      "success": false
                    }
                  },
                  "invalid_uuid": {
                    "value": {
                      "message": "Invalid connection ID format",
                      "success": false
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request - Invalid input data"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Authentication required",
                  "success": false
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized - Invalid or missing JWT token"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Not allowed"
                },
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden - User not allowed"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Database connection not found",
                  "success": false
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Not Found - Database connection not found"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "constraint_violation": {
                    "value": {
                      "message": "Database constraint violation",
                      "success": false
                    }
                  },
                  "duplicate_name": {
                    "value": {
                      "message": "A connection with this name already exists for this user",
                      "success": false
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict - Constraint violation"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "message": "An unexpected error occurred",
                  "success": false
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update an existing database connection",
        "tags": [
          "Database Connections"
        ]
      }
    },
    "/api/v1/database-connection/{connection_id}/analyze": {
      "post": {
        "description": "Analyze a specific database connection and store table metadata.",
        "parameters": [
          {
            "description": "Connection ID",
            "format": "uuid",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Database analysis request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Database connection is inactive",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Database connection not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Analyze a specific database connection and store table metadata",
        "tags": [
          "Database Connections"
        ]
      }
    },
    "/api/v1/database-connection/{connection_id}/restore": {
      "patch": {
        "description": "Restore a soft-deleted database connection by setting is_active to True.",
        "parameters": [
          {
            "description": "Database connection ID to restore",
            "format": "uuid",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Database connection restoration request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Deleted database connection not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Restore a soft-deleted database connection by setting is_active to True",
        "tags": [
          "Database Connections"
        ]
      }
    },
    "/api/v1/database-connection/{connection_id}/table": {
      "delete": {
        "description": "Soft delete all tables for a specific database connection.",
        "parameters": [
          {
            "description": "Database connection ID whose tables to delete",
            "format": "uuid",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Database table deletion request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Database connection not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Soft delete all tables for a specific database connection",
        "tags": [
          "Database Tables"
        ]
      },
      "get": {
        "description": "Get paginated table metadata for a specific database connection.",
        "parameters": [
          {
            "description": "Connection ID",
            "format": "uuid",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Page number",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 10,
            "description": "Items per page",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Database tables retrieved successfully",
            "schema": {
              "properties": {
                "connection": {
                  "properties": {
                    "created_at": {
                      "description": "Creation timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "database_type": {
                      "description": "Database type",
                      "enum": [
                        "postgresql",
                        "mysql",
                        "sqlite",
                        "mongodb",
                        "mssql",
                        "cockroachdb"
                      ],
                      "type": "string"
                    },
                    "id": {
                      "description": "Connection unique identifier",
                      "format": "uuid",
                      "type": "string"
                    },
                    "is_active": {
                      "description": "Connection active status",
                      "type": "boolean"
                    },
                    "last_tested": {
                      "description": "Last test timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "name": {
                      "description": "Connection name",
                      "type": "string"
                    },
                    "test_result": {
                      "description": "Last test result message",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "pagination": {
                  "properties": {
                    "has_next": {
                      "description": "Has next page",
                      "type": "boolean"
                    },
                    "has_prev": {
                      "description": "Has previous page",
                      "type": "boolean"
                    },
                    "page": {
                      "description": "Current page number",
                      "type": "integer"
                    },
                    "pages": {
                      "description": "Total number of pages",
                      "type": "integer"
                    },
                    "per_page": {
                      "description": "Items per page",
                      "type": "integer"
                    },
                    "total": {
                      "description": "Total number of items",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "tables": {
                  "items": {
                    "properties": {
                      "columns_info": {
                        "description": "Column metadata",
                        "type": "object"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "id": {
                        "description": "Table unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "last_analyzed": {
                        "description": "Last analysis timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "row_count": {
                        "description": "Estimated row count",
                        "type": "integer"
                      },
                      "schema_name": {
                        "description": "Schema name",
                        "type": "string"
                      },
                      "table_name": {
                        "description": "Table name",
                        "type": "string"
                      },
                      "table_size": {
                        "description": "Table size in bytes",
                        "type": "integer"
                      },
                      "table_type": {
                        "description": "Table type (TABLE, VIEW, etc.)",
                        "type": "string"
                      },
                      "updated_at": {
                        "description": "Update timestamp",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Connection not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get paginated table metadata for a connection",
        "tags": [
          "Database Connections"
        ]
      }
    },
    "/api/v1/database-connection/{connection_id}/test": {
      "post": {
        "description": "Test the validity of a specific database connection.",
        "parameters": [
          {
            "description": "Connection ID",
            "format": "uuid",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Connection tested successfully",
            "schema": {
              "properties": {
                "is_valid": {
                  "description": "Connection validity",
                  "type": "boolean"
                },
                "message": {
                  "description": "Test result message",
                  "type": "string"
                },
                "tested_at": {
                  "description": "Test timestamp",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Connection not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Test database connection",
        "tags": [
          "Database Connections"
        ]
      }
    },
    "/api/v1/detailed-usage/{api_key_id}": {
      "get": {
        "description": "Retrieve comprehensive usage analytics for a specific API key including endpoint breakdown and daily usage patterns. Requires API key authentication with 'read' or 'admin' scope.",
        "parameters": [
          {
            "description": "API Key UUID",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "in": "path",
            "name": "api_key_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Number of days to look back for analytics",
            "example": 30,
            "in": "query",
            "name": "days",
            "schema": {
              "default": 30,
              "maximum": 365,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed API key usage retrieved successfully",
            "schema": {
              "properties": {
                "data": {
                  "properties": {
                    "api_key": {
                      "properties": {
                        "id": {
                          "example": "123e4567-e89b-12d3-a456-426614174000",
                          "format": "uuid",
                          "type": "string"
                        },
                        "key_prefix": {
                          "example": "ak_AbC12",
                          "type": "string"
                        },
                        "name": {
                          "example": "Production API Key",
                          "type": "string"
                        },
                        "scopes": {
                          "example": [
                            "read",
                            "write"
                          ],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "status": {
                          "enum": [
                            "active",
                            "inactive",
                            "revoked",
                            "expired"
                          ],
                          "example": "active",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "daily_breakdown": {
                      "items": {
                        "properties": {
                          "date": {
                            "example": "2025-09-06",
                            "format": "date",
                            "type": "string"
                          },
                          "success_rate": {
                            "example": 97.4,
                            "format": "float",
                            "type": "number"
                          },
                          "total_requests": {
                            "example": 156,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "endpoint_breakdown": {
                      "items": {
                        "properties": {
                          "avg_response_time": {
                            "example": 234.7,
                            "format": "float",
                            "type": "number"
                          },
                          "endpoint": {
                            "example": "GET /api/v1/users",
                            "type": "string"
                          },
                          "success_rate": {
                            "example": 98.9,
                            "format": "float",
                            "type": "number"
                          },
                          "total_requests": {
                            "example": 450,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "period_days": {
                      "example": 30,
                      "type": "integer"
                    },
                    "total_logs": {
                      "example": 1000,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "success": {
                  "example": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - API key authentication required",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "API key not found or access denied",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get detailed usage for a specific API key",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/document": {
      "get": {
        "description": "Retrieve user's uploaded documents with pagination.",
        "parameters": [
          {
            "default": 1,
            "description": "Page number",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 10,
            "description": "Items per page",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Documents retrieved successfully",
            "schema": {
              "properties": {
                "document": {
                  "items": {
                    "properties": {
                      "chunks": {
                        "description": "Document chunks",
                        "items": {
                          "properties": {
                            "chunk_index": {
                              "description": "Chunk index in document",
                              "type": "integer"
                            },
                            "content": {
                              "description": "Chunk content",
                              "type": "string"
                            },
                            "created_at": {
                              "description": "Creation timestamp",
                              "format": "date-time",
                              "type": "string"
                            },
                            "embedding_model": {
                              "description": "Embedding model used",
                              "type": "string"
                            },
                            "id": {
                              "description": "Chunk unique identifier",
                              "format": "uuid",
                              "type": "string"
                            },
                            "word_count": {
                              "description": "Word count in chunk",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "document_type": {
                        "description": "Document type",
                        "enum": [
                          "pdf",
                          "docx",
                          "txt",
                          "xml",
                          "csv",
                          "json",
                          "xlsx",
                          "html"
                        ],
                        "type": "string"
                      },
                      "file_size": {
                        "description": "File size in bytes",
                        "type": "integer"
                      },
                      "id": {
                        "description": "Document unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "original_filename": {
                        "description": "Original filename",
                        "type": "string"
                      },
                      "page_count": {
                        "description": "Total page count",
                        "type": "integer"
                      },
                      "processing_error": {
                        "description": "Processing error message",
                        "type": "string"
                      },
                      "status": {
                        "description": "Processing status",
                        "enum": [
                          "pending",
                          "processing",
                          "processed",
                          "failed"
                        ],
                        "type": "string"
                      },
                      "user": {
                        "description": "User information",
                        "type": "object"
                      },
                      "word_count": {
                        "description": "Total word count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "pagination": {
                  "properties": {
                    "has_next": {
                      "description": "Has next page",
                      "type": "boolean"
                    },
                    "has_prev": {
                      "description": "Has previous page",
                      "type": "boolean"
                    },
                    "page": {
                      "description": "Current page number",
                      "type": "integer"
                    },
                    "pages": {
                      "description": "Total number of pages",
                      "type": "integer"
                    },
                    "per_page": {
                      "description": "Items per page",
                      "type": "integer"
                    },
                    "total": {
                      "description": "Total number of items",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user's documents",
        "tags": [
          "Documents"
        ]
      }
    },
    "/api/v1/document/agent/{agent_id}": {
      "get": {
        "description": "Retrieve documents associated with the provided agent identifier.",
        "parameters": [
          {
            "description": "Agent identifier whose documents should be returned",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Page number",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 10,
            "description": "Items per page",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Documents retrieved successfully",
            "schema": {
              "properties": {
                "document": {
                  "items": {
                    "properties": {
                      "chunks": {
                        "description": "Document chunks",
                        "items": {
                          "properties": {
                            "chunk_index": {
                              "description": "Chunk index in document",
                              "type": "integer"
                            },
                            "content": {
                              "description": "Chunk content",
                              "type": "string"
                            },
                            "created_at": {
                              "description": "Creation timestamp",
                              "format": "date-time",
                              "type": "string"
                            },
                            "embedding_model": {
                              "description": "Embedding model used",
                              "type": "string"
                            },
                            "id": {
                              "description": "Chunk unique identifier",
                              "format": "uuid",
                              "type": "string"
                            },
                            "word_count": {
                              "description": "Word count in chunk",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "document_type": {
                        "description": "Document type",
                        "enum": [
                          "pdf",
                          "docx",
                          "txt",
                          "xml",
                          "csv",
                          "json",
                          "xlsx",
                          "html"
                        ],
                        "type": "string"
                      },
                      "file_size": {
                        "description": "File size in bytes",
                        "type": "integer"
                      },
                      "id": {
                        "description": "Document unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "original_filename": {
                        "description": "Original filename",
                        "type": "string"
                      },
                      "page_count": {
                        "description": "Total page count",
                        "type": "integer"
                      },
                      "processing_error": {
                        "description": "Processing error message",
                        "type": "string"
                      },
                      "status": {
                        "description": "Processing status",
                        "enum": [
                          "pending",
                          "processing",
                          "processed",
                          "failed"
                        ],
                        "type": "string"
                      },
                      "user": {
                        "description": "User information",
                        "type": "object"
                      },
                      "word_count": {
                        "description": "Total word count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "pagination": {
                  "properties": {
                    "has_next": {
                      "description": "Has next page",
                      "type": "boolean"
                    },
                    "has_prev": {
                      "description": "Has previous page",
                      "type": "boolean"
                    },
                    "page": {
                      "description": "Current page number",
                      "type": "integer"
                    },
                    "pages": {
                      "description": "Total number of pages",
                      "type": "integer"
                    },
                    "per_page": {
                      "description": "Items per page",
                      "type": "integer"
                    },
                    "total": {
                      "description": "Total number of items",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid agent_id provided",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Return paginated documents filtered by agent.",
        "tags": [
          "Documents"
        ]
      }
    },
    "/api/v1/document/bulk-delete": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Soft delete multiple documents at once.",
        "parameters": [
          {
            "description": "Request body with document IDs to delete",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "document_ids": {
                  "description": "Array of document IDs to delete",
                  "example": [
                    "550e8400-e29b-41d4-a716-446655440001",
                    "550e8400-e29b-41d4-a716-446655440002"
                  ],
                  "items": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "document_ids"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Documents deleted successfully",
            "schema": {
              "properties": {
                "deleted_chunks_count": {
                  "description": "Number of chunks deleted",
                  "type": "integer"
                },
                "deleted_documents_count": {
                  "description": "Number of documents deleted",
                  "type": "integer"
                },
                "message": {
                  "description": "Success message",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid document_ids provided",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "No active documents found to delete",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Soft delete multiple documents at once",
        "tags": [
          "Documents"
        ]
      }
    },
    "/api/v1/document/chunk/deleted": {
      "get": {
        "description": "Get all soft-deleted document chunks for the current user.",
        "responses": {
          "200": {
            "description": "Deleted chunks retrieved successfully",
            "schema": {
              "properties": {
                "deleted_chunks": {
                  "description": "List of deleted chunks",
                  "items": {
                    "properties": {
                      "chunk_index": {
                        "description": "Chunk index in document",
                        "type": "integer"
                      },
                      "content": {
                        "description": "Chunk content",
                        "type": "string"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "embedding_model": {
                        "description": "Embedding model used",
                        "type": "string"
                      },
                      "id": {
                        "description": "Chunk unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "word_count": {
                        "description": "Word count in chunk",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all soft-deleted document chunks for the current user",
        "tags": [
          "Document Chunks"
        ]
      }
    },
    "/api/v1/document/chunk/{chunk_id}": {
      "delete": {
        "description": "Soft delete a document chunk by setting is_active to False.",
        "parameters": [
          {
            "description": "Chunk ID to delete",
            "format": "uuid",
            "in": "path",
            "name": "chunk_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Document chunk deleted successfully",
            "schema": {
              "properties": {
                "chunk_id": {
                  "description": "Deleted chunk ID",
                  "format": "uuid",
                  "type": "string"
                },
                "chunk_index": {
                  "description": "Chunk index",
                  "type": "integer"
                },
                "message": {
                  "description": "Success message",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Document chunk not found or already deleted",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Soft delete a document chunk by setting is_active to False",
        "tags": [
          "Document Chunks"
        ]
      }
    },
    "/api/v1/document/chunk/{chunk_id}/restore": {
      "patch": {
        "description": "Restore a soft-deleted document chunk by setting is_active to True.",
        "parameters": [
          {
            "description": "Chunk ID to restore",
            "format": "uuid",
            "in": "path",
            "name": "chunk_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Document chunk restored successfully",
            "schema": {
              "properties": {
                "chunk_id": {
                  "description": "Restored chunk ID",
                  "format": "uuid",
                  "type": "string"
                },
                "chunk_index": {
                  "description": "Chunk index",
                  "type": "integer"
                },
                "message": {
                  "description": "Success message",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Cannot restore chunk: parent document is deleted",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Deleted document chunk not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Restore a soft-deleted document chunk by setting is_active to True",
        "tags": [
          "Document Chunks"
        ]
      }
    },
    "/api/v1/document/deleted": {
      "get": {
        "description": "Get all soft-deleted documents for the current user.",
        "responses": {
          "200": {
            "description": "Deleted documents retrieved successfully",
            "schema": {
              "properties": {
                "deleted_documents": {
                  "description": "List of deleted documents",
                  "items": {
                    "properties": {
                      "chunks": {
                        "description": "Document chunks",
                        "items": {
                          "properties": {
                            "chunk_index": {
                              "description": "Chunk index in document",
                              "type": "integer"
                            },
                            "content": {
                              "description": "Chunk content",
                              "type": "string"
                            },
                            "created_at": {
                              "description": "Creation timestamp",
                              "format": "date-time",
                              "type": "string"
                            },
                            "embedding_model": {
                              "description": "Embedding model used",
                              "type": "string"
                            },
                            "id": {
                              "description": "Chunk unique identifier",
                              "format": "uuid",
                              "type": "string"
                            },
                            "word_count": {
                              "description": "Word count in chunk",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "document_type": {
                        "description": "Document type",
                        "enum": [
                          "pdf",
                          "docx",
                          "txt",
                          "xml",
                          "csv",
                          "json",
                          "xlsx",
                          "html"
                        ],
                        "type": "string"
                      },
                      "file_size": {
                        "description": "File size in bytes",
                        "type": "integer"
                      },
                      "id": {
                        "description": "Document unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "original_filename": {
                        "description": "Original filename",
                        "type": "string"
                      },
                      "page_count": {
                        "description": "Total page count",
                        "type": "integer"
                      },
                      "processing_error": {
                        "description": "Processing error message",
                        "type": "string"
                      },
                      "status": {
                        "description": "Processing status",
                        "enum": [
                          "pending",
                          "processing",
                          "processed",
                          "failed"
                        ],
                        "type": "string"
                      },
                      "user": {
                        "description": "User information",
                        "type": "object"
                      },
                      "word_count": {
                        "description": "Total word count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all soft-deleted documents for the current user",
        "tags": [
          "Documents"
        ]
      }
    },
    "/api/v1/document/upload": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "Upload multiple documents from files or URLs with enhanced processing.",
        "parameters": [
          {
            "description": "Multiple document files to upload",
            "in": "formData",
            "name": "files",
            "type": "file"
          },
          {
            "description": "Single document file to upload",
            "in": "formData",
            "name": "file",
            "type": "file"
          },
          {
            "description": "Agent ID to associate with documents",
            "format": "uuid",
            "in": "formData",
            "name": "agent_id",
            "type": "string"
          },
          {
            "description": "Single URL to download document from",
            "format": "uri",
            "in": "formData",
            "name": "url",
            "type": "string"
          },
          {
            "description": "Multiple URLs (JSON array or comma-separated)",
            "in": "formData",
            "name": "urls",
            "type": "string"
          },
          {
            "description": "URLs and configuration in JSON format",
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "agent_id": {
                  "description": "Agent ID",
                  "format": "uuid",
                  "type": "string"
                },
                "url": {
                  "description": "Single URL",
                  "format": "uri",
                  "type": "string"
                },
                "urls": {
                  "description": "Multiple URLs",
                  "items": {
                    "format": "uri",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All documents processed successfully",
            "schema": {
              "properties": {
                "documents": {
                  "description": "Uploaded documents",
                  "items": {
                    "properties": {
                      "chunks": {
                        "description": "Document chunks",
                        "items": {
                          "properties": {
                            "chunk_index": {
                              "description": "Chunk index in document",
                              "type": "integer"
                            },
                            "content": {
                              "description": "Chunk content",
                              "type": "string"
                            },
                            "created_at": {
                              "description": "Creation timestamp",
                              "format": "date-time",
                              "type": "string"
                            },
                            "embedding_model": {
                              "description": "Embedding model used",
                              "type": "string"
                            },
                            "id": {
                              "description": "Chunk unique identifier",
                              "format": "uuid",
                              "type": "string"
                            },
                            "word_count": {
                              "description": "Word count in chunk",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "document_type": {
                        "description": "Document type",
                        "enum": [
                          "pdf",
                          "docx",
                          "txt",
                          "xml",
                          "csv",
                          "json",
                          "xlsx",
                          "html"
                        ],
                        "type": "string"
                      },
                      "file_size": {
                        "description": "File size in bytes",
                        "type": "integer"
                      },
                      "id": {
                        "description": "Document unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "original_filename": {
                        "description": "Original filename",
                        "type": "string"
                      },
                      "page_count": {
                        "description": "Total page count",
                        "type": "integer"
                      },
                      "processing_error": {
                        "description": "Processing error message",
                        "type": "string"
                      },
                      "status": {
                        "description": "Processing status",
                        "enum": [
                          "pending",
                          "processing",
                          "processed",
                          "failed"
                        ],
                        "type": "string"
                      },
                      "user": {
                        "description": "User information",
                        "type": "object"
                      },
                      "word_count": {
                        "description": "Total word count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "documents_processed": {
                  "description": "Number of documents processed",
                  "type": "integer"
                },
                "errors": {
                  "description": "Upload errors",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "errors_count": {
                  "description": "Number of errors",
                  "type": "integer"
                },
                "success": {
                  "description": "Upload success status",
                  "type": "boolean"
                },
                "task_ids": {
                  "description": "Processing task IDs",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "207": {
            "description": "Partial success - Some documents processed with errors",
            "schema": {
              "properties": {
                "documents": {
                  "description": "Uploaded documents",
                  "items": {
                    "properties": {
                      "chunks": {
                        "description": "Document chunks",
                        "items": {
                          "properties": {
                            "chunk_index": {
                              "description": "Chunk index in document",
                              "type": "integer"
                            },
                            "content": {
                              "description": "Chunk content",
                              "type": "string"
                            },
                            "created_at": {
                              "description": "Creation timestamp",
                              "format": "date-time",
                              "type": "string"
                            },
                            "embedding_model": {
                              "description": "Embedding model used",
                              "type": "string"
                            },
                            "id": {
                              "description": "Chunk unique identifier",
                              "format": "uuid",
                              "type": "string"
                            },
                            "word_count": {
                              "description": "Word count in chunk",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "document_type": {
                        "description": "Document type",
                        "enum": [
                          "pdf",
                          "docx",
                          "txt",
                          "xml",
                          "csv",
                          "json",
                          "xlsx",
                          "html"
                        ],
                        "type": "string"
                      },
                      "file_size": {
                        "description": "File size in bytes",
                        "type": "integer"
                      },
                      "id": {
                        "description": "Document unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "original_filename": {
                        "description": "Original filename",
                        "type": "string"
                      },
                      "page_count": {
                        "description": "Total page count",
                        "type": "integer"
                      },
                      "processing_error": {
                        "description": "Processing error message",
                        "type": "string"
                      },
                      "status": {
                        "description": "Processing status",
                        "enum": [
                          "pending",
                          "processing",
                          "processed",
                          "failed"
                        ],
                        "type": "string"
                      },
                      "user": {
                        "description": "User information",
                        "type": "object"
                      },
                      "word_count": {
                        "description": "Total word count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "documents_processed": {
                  "description": "Number of documents processed",
                  "type": "integer"
                },
                "errors": {
                  "description": "Upload errors",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "errors_count": {
                  "description": "Number of errors",
                  "type": "integer"
                },
                "success": {
                  "description": "Upload success status",
                  "type": "boolean"
                },
                "task_ids": {
                  "description": "Processing task IDs",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - No files or URLs provided, or all uploads failed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Upload and process multiple documents with optimized batch handling",
        "tags": [
          "Documents"
        ]
      }
    },
    "/api/v1/document/{document_id}": {
      "delete": {
        "description": "Soft delete a document by setting is_active to False. Also soft deletes all associated document chunks.",
        "parameters": [
          {
            "description": "Document ID to delete",
            "format": "uuid",
            "in": "path",
            "name": "document_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Document deleted successfully",
            "schema": {
              "properties": {
                "deleted_chunks_count": {
                  "description": "Number of chunks deleted",
                  "type": "integer"
                },
                "document_id": {
                  "description": "Deleted document ID",
                  "format": "uuid",
                  "type": "string"
                },
                "message": {
                  "description": "Success message",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Document not found or already deleted",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Soft delete a document by setting is_active to False\nAlso soft deletes all associated document chunks",
        "tags": [
          "Documents"
        ]
      }
    },
    "/api/v1/document/{document_id}/chunk": {
      "delete": {
        "description": "Soft delete all chunks for a specific document.",
        "parameters": [
          {
            "description": "Document ID whose chunks to delete",
            "format": "uuid",
            "in": "path",
            "name": "document_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Document chunks deleted successfully",
            "schema": {
              "properties": {
                "deleted_chunks_count": {
                  "description": "Number of chunks deleted",
                  "type": "integer"
                },
                "document_id": {
                  "description": "Document ID",
                  "format": "uuid",
                  "type": "string"
                },
                "message": {
                  "description": "Success message",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Document not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Soft delete all chunks for a specific document",
        "tags": [
          "Document Chunks"
        ]
      }
    },
    "/api/v1/document/{document_id}/chunk/restore-all": {
      "patch": {
        "description": "Restore all soft-deleted chunks for a specific document.",
        "parameters": [
          {
            "description": "Document ID whose chunks to restore",
            "format": "uuid",
            "in": "path",
            "name": "document_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Document chunks restored successfully",
            "schema": {
              "properties": {
                "document_id": {
                  "description": "Document ID",
                  "format": "uuid",
                  "type": "string"
                },
                "message": {
                  "description": "Success message",
                  "type": "string"
                },
                "restored_chunks_count": {
                  "description": "Number of chunks restored",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Active document not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Restore all soft-deleted chunks for a specific document",
        "tags": [
          "Document Chunks"
        ]
      }
    },
    "/api/v1/document/{document_id}/restore": {
      "patch": {
        "description": "Restore a soft-deleted document by setting is_active to True.",
        "parameters": [
          {
            "description": "Document ID to restore",
            "format": "uuid",
            "in": "path",
            "name": "document_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Document restored successfully",
            "schema": {
              "properties": {
                "document_id": {
                  "description": "Restored document ID",
                  "format": "uuid",
                  "type": "string"
                },
                "filename": {
                  "description": "Document filename",
                  "type": "string"
                },
                "message": {
                  "description": "Success message",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Deleted document not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Restore a soft-deleted document by setting is_active to True",
        "tags": [
          "Documents"
        ]
      }
    },
    "/api/v1/error-analysis": {
      "get": {
        "description": "Analyze API errors by status code and endpoint. Shows error distribution and identifies problematic endpoints. Requires API key authentication with 'read' or 'admin' scope.",
        "parameters": [
          {
            "description": "Number of days to look back for analytics",
            "example": 30,
            "in": "query",
            "name": "days",
            "schema": {
              "default": 30,
              "maximum": 365,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Error analysis retrieved successfully",
            "schema": {
              "properties": {
                "data": {
                  "properties": {
                    "period_days": {
                      "example": 30,
                      "type": "integer"
                    },
                    "status_code_breakdown": {
                      "items": {
                        "properties": {
                          "count": {
                            "example": 125,
                            "type": "integer"
                          },
                          "status_code": {
                            "example": 404,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "top_error_endpoints": {
                      "items": {
                        "properties": {
                          "endpoint": {
                            "example": "/api/v1/nonexistent",
                            "type": "string"
                          },
                          "error_count": {
                            "example": 87,
                            "type": "integer"
                          },
                          "method": {
                            "example": "GET",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "success": {
                  "example": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - API key authentication required",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get error analysis and breakdown",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/lead": {
      "post": {
        "description": "Create a new lead for administrative purposes asynchronously. Requires user authentication.",
        "parameters": [
          {
            "description": "Lead information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "company_id": {
                  "description": "Company identifier",
                  "example": "123e4567-e89b-12d3-a456-426614174000",
                  "format": "uuid",
                  "type": "string"
                },
                "consent_data_processing": {
                  "default": true,
                  "description": "Data processing consent flag",
                  "example": true,
                  "type": "boolean"
                },
                "consent_marketing": {
                  "default": false,
                  "description": "Marketing consent flag",
                  "example": true,
                  "type": "boolean"
                },
                "email": {
                  "description": "Lead email address",
                  "example": "jane.smith@example.com",
                  "format": "email",
                  "maxLength": 255,
                  "type": "string"
                },
                "first_name": {
                  "description": "Lead first name",
                  "example": "Jane",
                  "maxLength": 100,
                  "type": "string"
                },
                "last_name": {
                  "description": "Lead last name",
                  "example": "Smith",
                  "maxLength": 100,
                  "type": "string"
                },
                "notes": {
                  "description": "Additional notes about the lead",
                  "example": "Interested in premium features",
                  "type": "string"
                },
                "phone": {
                  "description": "Lead phone number",
                  "example": "+1234567890",
                  "maxLength": 20,
                  "type": "string"
                },
                "source": {
                  "description": "Lead source",
                  "example": "landing_page",
                  "maxLength": 100,
                  "type": "string"
                },
                "status": {
                  "default": "new",
                  "description": "Lead status",
                  "enum": [
                    "new",
                    "contacted",
                    "qualified",
                    "converted",
                    "lost"
                  ],
                  "example": "new",
                  "type": "string"
                }
              },
              "required": [
                "company_id",
                "first_name",
                "last_name",
                "email"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Lead creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Validation failed",
            "schema": {
              "properties": {
                "error": {
                  "description": "Error message",
                  "example": "Validation failed",
                  "type": "string"
                },
                "errors": {
                  "description": "Field-specific validation errors",
                  "example": {
                    "email": [
                      "Invalid email format"
                    ],
                    "password": [
                      "Password too short"
                    ]
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a lead (admin/company use)",
        "tags": [
          "Leads"
        ]
      }
    },
    "/api/v1/lead/company": {
      "get": {
        "description": "Get a paginated list of leads for the authenticated company with optional filtering.",
        "parameters": [
          {
            "default": 1,
            "description": "Page number",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "integer"
          },
          {
            "default": 20,
            "description": "Items per page (max 100)",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "per_page",
            "type": "integer"
          },
          {
            "description": "Filter by lead status",
            "enum": [
              "new",
              "contacted",
              "qualified",
              "converted",
              "lost"
            ],
            "in": "query",
            "name": "status",
            "type": "string"
          },
          {
            "description": "Search term to filter leads by name or email",
            "in": "query",
            "name": "search",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Leads retrieved successfully",
            "schema": {
              "properties": {
                "data": {
                  "properties": {
                    "leads": {
                      "items": {
                        "properties": {
                          "company": {
                            "properties": {
                              "address": {
                                "description": "Company address details",
                                "type": "object"
                              },
                              "created_at": {
                                "description": "Creation timestamp",
                                "format": "date-time",
                                "type": "string"
                              },
                              "email": {
                                "description": "Company email",
                                "format": "email",
                                "type": "string"
                              },
                              "id": {
                                "description": "Company unique identifier",
                                "format": "uuid",
                                "type": "string"
                              },
                              "is_active": {
                                "default": true,
                                "description": "Company active status",
                                "type": "boolean"
                              },
                              "is_verified": {
                                "default": false,
                                "description": "Company verification status",
                                "type": "boolean"
                              },
                              "logo": {
                                "description": "Company logo URL or file path",
                                "type": "string"
                              },
                              "name": {
                                "description": "Company name",
                                "type": "string"
                              },
                              "phone": {
                                "description": "Company phone number",
                                "type": "string"
                              },
                              "updated_at": {
                                "description": "Update timestamp",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "consent_data_processing": {
                            "description": "Data processing consent flag",
                            "type": "boolean"
                          },
                          "consent_marketing": {
                            "description": "Marketing consent flag",
                            "type": "boolean"
                          },
                          "created_at": {
                            "description": "Creation timestamp",
                            "format": "date-time",
                            "type": "string"
                          },
                          "email": {
                            "description": "Lead email address",
                            "format": "email",
                            "maxLength": 255,
                            "type": "string"
                          },
                          "first_name": {
                            "description": "Lead first name",
                            "maxLength": 100,
                            "type": "string"
                          },
                          "full_name": {
                            "description": "Lead full name (computed)",
                            "readOnly": true,
                            "type": "string"
                          },
                          "id": {
                            "description": "Lead unique identifier",
                            "format": "uuid",
                            "type": "string"
                          },
                          "is_active": {
                            "description": "Active status flag",
                            "type": "boolean"
                          },
                          "last_activity": {
                            "description": "Last activity timestamp",
                            "format": "date-time",
                            "type": "string"
                          },
                          "last_name": {
                            "description": "Lead last name",
                            "maxLength": 100,
                            "type": "string"
                          },
                          "notes": {
                            "description": "Additional notes about the lead",
                            "type": "string"
                          },
                          "phone": {
                            "description": "Lead phone number",
                            "maxLength": 20,
                            "type": "string"
                          },
                          "source": {
                            "description": "Lead source",
                            "maxLength": 100,
                            "type": "string"
                          },
                          "status": {
                            "description": "Lead status",
                            "enum": [
                              "new",
                              "contacted",
                              "qualified",
                              "converted",
                              "lost"
                            ],
                            "type": "string"
                          },
                          "updated_at": {
                            "description": "Update timestamp",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "properties": {
                        "has_next": {
                          "example": true,
                          "type": "boolean"
                        },
                        "has_prev": {
                          "example": false,
                          "type": "boolean"
                        },
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 8,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 20,
                          "type": "integer"
                        },
                        "total": {
                          "example": 150,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "success": {
                  "example": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get leads for a specific company",
        "tags": [
          "Leads"
        ]
      }
    },
    "/api/v1/lead/register": {
      "post": {
        "description": "Register a new lead and create a chat session asynchronously. This is the main endpoint for the chatbot widget and does not require authentication.",
        "parameters": [
          {
            "description": "Lead registration information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "agent_id": {
                  "description": "Agent identifier",
                  "example": "123e4567-e89b-12d3-a456-426614174000",
                  "format": "uuid",
                  "type": "string"
                },
                "consent_data_processing": {
                  "default": true,
                  "description": "Data processing consent flag",
                  "example": true,
                  "type": "boolean"
                },
                "consent_marketing": {
                  "default": false,
                  "description": "Marketing consent flag",
                  "example": true,
                  "type": "boolean"
                },
                "email": {
                  "description": "Lead email address",
                  "example": "john.doe@example.com",
                  "format": "email",
                  "maxLength": 255,
                  "type": "string"
                },
                "first_name": {
                  "description": "Lead first name",
                  "example": "John",
                  "maxLength": 100,
                  "type": "string"
                },
                "last_name": {
                  "description": "Lead last name",
                  "example": "Doe",
                  "maxLength": 100,
                  "type": "string"
                },
                "phone": {
                  "description": "Lead phone number",
                  "example": "+1234567890",
                  "maxLength": 20,
                  "type": "string"
                },
                "source": {
                  "description": "Lead source",
                  "example": "website_chatbot",
                  "maxLength": 100,
                  "type": "string"
                }
              },
              "required": [
                "agent_id",
                "first_name",
                "last_name",
                "email"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Lead registration request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid company ID or company is not active",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Register a new lead and create a chat session\nThis is the main endpoint for the chatbot widget",
        "tags": [
          "Leads"
        ]
      }
    },
    "/api/v1/lead/{lead_id}": {
      "delete": {
        "description": "Soft delete a lead by deactivating it asynchronously.",
        "parameters": [
          {
            "description": "Lead ID",
            "format": "uuid",
            "in": "path",
            "name": "lead_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Lead deletion request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Lead not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete (deactivate) a lead",
        "tags": [
          "Leads"
        ]
      },
      "get": {
        "description": "Retrieve detailed information about a specific lead.",
        "parameters": [
          {
            "description": "Lead ID",
            "format": "uuid",
            "in": "path",
            "name": "lead_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Lead retrieved successfully",
            "schema": {
              "properties": {
                "lead": {
                  "properties": {
                    "company": {
                      "properties": {
                        "address": {
                          "description": "Company address details",
                          "type": "object"
                        },
                        "created_at": {
                          "description": "Creation timestamp",
                          "format": "date-time",
                          "type": "string"
                        },
                        "email": {
                          "description": "Company email",
                          "format": "email",
                          "type": "string"
                        },
                        "id": {
                          "description": "Company unique identifier",
                          "format": "uuid",
                          "type": "string"
                        },
                        "is_active": {
                          "default": true,
                          "description": "Company active status",
                          "type": "boolean"
                        },
                        "is_verified": {
                          "default": false,
                          "description": "Company verification status",
                          "type": "boolean"
                        },
                        "logo": {
                          "description": "Company logo URL or file path",
                          "type": "string"
                        },
                        "name": {
                          "description": "Company name",
                          "type": "string"
                        },
                        "phone": {
                          "description": "Company phone number",
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "Update timestamp",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "consent_data_processing": {
                      "description": "Data processing consent flag",
                      "type": "boolean"
                    },
                    "consent_marketing": {
                      "description": "Marketing consent flag",
                      "type": "boolean"
                    },
                    "created_at": {
                      "description": "Creation timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "email": {
                      "description": "Lead email address",
                      "format": "email",
                      "maxLength": 255,
                      "type": "string"
                    },
                    "first_name": {
                      "description": "Lead first name",
                      "maxLength": 100,
                      "type": "string"
                    },
                    "full_name": {
                      "description": "Lead full name (computed)",
                      "readOnly": true,
                      "type": "string"
                    },
                    "id": {
                      "description": "Lead unique identifier",
                      "format": "uuid",
                      "type": "string"
                    },
                    "is_active": {
                      "description": "Active status flag",
                      "type": "boolean"
                    },
                    "last_activity": {
                      "description": "Last activity timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "last_name": {
                      "description": "Lead last name",
                      "maxLength": 100,
                      "type": "string"
                    },
                    "notes": {
                      "description": "Additional notes about the lead",
                      "type": "string"
                    },
                    "phone": {
                      "description": "Lead phone number",
                      "maxLength": 20,
                      "type": "string"
                    },
                    "source": {
                      "description": "Lead source",
                      "maxLength": 100,
                      "type": "string"
                    },
                    "status": {
                      "description": "Lead status",
                      "enum": [
                        "new",
                        "contacted",
                        "qualified",
                        "converted",
                        "lost"
                      ],
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "Update timestamp",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "success": {
                  "example": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Lead not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a specific lead",
        "tags": [
          "Leads"
        ]
      },
      "put": {
        "description": "Update lead information asynchronously.",
        "parameters": [
          {
            "description": "Lead ID",
            "format": "uuid",
            "in": "path",
            "name": "lead_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Updated lead information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "consent_data_processing": {
                  "description": "Data processing consent flag",
                  "example": true,
                  "type": "boolean"
                },
                "consent_marketing": {
                  "description": "Marketing consent flag",
                  "example": false,
                  "type": "boolean"
                },
                "email": {
                  "description": "Lead email address",
                  "example": "john.doe@example.com",
                  "format": "email",
                  "maxLength": 255,
                  "type": "string"
                },
                "first_name": {
                  "description": "Lead first name",
                  "example": "John",
                  "maxLength": 100,
                  "type": "string"
                },
                "last_name": {
                  "description": "Lead last name",
                  "example": "Doe",
                  "maxLength": 100,
                  "type": "string"
                },
                "notes": {
                  "description": "Additional notes about the lead",
                  "example": "Follow up scheduled for next week",
                  "type": "string"
                },
                "phone": {
                  "description": "Lead phone number",
                  "example": "+1234567890",
                  "maxLength": 20,
                  "type": "string"
                },
                "source": {
                  "description": "Lead source",
                  "example": "referral",
                  "maxLength": 100,
                  "type": "string"
                },
                "status": {
                  "description": "Lead status",
                  "enum": [
                    "new",
                    "contacted",
                    "qualified",
                    "converted",
                    "lost"
                  ],
                  "example": "contacted",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Lead update request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Validation failed",
            "schema": {
              "properties": {
                "error": {
                  "description": "Error message",
                  "example": "Validation failed",
                  "type": "string"
                },
                "errors": {
                  "description": "Field-specific validation errors",
                  "example": {
                    "email": [
                      "Invalid email format"
                    ],
                    "password": [
                      "Password too short"
                    ]
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Lead not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update a lead",
        "tags": [
          "Leads"
        ]
      }
    },
    "/api/v1/message/deleted": {
      "get": {
        "description": "Get all soft-deleted messages for the current user.",
        "responses": {
          "200": {
            "description": "Deleted messages retrieved successfully",
            "schema": {
              "properties": {
                "deleted_messages": {
                  "description": "List of deleted messages",
                  "items": {
                    "properties": {
                      "confidence_score": {
                        "description": "AI confidence score",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "type": "number"
                      },
                      "content": {
                        "description": "Message content",
                        "type": "string"
                      },
                      "content_type": {
                        "default": "text",
                        "description": "Content type",
                        "type": "string"
                      },
                      "context_used": {
                        "description": "Context snippets supplied to the model",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "id": {
                        "description": "Message unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "metadata": {
                        "additionalProperties": true,
                        "description": "Additional message metadata including citation coverage",
                        "properties": {
                          "all_sources": {
                            "description": "Full list of source legend entries returned for the response",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "citation_warnings": {
                            "default": [],
                            "description": "Warnings raised while validating citations (e.g., out-of-range references)",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "cited_sources": {
                            "description": "Numeric source identifiers actually referenced in the response",
                            "items": {
                              "minimum": 1,
                              "type": "integer"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "model_used": {
                        "description": "AI model used",
                        "type": "string"
                      },
                      "processing_time": {
                        "description": "Processing time in seconds",
                        "type": "number"
                      },
                      "role": {
                        "description": "Message role",
                        "enum": [
                          "user",
                          "assistant",
                          "system"
                        ],
                        "type": "string"
                      },
                      "sources": {
                        "description": "Resolved citations enriched with document metadata",
                        "items": {
                          "properties": {
                            "cited": {
                              "default": true,
                              "description": "Indicates whether the source was explicitly cited in the answer",
                              "type": "boolean"
                            },
                            "document_name": {
                              "description": "Human readable name of the cited document or dataset",
                              "type": "string"
                            },
                            "source_number": {
                              "description": "Ordinal assigned to the context source (matches [Source #] in the answer)",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "url": {
                              "description": "Resolvable URL to the referenced document when available",
                              "format": "uri",
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "required": [
                            "source_number",
                            "document_name"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "tokens_used": {
                        "description": "Tokens used for this message",
                        "type": "integer"
                      },
                      "user_feedback": {
                        "description": "User feedback rating",
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all soft-deleted messages",
        "tags": [
          "Messages"
        ]
      }
    },
    "/api/v1/message/{message_id}": {
      "delete": {
        "description": "Soft delete a message by setting is_active to False.",
        "parameters": [
          {
            "description": "Message ID to delete",
            "format": "uuid",
            "in": "path",
            "name": "message_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Message deleted successfully",
            "schema": {
              "properties": {
                "message": {
                  "description": "Success message",
                  "type": "string"
                },
                "message_id": {
                  "description": "Deleted message ID",
                  "format": "uuid",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Message not found or already deleted",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Soft delete a message by setting is_active to False",
        "tags": [
          "Messages"
        ]
      }
    },
    "/api/v1/message/{message_id}/restore": {
      "patch": {
        "description": "Restore a soft-deleted message by setting is_active to True.",
        "parameters": [
          {
            "description": "Message ID to restore",
            "format": "uuid",
            "in": "path",
            "name": "message_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Message restored successfully",
            "schema": {
              "properties": {
                "message": {
                  "description": "Success message",
                  "type": "string"
                },
                "message_id": {
                  "description": "Restored message ID",
                  "format": "uuid",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Cannot restore message: parent conversation is deleted",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Deleted message not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Restore a soft-deleted message by setting is_active to True",
        "tags": [
          "Messages"
        ]
      }
    },
    "/api/v1/overview": {
      "get": {
        "description": "Get overall analytics overview including API key counts, usage statistics, and performance metrics. Requires API key authentication with 'read' or 'admin' scope.",
        "parameters": [
          {
            "description": "Number of days to look back for analytics",
            "example": 30,
            "in": "query",
            "name": "days",
            "schema": {
              "default": 30,
              "maximum": 365,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics overview retrieved successfully",
            "schema": {
              "properties": {
                "data": {
                  "properties": {
                    "api_keys": {
                      "properties": {
                        "active": {
                          "example": 12,
                          "type": "integer"
                        },
                        "expired": {
                          "example": 2,
                          "type": "integer"
                        },
                        "revoked": {
                          "example": 1,
                          "type": "integer"
                        },
                        "total": {
                          "example": 15,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "period_days": {
                      "example": 30,
                      "type": "integer"
                    },
                    "usage": {
                      "properties": {
                        "avg_response_time_ms": {
                          "example": 245.7,
                          "format": "float",
                          "type": "number"
                        },
                        "success_rate": {
                          "example": 98.5,
                          "format": "float",
                          "type": "number"
                        },
                        "total_requests": {
                          "example": 125000,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "success": {
                  "example": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - API key authentication required",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get overall analytics overview",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/providers": {
      "get": {
        "description": "List all active providers, optionally filtered by type.",
        "parameters": [
          {
            "description": "Filter by provider type",
            "enum": [
              "llm",
              "embedding",
              "both"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Include models in response",
            "in": "query",
            "name": "include_models",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Providers retrieved",
            "schema": {
              "properties": {
                "providers": {
                  "items": {
                    "properties": {
                      "created_at": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "default_base_url": {
                        "description": "Default base URL",
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                      },
                      "description": {
                        "description": "Provider description",
                        "type": "string"
                      },
                      "documentation_url": {
                        "description": "Documentation URL",
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                      },
                      "id": {
                        "description": "Provider unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "is_featured": {
                        "description": "Whether provider is featured",
                        "type": "boolean"
                      },
                      "label": {
                        "description": "Provider display label (e.g., 'OpenAI')",
                        "type": "string"
                      },
                      "logo_url": {
                        "description": "Logo URL",
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                      },
                      "pricing_tier": {
                        "description": "Pricing tier",
                        "enum": [
                          "free",
                          "budget",
                          "mid",
                          "premium",
                          "variable"
                        ],
                        "type": "string"
                      },
                      "provider_type": {
                        "description": "Provider type",
                        "enum": [
                          "llm",
                          "embedding",
                          "both"
                        ],
                        "type": "string"
                      },
                      "requires_api_key": {
                        "description": "Whether API key is required",
                        "type": "boolean"
                      },
                      "requires_base_url": {
                        "description": "Whether base URL is required",
                        "type": "boolean"
                      },
                      "tags": {
                        "description": "Provider tags",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "updated_at": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "value": {
                        "description": "Provider value (e.g., 'openai')",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "total": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid provider type",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all providers",
        "tags": [
          "Providers"
        ]
      },
      "post": {
        "description": "Create a new provider configuration asynchronously.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "api_key_env_var": "OPENAI_API_KEY",
                "default_base_url": "https://api.openai.com/v1",
                "description": "Industry-leading GPT models",
                "documentation_url": "https://platform.openai.com/docs",
                "is_featured": true,
                "label": "OpenAI",
                "pricing_tier": "premium",
                "provider_type": "both",
                "requires_api_key": true,
                "requires_base_url": false,
                "sort_order": 1,
                "value": "openai"
              },
              "schema": {
                "properties": {
                  "api_key_env_var": {
                    "maxLength": 100,
                    "nullable": true,
                    "type": "string"
                  },
                  "default_base_url": {
                    "format": "uri",
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "description": "Provider description",
                    "type": "string"
                  },
                  "documentation_url": {
                    "format": "uri",
                    "nullable": true,
                    "type": "string"
                  },
                  "is_featured": {
                    "default": false,
                    "type": "boolean"
                  },
                  "label": {
                    "description": "Provider label (e.g., 'OpenAI')",
                    "maxLength": 200,
                    "type": "string"
                  },
                  "logo_url": {
                    "format": "uri",
                    "nullable": true,
                    "type": "string"
                  },
                  "pricing_tier": {
                    "default": "mid",
                    "enum": [
                      "free",
                      "budget",
                      "mid",
                      "premium",
                      "variable"
                    ],
                    "type": "string"
                  },
                  "provider_type": {
                    "default": "llm",
                    "enum": [
                      "llm",
                      "embedding",
                      "both"
                    ],
                    "type": "string"
                  },
                  "requires_api_key": {
                    "default": true,
                    "type": "boolean"
                  },
                  "requires_base_url": {
                    "default": false,
                    "type": "boolean"
                  },
                  "sort_order": {
                    "default": 0,
                    "type": "integer"
                  },
                  "tags": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "value": {
                    "description": "Provider value (e.g., 'openai')",
                    "maxLength": 100,
                    "type": "string"
                  }
                },
                "required": [
                  "value",
                  "label"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Provider creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new provider",
        "tags": [
          "Providers"
        ]
      }
    },
    "/api/v1/providers/bulk-import": {
      "post": {
        "description": "Bulk import providers and models from JSON data asynchronously.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "providers": {
                    "items": {
                      "properties": {
                        "description": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "models": {
                          "items": {
                            "properties": {
                              "context": {
                                "type": "integer"
                              },
                              "description": {
                                "type": "string"
                              },
                              "dimension": {
                                "type": "integer"
                              },
                              "model_type": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "pricing_tier": {
                          "type": "string"
                        },
                        "provider_type": {
                          "enum": [
                            "llm",
                            "embedding",
                            "both"
                          ],
                          "type": "string"
                        },
                        "requires_api_key": {
                          "type": "boolean"
                        },
                        "requires_base_url": {
                          "type": "boolean"
                        },
                        "value": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "providers"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Provider import request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Bulk import providers and models.",
        "tags": [
          "Providers"
        ]
      }
    },
    "/api/v1/providers/{provider_id}": {
      "delete": {
        "description": "Soft delete a provider asynchronously.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "provider_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Provider deletion request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "404": {
            "description": "Provider not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a provider (soft delete)",
        "tags": [
          "Providers"
        ]
      },
      "get": {
        "description": "Get a specific provider by ID.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "provider_id",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "include_models",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Provider retrieved",
            "schema": {
              "properties": {
                "created_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "default_base_url": {
                  "description": "Default base URL",
                  "format": "uri",
                  "nullable": true,
                  "type": "string"
                },
                "description": {
                  "description": "Provider description",
                  "type": "string"
                },
                "documentation_url": {
                  "description": "Documentation URL",
                  "format": "uri",
                  "nullable": true,
                  "type": "string"
                },
                "id": {
                  "description": "Provider unique identifier",
                  "format": "uuid",
                  "type": "string"
                },
                "is_featured": {
                  "description": "Whether provider is featured",
                  "type": "boolean"
                },
                "label": {
                  "description": "Provider display label (e.g., 'OpenAI')",
                  "type": "string"
                },
                "logo_url": {
                  "description": "Logo URL",
                  "format": "uri",
                  "nullable": true,
                  "type": "string"
                },
                "pricing_tier": {
                  "description": "Pricing tier",
                  "enum": [
                    "free",
                    "budget",
                    "mid",
                    "premium",
                    "variable"
                  ],
                  "type": "string"
                },
                "provider_type": {
                  "description": "Provider type",
                  "enum": [
                    "llm",
                    "embedding",
                    "both"
                  ],
                  "type": "string"
                },
                "requires_api_key": {
                  "description": "Whether API key is required",
                  "type": "boolean"
                },
                "requires_base_url": {
                  "description": "Whether base URL is required",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Provider tags",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "updated_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "value": {
                  "description": "Provider value (e.g., 'openai')",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Provider not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a specific provider",
        "tags": [
          "Providers"
        ]
      },
      "put": {
        "description": "Update an existing provider asynchronously.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "provider_id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "default_base_url": {
                    "format": "uri",
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "documentation_url": {
                    "format": "uri",
                    "type": "string"
                  },
                  "is_active": {
                    "type": "boolean"
                  },
                  "is_featured": {
                    "type": "boolean"
                  },
                  "label": {
                    "maxLength": 200,
                    "type": "string"
                  },
                  "logo_url": {
                    "format": "uri",
                    "type": "string"
                  },
                  "pricing_tier": {
                    "enum": [
                      "free",
                      "budget",
                      "mid",
                      "premium",
                      "variable"
                    ],
                    "type": "string"
                  },
                  "provider_type": {
                    "enum": [
                      "llm",
                      "embedding",
                      "both"
                    ],
                    "type": "string"
                  },
                  "requires_api_key": {
                    "type": "boolean"
                  },
                  "requires_base_url": {
                    "type": "boolean"
                  },
                  "sort_order": {
                    "type": "integer"
                  },
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Provider update request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "404": {
            "description": "Provider not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update a provider",
        "tags": [
          "Providers"
        ]
      }
    },
    "/api/v1/providers/{provider_id}/models": {
      "get": {
        "description": "List all active models for a provider, optionally filtered by type.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "provider_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter by model type",
            "enum": [
              "llm",
              "embedding"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Models retrieved",
            "schema": {
              "properties": {
                "models": {
                  "items": {
                    "properties": {
                      "context": {
                        "description": "Context length",
                        "type": "integer"
                      },
                      "description": {
                        "description": "Model description",
                        "type": "string"
                      },
                      "dimension": {
                        "description": "Embedding dimension (for embedding models)",
                        "type": "integer"
                      },
                      "display_name": {
                        "description": "Model display name",
                        "type": "string"
                      },
                      "id": {
                        "description": "Model unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "is_deprecated": {
                        "type": "boolean"
                      },
                      "is_recommended": {
                        "type": "boolean"
                      },
                      "model_type": {
                        "description": "Model type",
                        "enum": [
                          "llm",
                          "embedding"
                        ],
                        "type": "string"
                      },
                      "name": {
                        "description": "Model name",
                        "type": "string"
                      },
                      "pricing": {
                        "properties": {
                          "input": {
                            "description": "Cost per 1K input tokens",
                            "type": "number"
                          },
                          "output": {
                            "description": "Cost per 1K output tokens",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "provider_id": {
                        "description": "Provider ID",
                        "format": "uuid",
                        "type": "string"
                      },
                      "supports_function_calling": {
                        "description": "Supports function calling (for LLM models)",
                        "type": "boolean"
                      },
                      "supports_streaming": {
                        "description": "Supports streaming (for LLM models)",
                        "type": "boolean"
                      },
                      "supports_vision": {
                        "description": "Supports vision (for LLM models)",
                        "type": "boolean"
                      },
                      "tags": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "provider": {
                  "properties": {
                    "created_at": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "default_base_url": {
                      "description": "Default base URL",
                      "format": "uri",
                      "nullable": true,
                      "type": "string"
                    },
                    "description": {
                      "description": "Provider description",
                      "type": "string"
                    },
                    "documentation_url": {
                      "description": "Documentation URL",
                      "format": "uri",
                      "nullable": true,
                      "type": "string"
                    },
                    "id": {
                      "description": "Provider unique identifier",
                      "format": "uuid",
                      "type": "string"
                    },
                    "is_featured": {
                      "description": "Whether provider is featured",
                      "type": "boolean"
                    },
                    "label": {
                      "description": "Provider display label (e.g., 'OpenAI')",
                      "type": "string"
                    },
                    "logo_url": {
                      "description": "Logo URL",
                      "format": "uri",
                      "nullable": true,
                      "type": "string"
                    },
                    "pricing_tier": {
                      "description": "Pricing tier",
                      "enum": [
                        "free",
                        "budget",
                        "mid",
                        "premium",
                        "variable"
                      ],
                      "type": "string"
                    },
                    "provider_type": {
                      "description": "Provider type",
                      "enum": [
                        "llm",
                        "embedding",
                        "both"
                      ],
                      "type": "string"
                    },
                    "requires_api_key": {
                      "description": "Whether API key is required",
                      "type": "boolean"
                    },
                    "requires_base_url": {
                      "description": "Whether base URL is required",
                      "type": "boolean"
                    },
                    "tags": {
                      "description": "Provider tags",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "updated_at": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "value": {
                      "description": "Provider value (e.g., 'openai')",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "total": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid model type",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Provider not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all models for a provider",
        "tags": [
          "Models"
        ]
      },
      "post": {
        "description": "Create a new model for a provider asynchronously.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "provider_id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "context_length": 128000,
                "cost_per_1k_tokens_input": 0.01,
                "cost_per_1k_tokens_output": 0.03,
                "description": "Most capable GPT-4 with vision",
                "display_name": "GPT-4 Turbo",
                "is_recommended": true,
                "model_type": "llm",
                "name": "gpt-4-turbo",
                "supports_function_calling": true,
                "supports_streaming": true,
                "supports_vision": true
              },
              "schema": {
                "properties": {
                  "context_length": {
                    "default": 0,
                    "type": "integer"
                  },
                  "cost_per_1k_tokens_input": {
                    "nullable": true,
                    "type": "number"
                  },
                  "cost_per_1k_tokens_output": {
                    "nullable": true,
                    "type": "number"
                  },
                  "description": {
                    "type": "string"
                  },
                  "display_name": {
                    "maxLength": 300,
                    "nullable": true,
                    "type": "string"
                  },
                  "embedding_dimension": {
                    "nullable": true,
                    "type": "integer"
                  },
                  "is_recommended": {
                    "default": false,
                    "type": "boolean"
                  },
                  "max_tokens": {
                    "nullable": true,
                    "type": "integer"
                  },
                  "model_type": {
                    "default": "llm",
                    "enum": [
                      "llm",
                      "embedding"
                    ],
                    "type": "string"
                  },
                  "name": {
                    "description": "Model name",
                    "maxLength": 300,
                    "type": "string"
                  },
                  "sort_order": {
                    "default": 0,
                    "type": "integer"
                  },
                  "supports_function_calling": {
                    "default": false,
                    "type": "boolean"
                  },
                  "supports_streaming": {
                    "default": true,
                    "type": "boolean"
                  },
                  "supports_vision": {
                    "default": false,
                    "type": "boolean"
                  },
                  "tags": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Model creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Provider not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new model for a provider",
        "tags": [
          "Models"
        ]
      }
    },
    "/api/v1/providers/{provider_id}/models/{model_id}": {
      "delete": {
        "description": "Soft delete a model asynchronously.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "provider_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "uuid",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Model deletion request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "404": {
            "description": "Model not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a provider model",
        "tags": [
          "Models"
        ]
      },
      "get": {
        "description": "Get a specific model by ID.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "provider_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "uuid",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Model retrieved",
            "schema": {
              "properties": {
                "context": {
                  "description": "Context length",
                  "type": "integer"
                },
                "description": {
                  "description": "Model description",
                  "type": "string"
                },
                "dimension": {
                  "description": "Embedding dimension (for embedding models)",
                  "type": "integer"
                },
                "display_name": {
                  "description": "Model display name",
                  "type": "string"
                },
                "id": {
                  "description": "Model unique identifier",
                  "format": "uuid",
                  "type": "string"
                },
                "is_deprecated": {
                  "type": "boolean"
                },
                "is_recommended": {
                  "type": "boolean"
                },
                "model_type": {
                  "description": "Model type",
                  "enum": [
                    "llm",
                    "embedding"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Model name",
                  "type": "string"
                },
                "pricing": {
                  "properties": {
                    "input": {
                      "description": "Cost per 1K input tokens",
                      "type": "number"
                    },
                    "output": {
                      "description": "Cost per 1K output tokens",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "provider_id": {
                  "description": "Provider ID",
                  "format": "uuid",
                  "type": "string"
                },
                "supports_function_calling": {
                  "description": "Supports function calling (for LLM models)",
                  "type": "boolean"
                },
                "supports_streaming": {
                  "description": "Supports streaming (for LLM models)",
                  "type": "boolean"
                },
                "supports_vision": {
                  "description": "Supports vision (for LLM models)",
                  "type": "boolean"
                },
                "tags": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Model not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a specific model",
        "tags": [
          "Models"
        ]
      },
      "put": {
        "description": "Update an existing model asynchronously.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "provider_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "uuid",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "context_length": {
                    "type": "integer"
                  },
                  "cost_per_1k_tokens_input": {
                    "type": "number"
                  },
                  "cost_per_1k_tokens_output": {
                    "type": "number"
                  },
                  "description": {
                    "type": "string"
                  },
                  "display_name": {
                    "maxLength": 300,
                    "type": "string"
                  },
                  "embedding_dimension": {
                    "type": "integer"
                  },
                  "is_active": {
                    "type": "boolean"
                  },
                  "is_deprecated": {
                    "type": "boolean"
                  },
                  "is_recommended": {
                    "type": "boolean"
                  },
                  "sort_order": {
                    "type": "integer"
                  },
                  "supports_function_calling": {
                    "type": "boolean"
                  },
                  "supports_streaming": {
                    "type": "boolean"
                  },
                  "supports_vision": {
                    "type": "boolean"
                  },
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Model update request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "404": {
            "description": "Model not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update a provider model",
        "tags": [
          "Models"
        ]
      }
    },
    "/api/v1/rate-limit-analysis": {
      "get": {
        "description": "Analyze rate limit usage for API keys to identify those approaching or exceeding limits. Helps with capacity planning and monitoring. Requires API key authentication with 'read' or 'admin' scope.",
        "parameters": [
          {
            "description": "Number of days to look back for rate limit analysis",
            "example": 7,
            "in": "query",
            "name": "days",
            "schema": {
              "default": 7,
              "maximum": 30,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate limit analysis retrieved successfully",
            "schema": {
              "properties": {
                "data": {
                  "properties": {
                    "high_usage_api_keys": {
                      "items": {
                        "properties": {
                          "api_key_id": {
                            "example": "123e4567-e89b-12d3-a456-426614174000",
                            "format": "uuid",
                            "type": "string"
                          },
                          "daily_limit": {
                            "example": 10000,
                            "type": "integer"
                          },
                          "daily_requests": {
                            "example": 7500,
                            "type": "integer"
                          },
                          "daily_usage_pct": {
                            "example": 75.0,
                            "format": "float",
                            "type": "number"
                          },
                          "hourly_limit": {
                            "example": 1000,
                            "type": "integer"
                          },
                          "hourly_requests": {
                            "example": 850,
                            "type": "integer"
                          },
                          "hourly_usage_pct": {
                            "example": 85.0,
                            "format": "float",
                            "type": "number"
                          },
                          "key_prefix": {
                            "example": "ak_XyZ89",
                            "type": "string"
                          },
                          "name": {
                            "example": "High Traffic API Key",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "period_days": {
                      "example": 7,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "success": {
                  "example": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - API key authentication required",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Analyze rate limit usage and violations",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/sdk/agent": {
      "post": {
        "description": "Create a new agent together with dedicated LLM settings by referencing provider/model names (asynchronous).",
        "parameters": [
          {
            "description": "Agent configuration and LLM settings",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "avatar_url": {
                  "description": "Agent avatar URL",
                  "format": "uri",
                  "type": "string"
                },
                "capabilities": {
                  "description": "Agent capabilities",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "company_id": {
                  "description": "Target company identifier (super admin only)",
                  "example": "123e4567-e89b-12d3-a456-426614174000",
                  "format": "uuid",
                  "type": "string"
                },
                "description": {
                  "description": "Agent description",
                  "type": "string"
                },
                "languages": {
                  "default": [
                    "en"
                  ],
                  "description": "Supported languages",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Agent name",
                  "example": "Support Bot",
                  "type": "string"
                },
                "operating_hours": {
                  "description": "Agent operating hours",
                  "type": "object"
                },
                "personality_traits": {
                  "description": "Agent personality configuration",
                  "type": "object"
                },
                "settings": {
                  "properties": {
                    "embedding_additional_params": {
                      "description": "Additional embedding provider parameters",
                      "type": "object"
                    },
                    "embedding_api_base_url": {
                      "description": "Embedding provider base URL",
                      "format": "uri",
                      "nullable": true,
                      "type": "string"
                    },
                    "embedding_api_key": {
                      "description": "Embedding provider API key",
                      "type": "string"
                    },
                    "embedding_dimension": {
                      "description": "Custom embedding dimension",
                      "type": "integer"
                    },
                    "embedding_model": {
                      "description": "Embedding model name",
                      "example": "text-embedding-ada-002",
                      "type": "string"
                    },
                    "embedding_model_id": {
                      "description": "Optional embedding model ID override",
                      "format": "uuid",
                      "nullable": true,
                      "type": "string"
                    },
                    "embedding_provider": {
                      "description": "Embedding provider value",
                      "example": "openai",
                      "type": "string"
                    },
                    "embedding_provider_id": {
                      "description": "Optional embedding provider ID override",
                      "format": "uuid",
                      "nullable": true,
                      "type": "string"
                    },
                    "llm_additional_params": {
                      "description": "Additional provider-specific parameters",
                      "type": "object"
                    },
                    "llm_api_base_url": {
                      "description": "Custom base URL for the LLM provider",
                      "format": "uri",
                      "nullable": true,
                      "type": "string"
                    },
                    "llm_api_key": {
                      "description": "API key for the LLM provider",
                      "type": "string"
                    },
                    "llm_max_tokens": {
                      "description": "Maximum response tokens",
                      "minimum": 1,
                      "type": "integer"
                    },
                    "llm_model": {
                      "description": "LLM model name",
                      "example": "gpt-3.5-turbo-16k",
                      "type": "string"
                    },
                    "llm_model_id": {
                      "description": "Optional LLM model ID override",
                      "format": "uuid",
                      "nullable": true,
                      "type": "string"
                    },
                    "llm_provider": {
                      "description": "LLM provider value (e.g., 'openai')",
                      "example": "openai",
                      "type": "string"
                    },
                    "llm_provider_id": {
                      "description": "Optional provider ID override",
                      "format": "uuid",
                      "nullable": true,
                      "type": "string"
                    },
                    "llm_temperature": {
                      "default": 0.7,
                      "maximum": 2.0,
                      "minimum": 0.0,
                      "type": "number"
                    },
                    "widget_config": {
                      "description": "Widget configuration overrides",
                      "type": "object"
                    },
                    "widget_script_url": {
                      "description": "Widget script override",
                      "format": "uri",
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "required": [
                    "llm_provider",
                    "llm_model",
                    "embedding_provider",
                    "embedding_model"
                  ],
                  "type": "object"
                },
                "status": {
                  "default": "active",
                  "description": "Agent status",
                  "enum": [
                    "active",
                    "inactive",
                    "training",
                    "maintenance"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "name",
                "settings"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Agent creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields or invalid provider/model names",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for target company",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Company or requested providers/models not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "SDK-friendly endpoint to create an agent using provider/model names.",
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v1/sdk/agent/{agent_id}": {
      "delete": {
        "description": "Delete an agent (admin only). Cannot delete agents with active conversations. The deletion runs asynchronously.",
        "parameters": [
          {
            "description": "Agent ID",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Agent deletion request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Cannot delete agent with active conversations",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "SDK-friendly endpoint to delete an agent synchronously.",
        "tags": [
          "Agents"
        ]
      },
      "put": {
        "description": "Update an existing agent's configuration asynchronously.",
        "parameters": [
          {
            "description": "Agent ID",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Agent updates",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "avatar_url": {
                  "description": "Agent avatar URL",
                  "format": "uri",
                  "type": "string"
                },
                "capabilities": {
                  "description": "Agent capabilities",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "description": {
                  "description": "Agent description",
                  "type": "string"
                },
                "languages": {
                  "description": "Supported languages",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "llm_settings_id": {
                  "description": "New LLM settings to associate with the agent",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "description": "Agent name",
                  "type": "string"
                },
                "operating_hours": {
                  "description": "Agent operating hours",
                  "type": "object"
                },
                "personality_traits": {
                  "description": "Agent personality configuration",
                  "type": "object"
                },
                "status": {
                  "description": "Agent status",
                  "enum": [
                    "active",
                    "inactive",
                    "training",
                    "maintenance"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Agent update request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "SDK-friendly endpoint to update an agent synchronously.",
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v1/sdk/database": {
      "post": {
        "description": "Create a new database connection and test its validity.",
        "parameters": [
          {
            "description": "Database connection details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "agent_id": {
                  "description": "Agent identifier the connection belongs to",
                  "example": "123e4567-e89b-12d3-a456-426614174000",
                  "format": "uuid",
                  "type": "string"
                },
                "connection_params": {
                  "default": {},
                  "description": "Additional connection parameters",
                  "type": "object"
                },
                "database_type": {
                  "description": "Database type",
                  "enum": [
                    "postgresql",
                    "mysql",
                    "sqlite",
                    "mongodb",
                    "mssql",
                    "cockroachdb"
                  ],
                  "example": "postgresql",
                  "type": "string"
                },
                "name": {
                  "description": "Connection name",
                  "example": "Production DB",
                  "type": "string"
                },
                "url": {
                  "description": "Database connection string",
                  "example": "postgresql://user:pass@localhost:5432/dbname",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "database_type",
                "url",
                "agent_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Database connection created successfully",
            "schema": {
              "properties": {
                "connection": {
                  "properties": {
                    "created_at": {
                      "description": "Creation timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "database_type": {
                      "description": "Database type",
                      "enum": [
                        "postgresql",
                        "mysql",
                        "sqlite",
                        "mongodb",
                        "mssql",
                        "cockroachdb"
                      ],
                      "type": "string"
                    },
                    "id": {
                      "description": "Connection unique identifier",
                      "format": "uuid",
                      "type": "string"
                    },
                    "is_active": {
                      "description": "Connection active status",
                      "type": "boolean"
                    },
                    "last_tested": {
                      "description": "Last test timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "name": {
                      "description": "Connection name",
                      "type": "string"
                    },
                    "test_result": {
                      "description": "Last test result message",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "is_active": {
                  "description": "Connection active status",
                  "type": "boolean"
                },
                "message": {
                  "example": "Database connection created successfully",
                  "type": "string"
                },
                "test_result": {
                  "description": "Connection test result",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid database type or connection name exists",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "SDK-friendly endpoint to create a database connection synchronously.",
        "tags": [
          "Database Connections"
        ]
      }
    },
    "/api/v1/sdk/database/{connection_id}": {
      "delete": {
        "description": "Soft delete a database connection by setting is_active to False. Also soft deletes all associated tables.",
        "parameters": [
          {
            "description": "Database connection ID to delete",
            "format": "uuid",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Database connection deletion request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Database connection not found or already deleted",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "SDK-friendly endpoint to delete a database connection synchronously.",
        "tags": [
          "Database Connections"
        ]
      },
      "put": {
        "description": "Update an existing database connection with provided fields. All fields are optional.",
        "parameters": [
          {
            "description": "Database connection unique identifier",
            "format": "uuid",
            "in": "path",
            "name": "connection_id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "database_type": "postgresql",
                "is_active": true,
                "name": "Updated Production DB",
                "pool_size": 15
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "connection_params": {
                    "description": "Additional connection parameters",
                    "example": {
                      "connect_timeout": 30,
                      "sslmode": "require"
                    },
                    "type": "object"
                  },
                  "connection_string": {
                    "description": "Database connection string (will be encrypted)",
                    "example": "postgresql://user:password@localhost:5432/database",
                    "type": "string"
                  },
                  "database_type": {
                    "description": "Database type",
                    "enum": [
                      "postgresql",
                      "mysql",
                      "sqlite",
                      "mongodb",
                      "mssql",
                      "cockroachdb"
                    ],
                    "example": "postgresql",
                    "type": "string"
                  },
                  "is_active": {
                    "description": "Connection active status",
                    "example": true,
                    "type": "boolean"
                  },
                  "max_overflow": {
                    "description": "Max overflow connections",
                    "example": 20,
                    "minimum": 0,
                    "type": "integer"
                  },
                  "name": {
                    "description": "Connection name",
                    "example": "Production Database",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "pool_size": {
                    "description": "Connection pool size",
                    "example": 10,
                    "minimum": 1,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "created_at": "2024-01-01T00:00:00Z",
                    "database_type": "postgresql",
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "is_active": true,
                    "last_tested": null,
                    "max_overflow": 10,
                    "name": "Updated Production DB",
                    "pool_size": 15,
                    "test_result": null,
                    "updated_at": "2024-01-02T10:30:00Z"
                  },
                  "message": "Database connection updated successfully. Updated fields: name, pool_size",
                  "success": true
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "created_at": {
                          "description": "Creation timestamp",
                          "format": "date-time",
                          "type": "string"
                        },
                        "database_type": {
                          "description": "Database type",
                          "enum": [
                            "postgresql",
                            "mysql",
                            "sqlite",
                            "mongodb",
                            "mssql",
                            "cockroachdb"
                          ],
                          "type": "string"
                        },
                        "id": {
                          "description": "Connection unique identifier",
                          "format": "uuid",
                          "type": "string"
                        },
                        "is_active": {
                          "description": "Connection active status",
                          "type": "boolean"
                        },
                        "last_tested": {
                          "description": "Last test timestamp",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Connection name",
                          "type": "string"
                        },
                        "test_result": {
                          "description": "Last test result message",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Success message with updated fields",
                      "type": "string"
                    },
                    "success": {
                      "description": "Request success status",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Database connection updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "empty_name": {
                    "value": {
                      "message": "Name cannot be empty",
                      "success": false
                    }
                  },
                  "invalid_pool_size": {
                    "value": {
                      "message": "Pool size must be a positive integer",
                      "success": false
                    }
                  },
                  "invalid_uuid": {
                    "value": {
                      "message": "Invalid connection ID format",
                      "success": false
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request - Invalid input data"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Authentication required",
                  "success": false
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized - Invalid or missing JWT token"
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Not allowed"
                },
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden - User not allowed"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Database connection not found",
                  "success": false
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Not Found - Database connection not found"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "constraint_violation": {
                    "value": {
                      "message": "Database constraint violation",
                      "success": false
                    }
                  },
                  "duplicate_name": {
                    "value": {
                      "message": "A connection with this name already exists for this user",
                      "success": false
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict - Constraint violation"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "message": "An unexpected error occurred",
                  "success": false
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "SDK-friendly endpoint to update a database connection synchronously.",
        "tags": [
          "Database Connections"
        ]
      }
    },
    "/api/v1/sdk/lead": {
      "post": {
        "description": "Create a new lead for administrative purposes asynchronously. Requires user authentication.",
        "parameters": [
          {
            "description": "Lead information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "company_id": {
                  "description": "Company identifier",
                  "example": "123e4567-e89b-12d3-a456-426614174000",
                  "format": "uuid",
                  "type": "string"
                },
                "consent_data_processing": {
                  "default": true,
                  "description": "Data processing consent flag",
                  "example": true,
                  "type": "boolean"
                },
                "consent_marketing": {
                  "default": false,
                  "description": "Marketing consent flag",
                  "example": true,
                  "type": "boolean"
                },
                "email": {
                  "description": "Lead email address",
                  "example": "jane.smith@example.com",
                  "format": "email",
                  "maxLength": 255,
                  "type": "string"
                },
                "first_name": {
                  "description": "Lead first name",
                  "example": "Jane",
                  "maxLength": 100,
                  "type": "string"
                },
                "last_name": {
                  "description": "Lead last name",
                  "example": "Smith",
                  "maxLength": 100,
                  "type": "string"
                },
                "notes": {
                  "description": "Additional notes about the lead",
                  "example": "Interested in premium features",
                  "type": "string"
                },
                "phone": {
                  "description": "Lead phone number",
                  "example": "+1234567890",
                  "maxLength": 20,
                  "type": "string"
                },
                "source": {
                  "description": "Lead source",
                  "example": "landing_page",
                  "maxLength": 100,
                  "type": "string"
                },
                "status": {
                  "default": "new",
                  "description": "Lead status",
                  "enum": [
                    "new",
                    "contacted",
                    "qualified",
                    "converted",
                    "lost"
                  ],
                  "example": "new",
                  "type": "string"
                }
              },
              "required": [
                "company_id",
                "first_name",
                "last_name",
                "email"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Lead creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Validation failed",
            "schema": {
              "properties": {
                "error": {
                  "description": "Error message",
                  "example": "Validation failed",
                  "type": "string"
                },
                "errors": {
                  "description": "Field-specific validation errors",
                  "example": {
                    "email": [
                      "Invalid email format"
                    ],
                    "password": [
                      "Password too short"
                    ]
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "SDK-friendly endpoint to create a lead and return the created record.",
        "tags": [
          "Leads"
        ]
      }
    },
    "/api/v1/sdk/lead/{lead_id}": {
      "delete": {
        "description": "Soft delete a lead by deactivating it asynchronously.",
        "parameters": [
          {
            "description": "Lead ID",
            "format": "uuid",
            "in": "path",
            "name": "lead_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Lead deletion request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Lead not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "SDK-friendly endpoint to delete a lead synchronously.",
        "tags": [
          "Leads"
        ]
      },
      "put": {
        "description": "Update lead information asynchronously.",
        "parameters": [
          {
            "description": "Lead ID",
            "format": "uuid",
            "in": "path",
            "name": "lead_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Updated lead information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "consent_data_processing": {
                  "description": "Data processing consent flag",
                  "example": true,
                  "type": "boolean"
                },
                "consent_marketing": {
                  "description": "Marketing consent flag",
                  "example": false,
                  "type": "boolean"
                },
                "email": {
                  "description": "Lead email address",
                  "example": "john.doe@example.com",
                  "format": "email",
                  "maxLength": 255,
                  "type": "string"
                },
                "first_name": {
                  "description": "Lead first name",
                  "example": "John",
                  "maxLength": 100,
                  "type": "string"
                },
                "last_name": {
                  "description": "Lead last name",
                  "example": "Doe",
                  "maxLength": 100,
                  "type": "string"
                },
                "notes": {
                  "description": "Additional notes about the lead",
                  "example": "Follow up scheduled for next week",
                  "type": "string"
                },
                "phone": {
                  "description": "Lead phone number",
                  "example": "+1234567890",
                  "maxLength": 20,
                  "type": "string"
                },
                "source": {
                  "description": "Lead source",
                  "example": "referral",
                  "maxLength": 100,
                  "type": "string"
                },
                "status": {
                  "description": "Lead status",
                  "enum": [
                    "new",
                    "contacted",
                    "qualified",
                    "converted",
                    "lost"
                  ],
                  "example": "contacted",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Lead update request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Validation failed",
            "schema": {
              "properties": {
                "error": {
                  "description": "Error message",
                  "example": "Validation failed",
                  "type": "string"
                },
                "errors": {
                  "description": "Field-specific validation errors",
                  "example": {
                    "email": [
                      "Invalid email format"
                    ],
                    "password": [
                      "Password too short"
                    ]
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not allowed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Lead not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "SDK-friendly endpoint to update a lead synchronously.",
        "tags": [
          "Leads"
        ]
      }
    },
    "/api/v1/sdk/settings": {
      "post": {
        "description": "Create new LLM settings by referencing provider and model names. If no agent_id is provided, creates company-level settings. The operation executes asynchronously.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "agent_id": "550e8400-e29b-41d4-a716-446655440000",
                "embedding_api_key": "sk-...",
                "embedding_model": "text-embedding-ada-002",
                "embedding_provider": "openai",
                "is_default": false,
                "llm_api_key": "sk-...",
                "llm_model": "gpt-3.5-turbo-16k",
                "llm_provider": "openai"
              },
              "schema": {
                "properties": {
                  "agent_id": {
                    "description": "Agent ID (optional, for agent-level settings)",
                    "format": "uuid",
                    "nullable": true,
                    "type": "string"
                  },
                  "embedding_additional_params": {
                    "type": "object"
                  },
                  "embedding_api_base_url": {
                    "description": "Custom embedding endpoint URL",
                    "format": "uri",
                    "nullable": true,
                    "type": "string"
                  },
                  "embedding_api_key": {
                    "description": "API key for embeddings",
                    "nullable": true,
                    "type": "string"
                  },
                  "embedding_dimension": {
                    "default": 768,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "embedding_model": {
                    "description": "Embedding model name",
                    "example": "text-embedding-ada-002",
                    "type": "string"
                  },
                  "embedding_model_id": {
                    "description": "Optional embedding model ID override",
                    "format": "uuid",
                    "type": "string"
                  },
                  "embedding_provider": {
                    "description": "Embedding provider value",
                    "example": "openai",
                    "type": "string"
                  },
                  "embedding_provider_id": {
                    "description": "Optional embedding provider ID override",
                    "format": "uuid",
                    "type": "string"
                  },
                  "is_default": {
                    "default": false,
                    "type": "boolean"
                  },
                  "llm_additional_params": {
                    "type": "object"
                  },
                  "llm_api_base_url": {
                    "description": "Custom LLM endpoint URL",
                    "format": "uri",
                    "nullable": true,
                    "type": "string"
                  },
                  "llm_api_key": {
                    "description": "API key for LLM",
                    "nullable": true,
                    "type": "string"
                  },
                  "llm_max_tokens": {
                    "default": 1000,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "llm_model": {
                    "description": "LLM model name",
                    "example": "gpt-3.5-turbo-16k",
                    "type": "string"
                  },
                  "llm_model_id": {
                    "description": "Optional LLM model ID override",
                    "format": "uuid",
                    "type": "string"
                  },
                  "llm_provider": {
                    "description": "LLM provider value",
                    "example": "openai",
                    "type": "string"
                  },
                  "llm_provider_id": {
                    "description": "Optional LLM provider ID override",
                    "format": "uuid",
                    "type": "string"
                  },
                  "llm_temperature": {
                    "default": 0.7,
                    "maximum": 2.0,
                    "minimum": 0.0,
                    "type": "number"
                  },
                  "widget_config": {
                    "type": "object"
                  },
                  "widget_script_url": {
                    "format": "uri",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "llm_provider",
                  "llm_model",
                  "embedding_provider",
                  "embedding_model"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "LLM settings creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid provider/model references",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent/Provider/Model not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "SDK-friendly endpoint to create LLM settings using provider/model names.",
        "tags": [
          "LLM Settings"
        ]
      }
    },
    "/api/v1/sdk/website/source/{source_id}": {
      "delete": {
        "description": "Soft delete a website source and asynchronously clean up related content.",
        "parameters": [
          {
            "description": "Website source identifier",
            "format": "uuid",
            "in": "path",
            "name": "source_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Deletion queued",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "task_id": {
                  "type": "string"
                },
                "website_source_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid website source identifier",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Website source not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "SDK-friendly endpoint to delete a website source synchronously.",
        "tags": [
          "Website"
        ]
      }
    },
    "/api/v1/sdk/website/source/{source_id}/crawl": {
      "post": {
        "description": "Queue a crawl job to refresh website content for the given source.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "source_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "max_pages": {
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Crawl queued",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "task_id": {
                  "type": "string"
                },
                "website_source_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Website source not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Synchronously trigger a crawl for a website source and return the result.",
        "tags": [
          "Website"
        ]
      }
    },
    "/api/v1/search/database": {
      "post": {
        "description": "Execute queries against user's database connections. Can search all connections or a specific one.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "connection_id": {
                  "description": "Specific database connection ID (optional)",
                  "format": "uuid",
                  "type": "string"
                },
                "query": {
                  "description": "SQL query or search term",
                  "example": "SELECT * FROM customers LIMIT 10",
                  "type": "string"
                }
              },
              "required": [
                "query"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Database search completed successfully",
            "schema": {
              "properties": {
                "execution_time": {
                  "description": "Query execution time in seconds",
                  "type": "number"
                },
                "query": {
                  "description": "Original search query",
                  "type": "string"
                },
                "results": {
                  "additionalProperties": {
                    "oneOf": [
                      {
                        "description": "Query results",
                        "type": "array"
                      },
                      {
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "description": "Search results grouped by connection name",
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Query is required",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Not allowed - User access required",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Connection not found or inactive",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "429": {
            "description": "Rate limit exceeded (30 per minute)",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Database search failed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Search user's databases",
        "tags": [
          "Search"
        ]
      }
    },
    "/api/v1/search/document": {
      "post": {
        "description": "Search through user's documents using semantic search. Returns relevant document chunks with content snippets.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "agent_id": {
                  "description": "Agent id",
                  "example": "48514e21-6800-420f-9ec8-17c9f7c874c7",
                  "type": "string"
                },
                "limit": {
                  "default": 10,
                  "description": "Maximum number of results",
                  "maximum": 50,
                  "minimum": 1,
                  "type": "integer"
                },
                "query": {
                  "description": "Search query",
                  "example": "customer support procedures",
                  "type": "string"
                }
              },
              "required": [
                "query"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document search completed successfully",
            "schema": {
              "properties": {
                "execution_time": {
                  "description": "Query execution time in seconds",
                  "type": "number"
                },
                "query": {
                  "description": "Original search query",
                  "type": "string"
                },
                "results": {
                  "items": {
                    "properties": {
                      "chunk_index": {
                        "description": "Chunk index in document",
                        "type": "integer"
                      },
                      "content": {
                        "description": "Chunk content",
                        "type": "string"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "embedding_model": {
                        "description": "Embedding model used",
                        "type": "string"
                      },
                      "id": {
                        "description": "Chunk unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "word_count": {
                        "description": "Word count in chunk",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "total_results": {
                  "description": "Total number of results",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Query is required",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Not allowed - User access required",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "429": {
            "description": "Rate limit exceeded (60 per minute)",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Search failed",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Search user's documents",
        "tags": [
          "Search"
        ]
      }
    },
    "/api/v1/settings": {
      "post": {
        "description": "Create new LLM settings using provider and model IDs. If no agent_id is provided, creates company-level settings. The operation executes asynchronously.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "agent_id": "550e8400-e29b-41d4-a716-446655440000",
                "embedding_api_key": "sk-...",
                "embedding_dimension": 1536,
                "embedding_model_id": "123e4567-e89b-12d3-a456-426614174002",
                "embedding_provider_id": "123e4567-e89b-12d3-a456-426614174000",
                "is_default": false,
                "llm_api_key": "sk-...",
                "llm_max_tokens": 1000,
                "llm_model_id": "123e4567-e89b-12d3-a456-426614174001",
                "llm_provider_id": "123e4567-e89b-12d3-a456-426614174000",
                "llm_temperature": 0.7
              },
              "schema": {
                "properties": {
                  "agent_id": {
                    "description": "Agent ID (optional, for agent-level settings)",
                    "format": "uuid",
                    "nullable": true,
                    "type": "string"
                  },
                  "embedding_additional_params": {
                    "type": "object"
                  },
                  "embedding_api_base_url": {
                    "description": "Custom embedding endpoint URL",
                    "format": "uri",
                    "nullable": true,
                    "type": "string"
                  },
                  "embedding_api_key": {
                    "description": "API key for embeddings",
                    "nullable": true,
                    "type": "string"
                  },
                  "embedding_dimension": {
                    "default": 768,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "embedding_model_id": {
                    "description": "Embedding model ID",
                    "format": "uuid",
                    "type": "string"
                  },
                  "embedding_provider_id": {
                    "description": "Embedding provider ID",
                    "format": "uuid",
                    "type": "string"
                  },
                  "is_default": {
                    "default": false,
                    "type": "boolean"
                  },
                  "llm_additional_params": {
                    "type": "object"
                  },
                  "llm_api_base_url": {
                    "description": "Custom LLM endpoint URL",
                    "format": "uri",
                    "nullable": true,
                    "type": "string"
                  },
                  "llm_api_key": {
                    "description": "API key for LLM",
                    "nullable": true,
                    "type": "string"
                  },
                  "llm_max_tokens": {
                    "default": 1000,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "llm_model_id": {
                    "description": "LLM model ID",
                    "format": "uuid",
                    "type": "string"
                  },
                  "llm_provider_id": {
                    "description": "LLM provider ID",
                    "format": "uuid",
                    "type": "string"
                  },
                  "llm_temperature": {
                    "default": 0.7,
                    "maximum": 2.0,
                    "minimum": 0.0,
                    "type": "number"
                  },
                  "widget_config": {
                    "type": "object"
                  },
                  "widget_script_url": {
                    "format": "uri",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "llm_provider_id",
                  "llm_model_id",
                  "embedding_provider_id",
                  "embedding_model_id"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "LLM settings creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent/Provider/Model not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create new LLM settings for a company or agent",
        "tags": [
          "LLM Settings"
        ]
      }
    },
    "/api/v1/settings/agent/{agent_id}": {
      "get": {
        "description": "Retrieve LLM settings for a specific agent.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent settings retrieved",
            "schema": {
              "properties": {
                "agent": {
                  "description": "Agent information (if agent-level settings)",
                  "nullable": true,
                  "type": "object"
                },
                "company": {
                  "description": "Company information (if company-level settings)",
                  "nullable": true,
                  "type": "object"
                },
                "created_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "embedding_additional_params": {
                  "type": "object"
                },
                "embedding_api_base_url": {
                  "description": "Custom embedding endpoint URL",
                  "format": "uri",
                  "nullable": true,
                  "type": "string"
                },
                "embedding_api_key": {
                  "description": "Masked API key for embeddings",
                  "nullable": true,
                  "type": "string"
                },
                "embedding_dimension": {
                  "default": 768,
                  "minimum": 1,
                  "type": "integer"
                },
                "embedding_model_id": {
                  "description": "Embedding model ID",
                  "format": "uuid",
                  "type": "string"
                },
                "embedding_model_name": {
                  "description": "Embedding model name",
                  "type": "string"
                },
                "embedding_provider": {
                  "description": "Embedding provider value",
                  "type": "string"
                },
                "embedding_provider_id": {
                  "description": "Embedding provider ID",
                  "format": "uuid",
                  "type": "string"
                },
                "embedding_provider_label": {
                  "description": "Embedding provider label",
                  "type": "string"
                },
                "id": {
                  "description": "Settings unique identifier",
                  "format": "uuid",
                  "type": "string"
                },
                "is_active": {
                  "default": true,
                  "type": "boolean"
                },
                "is_default": {
                  "default": false,
                  "type": "boolean"
                },
                "llm_additional_params": {
                  "type": "object"
                },
                "llm_api_base_url": {
                  "description": "Custom LLM endpoint URL",
                  "format": "uri",
                  "nullable": true,
                  "type": "string"
                },
                "llm_api_key": {
                  "description": "Masked API key for LLM",
                  "nullable": true,
                  "type": "string"
                },
                "llm_max_tokens": {
                  "default": 1000,
                  "minimum": 1,
                  "type": "integer"
                },
                "llm_model_id": {
                  "description": "LLM model ID",
                  "format": "uuid",
                  "type": "string"
                },
                "llm_model_name": {
                  "description": "LLM model name",
                  "type": "string"
                },
                "llm_provider": {
                  "description": "LLM provider value",
                  "type": "string"
                },
                "llm_provider_id": {
                  "description": "LLM provider ID",
                  "format": "uuid",
                  "type": "string"
                },
                "llm_provider_label": {
                  "description": "LLM provider label",
                  "type": "string"
                },
                "llm_temperature": {
                  "default": 0.7,
                  "maximum": 2.0,
                  "minimum": 0.0,
                  "type": "number"
                },
                "updated_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "widget_config": {
                  "type": "object"
                },
                "widget_script_url": {
                  "format": "uri",
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "llm_provider_id",
                "llm_model_id",
                "embedding_provider_id",
                "embedding_model_id"
              ],
              "type": "object"
            }
          },
          "404": {
            "description": "Agent or settings not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get LLM settings for a specific agent",
        "tags": [
          "LLM Settings"
        ]
      }
    },
    "/api/v1/settings/company/{company_id}": {
      "get": {
        "description": "Retrieve all active LLM settings for a company.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "company_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Company settings retrieved",
            "schema": {
              "properties": {
                "settings": {
                  "items": {
                    "properties": {
                      "agent": {
                        "description": "Agent information (if agent-level settings)",
                        "nullable": true,
                        "type": "object"
                      },
                      "company": {
                        "description": "Company information (if company-level settings)",
                        "nullable": true,
                        "type": "object"
                      },
                      "created_at": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "embedding_additional_params": {
                        "type": "object"
                      },
                      "embedding_api_base_url": {
                        "description": "Custom embedding endpoint URL",
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                      },
                      "embedding_api_key": {
                        "description": "Masked API key for embeddings",
                        "nullable": true,
                        "type": "string"
                      },
                      "embedding_dimension": {
                        "default": 768,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "embedding_model_id": {
                        "description": "Embedding model ID",
                        "format": "uuid",
                        "type": "string"
                      },
                      "embedding_model_name": {
                        "description": "Embedding model name",
                        "type": "string"
                      },
                      "embedding_provider": {
                        "description": "Embedding provider value",
                        "type": "string"
                      },
                      "embedding_provider_id": {
                        "description": "Embedding provider ID",
                        "format": "uuid",
                        "type": "string"
                      },
                      "embedding_provider_label": {
                        "description": "Embedding provider label",
                        "type": "string"
                      },
                      "id": {
                        "description": "Settings unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "is_active": {
                        "default": true,
                        "type": "boolean"
                      },
                      "is_default": {
                        "default": false,
                        "type": "boolean"
                      },
                      "llm_additional_params": {
                        "type": "object"
                      },
                      "llm_api_base_url": {
                        "description": "Custom LLM endpoint URL",
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                      },
                      "llm_api_key": {
                        "description": "Masked API key for LLM",
                        "nullable": true,
                        "type": "string"
                      },
                      "llm_max_tokens": {
                        "default": 1000,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "llm_model_id": {
                        "description": "LLM model ID",
                        "format": "uuid",
                        "type": "string"
                      },
                      "llm_model_name": {
                        "description": "LLM model name",
                        "type": "string"
                      },
                      "llm_provider": {
                        "description": "LLM provider value",
                        "type": "string"
                      },
                      "llm_provider_id": {
                        "description": "LLM provider ID",
                        "format": "uuid",
                        "type": "string"
                      },
                      "llm_provider_label": {
                        "description": "LLM provider label",
                        "type": "string"
                      },
                      "llm_temperature": {
                        "default": 0.7,
                        "maximum": 2.0,
                        "minimum": 0.0,
                        "type": "number"
                      },
                      "updated_at": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "widget_config": {
                        "type": "object"
                      },
                      "widget_script_url": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "llm_provider_id",
                      "llm_model_id",
                      "embedding_provider_id",
                      "embedding_model_id"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all LLM settings for a company",
        "tags": [
          "LLM Settings"
        ]
      }
    },
    "/api/v1/settings/providers": {
      "get": {
        "description": "Get list of all supported providers and their models (backward compatible endpoint).",
        "responses": {
          "200": {
            "description": "Providers retrieved",
            "schema": {
              "properties": {
                "embedding_providers": {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                },
                "llm_providers": {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                },
                "metadata": {
                  "properties": {
                    "last_updated": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "pricing_tiers": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "total_embedding_providers": {
                      "type": "integer"
                    },
                    "total_llm_providers": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of supported providers and their models",
        "tags": [
          "Providers"
        ]
      }
    },
    "/api/v1/settings/providers/seed": {
      "post": {
        "description": "Populate the providers and provider_models tables with initial seed data asynchronously. This endpoint creates or updates all predefined providers and their models.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "202": {
            "description": "Provider seeding request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "500": {
            "description": "Error seeding providers",
            "schema": {
              "properties": {
                "error": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Seed the database with providers and models",
        "tags": [
          "Providers"
        ]
      }
    },
    "/api/v1/settings/test/{settings_id}": {
      "post": {
        "description": "Test LLM and embedding configurations asynchronously.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "settings_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "LLM settings test request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid settings",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Settings not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Test LLM settings with a simple query",
        "tags": [
          "LLM Settings"
        ]
      }
    },
    "/api/v1/settings/{settings_id}": {
      "delete": {
        "description": "Soft delete LLM settings asynchronously. Default settings cannot be deleted.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "settings_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "LLM settings deletion request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Cannot delete default settings",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Settings not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete LLM settings",
        "tags": [
          "LLM Settings"
        ]
      },
      "get": {
        "description": "Retrieve specific LLM settings by its ID.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "settings_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Settings retrieved",
            "schema": {
              "properties": {
                "agent": {
                  "description": "Agent information (if agent-level settings)",
                  "nullable": true,
                  "type": "object"
                },
                "company": {
                  "description": "Company information (if company-level settings)",
                  "nullable": true,
                  "type": "object"
                },
                "created_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "embedding_additional_params": {
                  "type": "object"
                },
                "embedding_api_base_url": {
                  "description": "Custom embedding endpoint URL",
                  "format": "uri",
                  "nullable": true,
                  "type": "string"
                },
                "embedding_api_key": {
                  "description": "Masked API key for embeddings",
                  "nullable": true,
                  "type": "string"
                },
                "embedding_dimension": {
                  "default": 768,
                  "minimum": 1,
                  "type": "integer"
                },
                "embedding_model_id": {
                  "description": "Embedding model ID",
                  "format": "uuid",
                  "type": "string"
                },
                "embedding_model_name": {
                  "description": "Embedding model name",
                  "type": "string"
                },
                "embedding_provider": {
                  "description": "Embedding provider value",
                  "type": "string"
                },
                "embedding_provider_id": {
                  "description": "Embedding provider ID",
                  "format": "uuid",
                  "type": "string"
                },
                "embedding_provider_label": {
                  "description": "Embedding provider label",
                  "type": "string"
                },
                "id": {
                  "description": "Settings unique identifier",
                  "format": "uuid",
                  "type": "string"
                },
                "is_active": {
                  "default": true,
                  "type": "boolean"
                },
                "is_default": {
                  "default": false,
                  "type": "boolean"
                },
                "llm_additional_params": {
                  "type": "object"
                },
                "llm_api_base_url": {
                  "description": "Custom LLM endpoint URL",
                  "format": "uri",
                  "nullable": true,
                  "type": "string"
                },
                "llm_api_key": {
                  "description": "Masked API key for LLM",
                  "nullable": true,
                  "type": "string"
                },
                "llm_max_tokens": {
                  "default": 1000,
                  "minimum": 1,
                  "type": "integer"
                },
                "llm_model_id": {
                  "description": "LLM model ID",
                  "format": "uuid",
                  "type": "string"
                },
                "llm_model_name": {
                  "description": "LLM model name",
                  "type": "string"
                },
                "llm_provider": {
                  "description": "LLM provider value",
                  "type": "string"
                },
                "llm_provider_id": {
                  "description": "LLM provider ID",
                  "format": "uuid",
                  "type": "string"
                },
                "llm_provider_label": {
                  "description": "LLM provider label",
                  "type": "string"
                },
                "llm_temperature": {
                  "default": 0.7,
                  "maximum": 2.0,
                  "minimum": 0.0,
                  "type": "number"
                },
                "updated_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "widget_config": {
                  "type": "object"
                },
                "widget_script_url": {
                  "format": "uri",
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "llm_provider_id",
                "llm_model_id",
                "embedding_provider_id",
                "embedding_model_id"
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Settings not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get specific LLM settings",
        "tags": [
          "LLM Settings"
        ]
      },
      "put": {
        "description": "Update existing LLM settings by ID using provider and model IDs. The update runs asynchronously.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "settings_id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "embedding_additional_params": {
                    "type": "object"
                  },
                  "embedding_api_base_url": {
                    "format": "uri",
                    "type": "string"
                  },
                  "embedding_api_key": {
                    "type": "string"
                  },
                  "embedding_dimension": {
                    "minimum": 1,
                    "type": "integer"
                  },
                  "embedding_model_id": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "embedding_provider_id": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "is_active": {
                    "type": "boolean"
                  },
                  "is_default": {
                    "type": "boolean"
                  },
                  "llm_additional_params": {
                    "type": "object"
                  },
                  "llm_api_base_url": {
                    "format": "uri",
                    "type": "string"
                  },
                  "llm_api_key": {
                    "type": "string"
                  },
                  "llm_max_tokens": {
                    "minimum": 1,
                    "type": "integer"
                  },
                  "llm_model_id": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "llm_provider_id": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "llm_temperature": {
                    "maximum": 2.0,
                    "minimum": 0.0,
                    "type": "number"
                  },
                  "widget_config": {
                    "type": "object"
                  },
                  "widget_script_url": {
                    "format": "uri",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "LLM settings update request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Settings not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update LLM settings",
        "tags": [
          "LLM Settings"
        ]
      }
    },
    "/api/v1/state": {
      "post": {
        "description": "Create a new state within a country asynchronously.",
        "parameters": [
          {
            "description": "State information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "country_id": {
                  "description": "Country identifier",
                  "example": 1,
                  "type": "integer"
                },
                "name": {
                  "description": "State name",
                  "example": "California",
                  "maxLength": 100,
                  "type": "string"
                }
              },
              "required": [
                "name",
                "country_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "State creation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Country not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict - State already exists in this country",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new state",
        "tags": [
          "States"
        ]
      }
    },
    "/api/v1/state/country/{country_id}": {
      "get": {
        "description": "Get all states within a specific country.",
        "parameters": [
          {
            "description": "Country ID",
            "in": "path",
            "name": "country_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "States retrieved successfully",
            "schema": {
              "items": {
                "properties": {
                  "country": {
                    "description": "Country information",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "created_at": {
                    "description": "Creation timestamp",
                    "format": "date-time",
                    "type": "string"
                  },
                  "id": {
                    "description": "State unique identifier",
                    "type": "integer"
                  },
                  "name": {
                    "description": "State name",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "Update timestamp",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "List states by country",
        "tags": [
          "States"
        ]
      }
    },
    "/api/v1/state/{state_id}": {
      "get": {
        "description": "Get detailed information about a specific state including its cities.",
        "parameters": [
          {
            "description": "State ID",
            "in": "path",
            "name": "state_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "State details retrieved successfully",
            "schema": {
              "properties": {
                "city": {
                  "description": "List of cities in this state",
                  "items": {
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "postal_code_prefix": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "country": {
                  "description": "Country information",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "created_at": {
                  "description": "Creation timestamp",
                  "format": "date-time",
                  "type": "string"
                },
                "id": {
                  "description": "State unique identifier",
                  "type": "integer"
                },
                "name": {
                  "description": "State name",
                  "maxLength": 100,
                  "type": "string"
                },
                "updated_at": {
                  "description": "Update timestamp",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "State not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Get state details",
        "tags": [
          "States"
        ]
      },
      "patch": {
        "description": "Update state information asynchronously.",
        "parameters": [
          {
            "description": "State ID",
            "in": "path",
            "name": "state_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Updated state information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "country_id": {
                  "description": "Country identifier",
                  "example": 1,
                  "type": "integer"
                },
                "name": {
                  "description": "State name",
                  "example": "California",
                  "maxLength": 100,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "State update request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "State or Country not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict - State name already exists in this country",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update a state",
        "tags": [
          "States"
        ]
      }
    },
    "/api/v1/super-admin/company": {
      "get": {
        "description": "Retrieve all companies with pagination.",
        "parameters": [
          {
            "default": 1,
            "description": "Page number",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "default": 10,
            "description": "Items per page",
            "in": "query",
            "maximum": 100,
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Companies retrieved successfully",
            "schema": {
              "properties": {
                "companies": {
                  "items": {
                    "properties": {
                      "address": {
                        "description": "Company address details",
                        "type": "object"
                      },
                      "created_at": {
                        "description": "Creation timestamp",
                        "format": "date-time",
                        "type": "string"
                      },
                      "email": {
                        "description": "Company email",
                        "format": "email",
                        "type": "string"
                      },
                      "id": {
                        "description": "Company unique identifier",
                        "format": "uuid",
                        "type": "string"
                      },
                      "is_active": {
                        "default": true,
                        "description": "Company active status",
                        "type": "boolean"
                      },
                      "is_verified": {
                        "default": false,
                        "description": "Company verification status",
                        "type": "boolean"
                      },
                      "logo": {
                        "description": "Company logo URL or file path",
                        "type": "string"
                      },
                      "name": {
                        "description": "Company name",
                        "type": "string"
                      },
                      "phone": {
                        "description": "Company phone number",
                        "type": "string"
                      },
                      "updated_at": {
                        "description": "Update timestamp",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "pagination": {
                  "properties": {
                    "current_page": {
                      "type": "integer"
                    },
                    "has_next": {
                      "type": "boolean"
                    },
                    "has_prev": {
                      "type": "boolean"
                    },
                    "next_page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "prev_page": {
                      "type": "integer"
                    },
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all companies with pagination.",
        "tags": [
          "Companies"
        ]
      }
    },
    "/api/v1/super-admin/company/{company_id}/system-metric": {
      "get": {
        "description": "\n    Retrieve system performance and health metrics from the last 24 hours.\n    \n    **Access Control:**\n    - Super Admin: Can access metrics for any company by specifying company_id in path\n    - Admin: Can only access metrics for their own company\n    \n    **Metrics Include:**\n    - CPU usage percentages\n    - Memory utilization\n    - Disk I/O statistics  \n    - Network throughput\n    - Application-specific metrics\n    \n    **Data Range:** Last 24 hours, limited to 1000 most recent data points per metric type.\n    ",
        "parameters": [
          {
            "description": "Company ID (Super Admin only). If not provided, uses admin's company.",
            "in": "path",
            "name": "company_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generated_at": {
                      "description": "Metrics generation timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "metrics": {
                      "additionalProperties": {
                        "items": {
                          "properties": {
                            "labels": {
                              "description": "Metric labels",
                              "type": "object"
                            },
                            "timestamp": {
                              "description": "Metric timestamp",
                              "format": "date-time",
                              "type": "string"
                            },
                            "value": {
                              "description": "Metric value",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "description": "Metrics grouped by metric name",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "System metrics retrieved successfully"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "insufficient_role": {
                    "summary": "Insufficient permissions",
                    "value": {
                      "message": "Not allowed"
                    }
                  },
                  "not_user": {
                    "summary": "Not a user account",
                    "value": {
                      "message": "Not allowed"
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden - Admin access required or invalid company access"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "error": "Failed to retrieve metrics"
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error code",
                      "example": "AUTH_001",
                      "type": "string"
                    },
                    "details": {
                      "description": "Additional error details",
                      "type": "object"
                    },
                    "error": {
                      "description": "Error message",
                      "example": "An error occurred",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Internal server error - Failed to retrieve metrics"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Admin: Get system metrics",
        "tags": [
          "Admin"
        ]
      }
    },
    "/api/v1/super-admin/company/{company_id}/user": {
      "get": {
        "description": "Retrieve paginated list of users with comprehensive filtering, searching, and sorting capabilities. Supports both admin and super-admin access.",
        "parameters": [
          {
            "default": 1,
            "description": "Page number for pagination",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "integer"
          },
          {
            "default": 50,
            "description": "Number of results per page (max 100)",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "per_page",
            "type": "integer"
          },
          {
            "description": "Filter users by account status",
            "enum": [
              "active",
              "inactive",
              "suspended",
              "pending_verification"
            ],
            "in": "query",
            "name": "status",
            "type": "string"
          },
          {
            "description": "Filter users by role",
            "enum": [
              "super_admin",
              "admin",
              "user"
            ],
            "in": "query",
            "name": "role",
            "type": "string"
          },
          {
            "description": "Filter by email verification status (true/false)",
            "in": "query",
            "name": "email_verified",
            "type": "boolean"
          },
          {
            "description": "Filter by two-factor authentication status (true/false)",
            "in": "query",
            "name": "two_factor_enabled",
            "type": "boolean"
          },
          {
            "description": "Filter users who have never logged in (true/false)",
            "in": "query",
            "name": "never_logged_in",
            "type": "boolean"
          },
          {
            "description": "Filter locked/unlocked accounts (true/false)",
            "in": "query",
            "name": "locked",
            "type": "boolean"
          },
          {
            "description": "Include soft-deleted users in results (true/false)",
            "in": "query",
            "name": "include_deleted",
            "type": "boolean"
          },
          {
            "description": "Show only soft-deleted users (true/false)",
            "in": "query",
            "name": "only_deleted",
            "type": "boolean"
          },
          {
            "description": "Search across email, username, first name, last name, and full name",
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "description": "Filter users created after this date (ISO format: 2024-01-01T00:00:00Z)",
            "format": "date-time",
            "in": "query",
            "name": "created_after",
            "type": "string"
          },
          {
            "description": "Filter users created before this date (ISO format: 2024-12-31T23:59:59Z)",
            "format": "date-time",
            "in": "query",
            "name": "created_before",
            "type": "string"
          },
          {
            "description": "Filter users who logged in after this date (ISO format)",
            "format": "date-time",
            "in": "query",
            "name": "last_login_after",
            "type": "string"
          },
          {
            "description": "Filter users who logged in before this date (ISO format)",
            "format": "date-time",
            "in": "query",
            "name": "last_login_before",
            "type": "string"
          },
          {
            "description": "Filter users with login attempts >= this threshold (default: 5)",
            "in": "query",
            "minimum": 1,
            "name": "high_login_attempts",
            "type": "integer"
          },
          {
            "description": "Filter by user timezone (e.g., 'UTC', 'America/New_York')",
            "in": "query",
            "name": "timezone",
            "type": "string"
          },
          {
            "description": "Filter by user language preference (e.g., 'en', 'es', 'fr')",
            "in": "query",
            "name": "language",
            "type": "string"
          },
          {
            "default": "created_at",
            "description": "Field to sort by",
            "enum": [
              "created_at",
              "updated_at",
              "last_login",
              "email",
              "username",
              "first_name",
              "last_name",
              "login_attempts"
            ],
            "in": "query",
            "name": "sort_by",
            "type": "string"
          },
          {
            "default": "desc",
            "description": "Sort order (ascending or descending)",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "sort_order",
            "type": "string"
          },
          {
            "description": "Company ID (super-admin route only)",
            "format": "uuid",
            "in": "path",
            "name": "company_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully with applied filters",
            "schema": {
              "properties": {
                "filters_applied": {
                  "description": "Summary of all filters that were applied to the query",
                  "properties": {
                    "created_after": {
                      "nullable": true,
                      "type": "string"
                    },
                    "created_before": {
                      "nullable": true,
                      "type": "string"
                    },
                    "email_verified": {
                      "nullable": true,
                      "type": "string"
                    },
                    "high_login_attempts": {
                      "nullable": true,
                      "type": "string"
                    },
                    "include_deleted": {
                      "nullable": true,
                      "type": "string"
                    },
                    "language": {
                      "nullable": true,
                      "type": "string"
                    },
                    "last_login_after": {
                      "nullable": true,
                      "type": "string"
                    },
                    "last_login_before": {
                      "nullable": true,
                      "type": "string"
                    },
                    "locked": {
                      "nullable": true,
                      "type": "string"
                    },
                    "never_logged_in": {
                      "nullable": true,
                      "type": "string"
                    },
                    "only_deleted": {
                      "nullable": true,
                      "type": "string"
                    },
                    "role": {
                      "nullable": true,
                      "type": "string"
                    },
                    "search": {
                      "nullable": true,
                      "type": "string"
                    },
                    "sort_by": {
                      "type": "string"
                    },
                    "sort_order": {
                      "type": "string"
                    },
                    "status": {
                      "nullable": true,
                      "type": "string"
                    },
                    "timezone": {
                      "nullable": true,
                      "type": "string"
                    },
                    "two_factor_enabled": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "pagination": {
                  "properties": {
                    "has_next": {
                      "type": "boolean"
                    },
                    "has_prev": {
                      "type": "boolean"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "pages": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "total": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "users": {
                  "items": {
                    "properties": {
                      "created_at": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "email_verified": {
                        "type": "boolean"
                      },
                      "first_name": {
                        "type": "string"
                      },
                      "id": {
                        "format": "uuid",
                        "type": "string"
                      },
                      "last_login": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      },
                      "last_name": {
                        "type": "string"
                      },
                      "login_attempts": {
                        "type": "integer"
                      },
                      "role": {
                        "enum": [
                          "super_admin",
                          "admin",
                          "user"
                        ],
                        "type": "string"
                      },
                      "status": {
                        "enum": [
                          "active",
                          "inactive",
                          "suspended",
                          "pending_verification"
                        ],
                        "type": "string"
                      },
                      "two_factor_enabled": {
                        "type": "boolean"
                      },
                      "updated_at": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid filter parameters",
            "schema": {
              "properties": {
                "error": {
                  "examples": [
                    "Invalid status: invalid_status",
                    "Invalid role: invalid_role",
                    "Invalid created_after date format. Use ISO format.",
                    "Invalid sort_by field. Valid options: ['created_at', 'updated_at', ...]"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Admin/Super-admin access required",
            "schema": {
              "properties": {
                "message": {
                  "example": "Not allowed",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to retrieve users",
            "schema": {
              "properties": {
                "error": {
                  "example": "Failed to retrieve users",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Admin: Get all users with filtering capabilities",
        "tags": [
          "Admin"
        ]
      }
    },
    "/api/v1/system-metric": {
      "post": {
        "description": "Trigger generation of system metrics via background task.",
        "responses": {
          "200": {
            "description": "System metrics generation started",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Not allowed - User access required",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "429": {
            "description": "Rate limit exceeded (30 per minute)",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generate system metrics",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/test": {
      "post": {
        "description": "Generate an HTML page that embeds the chat widget for testing purposes. The page is produced asynchronously.",
        "parameters": [
          {
            "description": "Optional custom HTML to append to the generated page",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "properties": {
                "body": {
                  "description": "Optional HTML or JavaScript snippet to inject into the generated page",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Widget test page generation request accepted",
            "schema": {
              "properties": {
                "estimated_time": {
                  "description": "Optional estimate (in seconds) for task completion",
                  "example": 45,
                  "format": "int32",
                  "type": "integer"
                },
                "message": {
                  "description": "Human readable confirmation message",
                  "example": "Request accepted and queued for processing.",
                  "type": "string"
                },
                "status": {
                  "description": "Overall status of the asynchronous request",
                  "example": "accepted",
                  "type": "string"
                },
                "status_url": {
                  "description": "URL that can be polled to retrieve task progress",
                  "example": "/v1/tasks/7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d/status",
                  "format": "uri",
                  "type": "string"
                },
                "task_id": {
                  "description": "Identifier of the Celery task handling the request",
                  "example": "7d6f1c20-9c32-4f6b-b967-f0b7b0ff5b8d",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "task_id",
                "status_url"
              ],
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Test page with widget embedded",
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v1/top-endpoints": {
      "get": {
        "description": "Retrieve the most frequently used API endpoints with usage statistics, success rates, and performance metrics. Requires API key authentication with 'read' or 'admin' scope.",
        "parameters": [
          {
            "description": "Number of days to look back",
            "example": 30,
            "in": "query",
            "name": "days",
            "schema": {
              "default": 30,
              "maximum": 365,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of endpoints to return",
            "example": 10,
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Top endpoints retrieved successfully",
            "schema": {
              "properties": {
                "data": {
                  "properties": {
                    "endpoints": {
                      "items": {
                        "properties": {
                          "avg_response_time": {
                            "example": 186.3,
                            "format": "float",
                            "type": "number"
                          },
                          "endpoint": {
                            "example": "/api/v1/users",
                            "type": "string"
                          },
                          "method": {
                            "example": "GET",
                            "type": "string"
                          },
                          "success_rate": {
                            "example": 99.1,
                            "format": "float",
                            "type": "number"
                          },
                          "total_requests": {
                            "example": 12500,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "period_days": {
                      "example": 30,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "success": {
                  "example": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - API key authentication required",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get most used endpoints",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/usage-trends": {
      "get": {
        "description": "Retrieve usage trends with configurable time granularity (daily or hourly). Shows request volumes, success rates, and response times over time. Requires API key authentication with 'read' or 'admin' scope.",
        "parameters": [
          {
            "description": "Number of days to look back",
            "example": 30,
            "in": "query",
            "name": "days",
            "schema": {
              "default": 30,
              "maximum": 365,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Time granularity for trends",
            "example": "daily",
            "in": "query",
            "name": "granularity",
            "schema": {
              "default": "daily",
              "enum": [
                "daily",
                "hourly"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usage trends retrieved successfully",
            "schema": {
              "properties": {
                "data": {
                  "properties": {
                    "granularity": {
                      "enum": [
                        "daily",
                        "hourly"
                      ],
                      "example": "daily",
                      "type": "string"
                    },
                    "period_days": {
                      "example": 30,
                      "type": "integer"
                    },
                    "trends": {
                      "items": {
                        "properties": {
                          "avg_response_time": {
                            "example": 234.5,
                            "format": "float",
                            "type": "number"
                          },
                          "period": {
                            "example": "2025-09-06T00:00:00.000Z",
                            "format": "date-time",
                            "type": "string"
                          },
                          "success_rate": {
                            "example": 98.2,
                            "format": "float",
                            "type": "number"
                          },
                          "total_requests": {
                            "example": 4250,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "success": {
                  "example": true,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - API key authentication required",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "error": {
                  "example": "API key not found or access denied",
                  "type": "string"
                },
                "success": {
                  "example": false,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get usage trends over time",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/v1/user/profile": {
      "get": {
        "description": "Retrieve the authenticated user's profile information including personal details, preferences, and account status.",
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "schema": {
              "properties": {
                "user": {
                  "properties": {
                    "created_at": {
                      "description": "Account creation timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "email": {
                      "description": "User email address",
                      "format": "email",
                      "type": "string"
                    },
                    "email_verified": {
                      "description": "Email verification status",
                      "type": "boolean"
                    },
                    "first_name": {
                      "description": "First name",
                      "type": "string"
                    },
                    "id": {
                      "description": "User ID",
                      "format": "uuid",
                      "type": "string"
                    },
                    "language": {
                      "default": "en",
                      "description": "User language preference",
                      "type": "string"
                    },
                    "last_login": {
                      "description": "Last login timestamp",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "last_name": {
                      "description": "Last name",
                      "type": "string"
                    },
                    "login_attempts": {
                      "description": "Number of login attempts",
                      "type": "integer"
                    },
                    "preferences": {
                      "description": "User preferences object",
                      "type": "object"
                    },
                    "role": {
                      "description": "User role",
                      "enum": [
                        "super_admin",
                        "admin",
                        "user"
                      ],
                      "type": "string"
                    },
                    "status": {
                      "description": "User account status",
                      "enum": [
                        "active",
                        "inactive",
                        "suspended",
                        "pending_verification"
                      ],
                      "type": "string"
                    },
                    "timezone": {
                      "default": "UTC",
                      "description": "User timezone",
                      "type": "string"
                    },
                    "two_factor_enabled": {
                      "description": "Two-factor authentication status",
                      "type": "boolean"
                    },
                    "updated_at": {
                      "description": "Last update timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "username": {
                      "description": "Username",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Not allowed - User access required",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Failed to retrieve profile",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user profile",
        "tags": [
          "Profile"
        ]
      },
      "put": {
        "description": "Update the authenticated user's profile information. Only specified fields will be updated. Creates an audit log entry for the update.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "additionalProperties": false,
              "properties": {
                "first_name": {
                  "description": "First name",
                  "example": "John",
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
                },
                "language": {
                  "default": "en",
                  "description": "Language code",
                  "example": "en",
                  "type": "string"
                },
                "last_name": {
                  "description": "Last name",
                  "example": "Doe",
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
                },
                "preferences": {
                  "description": "User preferences object",
                  "example": {
                    "notifications": {
                      "email": true,
                      "push": false
                    },
                    "theme": "dark"
                  },
                  "type": "object"
                },
                "timezone": {
                  "default": "UTC",
                  "description": "Timezone identifier",
                  "example": "America/New_York",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "schema": {
              "properties": {
                "message": {
                  "example": "Profile updated successfully",
                  "type": "string"
                },
                "user": {
                  "properties": {
                    "created_at": {
                      "description": "Account creation timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "email": {
                      "description": "User email address",
                      "format": "email",
                      "type": "string"
                    },
                    "email_verified": {
                      "description": "Email verification status",
                      "type": "boolean"
                    },
                    "first_name": {
                      "description": "First name",
                      "type": "string"
                    },
                    "id": {
                      "description": "User ID",
                      "format": "uuid",
                      "type": "string"
                    },
                    "language": {
                      "default": "en",
                      "description": "User language preference",
                      "type": "string"
                    },
                    "last_login": {
                      "description": "Last login timestamp",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "last_name": {
                      "description": "Last name",
                      "type": "string"
                    },
                    "login_attempts": {
                      "description": "Number of login attempts",
                      "type": "integer"
                    },
                    "preferences": {
                      "description": "User preferences object",
                      "type": "object"
                    },
                    "role": {
                      "description": "User role",
                      "enum": [
                        "super_admin",
                        "admin",
                        "user"
                      ],
                      "type": "string"
                    },
                    "status": {
                      "description": "User account status",
                      "enum": [
                        "active",
                        "inactive",
                        "suspended",
                        "pending_verification"
                      ],
                      "type": "string"
                    },
                    "timezone": {
                      "default": "UTC",
                      "description": "User timezone",
                      "type": "string"
                    },
                    "two_factor_enabled": {
                      "description": "Two-factor authentication status",
                      "type": "boolean"
                    },
                    "updated_at": {
                      "description": "Last update timestamp",
                      "format": "date-time",
                      "type": "string"
                    },
                    "username": {
                      "description": "Username",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Not allowed - User access required",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Failed to update profile",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update user profile",
        "tags": [
          "Profile"
        ]
      }
    },
    "/api/v1/user/{user_id}": {
      "get": {
        "description": "Retrieve detailed information about a specific user. Requires admin privileges.",
        "parameters": [
          {
            "description": "User's unique identifier",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/UserResponseSchema"
                },
                "message": {
                  "description": "Success message",
                  "example": "User retrieved successfully",
                  "type": "string"
                },
                "success": {
                  "description": "Operation success status",
                  "example": true,
                  "type": "boolean"
                },
                "timestamp": {
                  "description": "Response generation timestamp",
                  "example": "2024-08-01T12:30:45.000Z",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a specific user by ID.",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/website/agent/{agent_id}/sources": {
      "get": {
        "description": "Retrieve website sources registered for the specified agent identifier.",
        "parameters": [
          {
            "description": "Agent identifier whose website sources should be returned",
            "format": "uuid",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of website sources for the agent",
            "schema": {
              "properties": {
                "website_sources": {
                  "items": {
                    "$ref": "#/definitions/WebsiteSource"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid agent identifier supplied",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List website sources associated with a specific agent.",
        "tags": [
          "Website"
        ]
      }
    },
    "/api/v1/website/handshake": {
      "post": {
        "description": "Allow the embedded widget to declare the host page context. No authentication required.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "agent_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "trigger_crawl": {
                  "type": "boolean"
                },
                "url": {
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "agent_id",
                "url"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Handshake accepted",
            "schema": {
              "properties": {
                "crawl_task_id": {
                  "nullable": true,
                  "type": "string"
                },
                "website_page": {
                  "$ref": "#/definitions/WebsitePage"
                },
                "website_source": {
                  "$ref": "#/definitions/WebsiteSource"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not available",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Lightweight endpoint hit by the widget to declare hosting context.",
        "tags": [
          "Website"
        ]
      }
    },
    "/api/v1/website/source": {
      "get": {
        "parameters": [
          {
            "description": "Filter by agent identifier",
            "format": "uuid",
            "in": "query",
            "name": "agent_id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of website sources",
            "schema": {
              "properties": {
                "website_sources": {
                  "items": {
                    "$ref": "#/definitions/WebsiteSource"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List website sources for the current company.",
        "tags": [
          "Website"
        ]
      },
      "post": {
        "description": "Register a website source so the agent can crawl content from the domain.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "agent_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "allowed_paths": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "base_url": {
                  "format": "uri",
                  "type": "string"
                },
                "crawl_frequency_minutes": {
                  "minimum": 1,
                  "type": "integer"
                },
                "disallowed_paths": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "max_depth": {
                  "minimum": 0,
                  "type": "integer"
                },
                "max_pages": {
                  "minimum": 1,
                  "type": "integer"
                },
                "notes": {
                  "type": "string"
                },
                "seed_urls": {
                  "items": {
                    "format": "uri",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "agent_id",
                "base_url"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Website source registered",
            "schema": {
              "properties": {
                "website_source": {
                  "$ref": "#/definitions/WebsiteSource"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Agent not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "409": {
            "description": "Website already registered",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Register a website source for automated crawling.",
        "tags": [
          "Website"
        ]
      }
    },
    "/api/v1/website/source/{source_id}": {
      "delete": {
        "description": "Soft delete a website source and asynchronously clean up related content.",
        "parameters": [
          {
            "description": "Website source identifier",
            "format": "uuid",
            "in": "path",
            "name": "source_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Deletion queued",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "task_id": {
                  "type": "string"
                },
                "website_source_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid website source identifier",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Website source not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Queue deletion of a website source.",
        "tags": [
          "Website"
        ]
      }
    },
    "/api/v1/website/source/{source_id}/crawl": {
      "post": {
        "description": "Queue a crawl job to refresh website content for the given source.",
        "parameters": [
          {
            "format": "uuid",
            "in": "path",
            "name": "source_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "max_pages": {
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Crawl queued",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "task_id": {
                  "type": "string"
                },
                "website_source_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Website source not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Manually trigger a crawl for a website source.",
        "tags": [
          "Website"
        ]
      }
    },
    "/api/v1/website/source/{source_id}/pages": {
      "get": {
        "parameters": [
          {
            "description": "Website source identifier",
            "format": "uuid",
            "in": "path",
            "name": "source_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Website source and its pages",
            "schema": {
              "properties": {
                "pages": {
                  "items": {
                    "$ref": "#/definitions/WebsitePage"
                  },
                  "type": "array"
                },
                "website_source": {
                  "$ref": "#/definitions/WebsiteSource"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Website source not found",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "AUTH_001",
                  "type": "string"
                },
                "details": {
                  "description": "Additional error details",
                  "type": "object"
                },
                "error": {
                  "description": "Error message",
                  "example": "An error occurred",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSecretAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List pages for a given website source.",
        "tags": [
          "Website"
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "ApiKeyAuth": [],
      "ApiSecretAuth": []
    },
    {
      "bearerAuth": []
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "description": "API key identifier header. Required alongside X-API-Secret when authenticating with API keys.",
      "in": "header",
      "name": "X-API-Key",
      "type": "apiKey"
    },
    "ApiSecretAuth": {
      "description": "API secret header. Use together with X-API-Key to authenticate via API keys.",
      "in": "header",
      "name": "X-API-Secret",
      "type": "apiKey"
    },
    "bearerAuth": {
      "description": "JWT Authorization header using the Bearer scheme. Example: 'Bearer {token}'",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User onboarding, login, logout, and token management workflows."
    },
    {
      "name": "Profile",
      "description": "Endpoints that let an authenticated user view or update their profile data."
    },
    {
      "name": "API Keys",
      "description": "Create, rotate, revoke, and analyze scoped API credentials."
    },
    {
      "name": "Agents",
      "description": "Provision, configure, clone, and monitor Knowrithm agents."
    },
    {
      "name": "LLM Settings",
      "description": "Manage provider credentials, model tuning parameters, and embedding options."
    },
    {
      "name": "Documents",
      "description": "Upload, list, delete, and restore knowledge base documents."
    },
    {
      "name": "Document Chunks",
      "description": "Fine-grained chunk level operations for knowledge management."
    },
    {
      "name": "Search",
      "description": "Semantic search across documents and database sources."
    },
    {
      "name": "Providers",
      "description": "Maintain LLM and embedding providers available to agents."
    },
    {
      "name": "Models",
      "description": "Manage provider model catalogs, pricing, and capabilities."
    },
    {
      "name": "Website",
      "description": "Register, crawl, and manage website sources and widget handshakes."
    },
    {
      "name": "Conversations",
      "description": "Create, archive, restore, and stream conversations."
    },
    {
      "name": "Messages",
      "description": "Send, stream, delete, and restore individual conversation messages."
    },
    {
      "name": "Leads",
      "description": "Register and manage leads captured through agent widgets or APIs."
    },
    {
      "name": "Database Connections",
      "description": "Connect, analyze, export, and restore database integrations."
    },
    {
      "name": "Database Tables",
      "description": "Inspect and manage table metadata associated with database connections."
    },
    {
      "name": "Companies",
      "description": "Company provisioning, updates, soft deletes, and restoration workflows."
    },
    {
      "name": "Analytics",
      "description": "Usage dashboards, exports, and KPI endpoints for agents and companies."
    },
    {
      "name": "Admin",
      "description": "Administrative endpoints for governance, impersonation, and configuration."
    },
    {
      "name": "System",
      "description": "System health, metrics, and asynchronous task monitoring."
    },
    {
      "name": "Addresses",
      "description": "Company address creation and retrieval APIs."
    },
    {
      "name": "Countries",
      "description": "Country reference data maintenance."
    },
    {
      "name": "States",
      "description": "State and province reference data maintenance."
    },
    {
      "name": "Cities",
      "description": "City reference data maintenance."
    }
  ],
  "x-tagGroups": [
    {
      "name": "Identity & Access",
      "tags": [
        "Authentication",
        "Profile",
        "API Keys"
      ]
    },
    {
      "name": "Agents & Knowledge",
      "tags": [
        "Agents",
        "LLM Settings",
        "Documents",
        "Document Chunks",
        "Providers",
        "Models",
        "Search",
        "Website"
      ]
    },
    {
      "name": "Conversations & Leads",
      "tags": [
        "Leads",
        "Conversations",
        "Messages"
      ]
    },
    {
      "name": "Data Integrations",
      "tags": [
        "Database Connections",
        "Database Tables",
        "Companies",
        "Addresses",
        "Countries",
        "States",
        "Cities"
      ]
    },
    {
      "name": "Operations & Insight",
      "tags": [
        "Admin",
        "Analytics",
        "System"
      ]
    }
  ],
  "externalDocs": {
    "description": "Explore implementation guides, SDKs, and tutorials",
    "url": "https://docs.knowrithm.org"
  }
}